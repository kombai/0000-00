(function(W) {

W['ClassRef'] = {};

ClassRef["NSArray"] = {"[:]":"NSObject","[+]":{"array":{"abs":"Creates and returns an empty array.","dec":"+ (instancetype)array"},"arrayWithArray:":{"abs":"Creates and returns an array containing the objects in another given array.","dec":"+ (instancetype)arrayWithArray:(NSArray *)anArray"},"arrayWithContentsOfFile:":{"abs":"Creates and returns an array containing the contents of the file specified by a given path.","dec":"+ (id)arrayWithContentsOfFile:(NSString *)aPath"},"arrayWithContentsOfURL:":{"abs":"Creates and returns an array containing the contents specified by a given URL.","dec":"+ (id)arrayWithContentsOfURL:(NSURL *)aURL"},"arrayWithObject:":{"abs":"Creates and returns an array containing a given object.","dec":"+ (instancetype)arrayWithObject:(id)anObject"},"arrayWithObjects:":{"abs":"Creates and returns an array containing the objects in the argument list.","dec":"+ (instancetype)arrayWithObjects:(id)firstObj,,..."},"arrayWithObjects:count:":{"abs":"Creates and returns an array that includes a given number of objects from a given C array.","dec":"+ (instancetype)arrayWithObjects:(const id [])objects count:(NSUInteger)count"}},"[-]":{"addObserver:forKeyPath:options:context:":{"abs":"Raises an exception.","dec":"- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context"},"addObserver:toObjectsAtIndexes:forKeyPath:options:context:":{"abs":"Registers an observer to receive key value observer notifications for the specified key-path relative to the objects at the indexes.","dec":"- (void)addObserver:(NSObject *)anObserver toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context"},"arrayByAddingObject:":{"abs":"Returns a new array that is a copy of the receiving array with a given object added to the end.","dec":"- (NSArray *)arrayByAddingObject:(id)anObject"},"arrayByAddingObjectsFromArray:":{"abs":"Returns a new array that is a copy of the receiving array with the objects contained in another array added to the end.","dec":"- (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)otherArray"},"componentsJoinedByString:":{"abs":"Constructs and returns an NSString object that is the result of interposing a given separator between the elements of the array.","dec":"- (NSString *)componentsJoinedByString:(NSString *)separator"},"containsObject:":{"abs":"Returns a Boolean value that indicates whether a given object is present in the array.","dec":"- (BOOL)containsObject:(id)anObject"},"count":{"abs":"Returns the number of objects currently in the array.","dec":"- (NSUInteger)count"},"description":{"abs":"Returns a string that represents the contents of the array, formatted as a property list.","dec":"- (NSString *)description"},"descriptionWithLocale:":{"abs":"Returns a string that represents the contents of the array, formatted as a property list.","dec":"- (NSString *)descriptionWithLocale:(id)locale"},"descriptionWithLocale:indent:":{"abs":"Returns a string that represents the contents of the array, formatted as a property list.","dec":"- (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level"},"enumerateObjectsAtIndexes:options:usingBlock:":{"abs":"Executes a given block using the objects in the array at the specified indexes.","dec":"- (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block"},"enumerateObjectsUsingBlock:":{"abs":"Executes a given block using each object in the array, starting with the first object and continuing through the array to the last object.","dec":"- (void)enumerateObjectsUsingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block"},"enumerateObjectsWithOptions:usingBlock:":{"abs":"Executes a given block using each object in the array.","dec":"- (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block"},"filteredArrayUsingPredicate:":{"abs":"Evaluates a given predicate against each object in the receiving array and returns a new array containing the objects for which the predicate returns true.","dec":"- (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate"},"firstObject":{"abs":"Returns the first object in the array.","dec":"- (id)firstObject"},"firstObjectCommonWithArray:":{"abs":"Returns the first object contained in the receiving array that’s equal to an object in another given array.","dec":"- (id)firstObjectCommonWithArray:(NSArray *)otherArray"},"getObjects:range:":{"abs":"Copies the objects contained in the array that fall within the specified range to aBuffer.","dec":"- (void)getObjects:(id __unsafe_unretained [])objects range:(NSRange)range"},"indexesOfObjectsAtIndexes:options:passingTest:":{"abs":"Returns the indexes, from a given set of indexes, of objects in the array that pass a test in a given Block for a given set of enumeration options.","dec":"- (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexesOfObjectsPassingTest:":{"abs":"Returns the indexes of objects in the array that pass a test in a given Block.","dec":"- (NSIndexSet *)indexesOfObjectsPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexesOfObjectsWithOptions:passingTest:":{"abs":"Returns the indexes of objects in the array that pass a test in a given Block for a given set of enumeration options.","dec":"- (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexOfObject:":{"abs":"Returns the lowest index whose corresponding array value is equal to a given object.","dec":"- (NSUInteger)indexOfObject:(id)anObject"},"indexOfObject:inRange:":{"abs":"Returns the lowest index within a specified range whose corresponding array value is equal to a given object .","dec":"- (NSUInteger)indexOfObject:(id)anObject inRange:(NSRange)range"},"indexOfObject:inSortedRange:options:usingComparator:":{"abs":"Returns the index, within a specified range, of an object compared with elements in the array using a given NSComparator block.","dec":"- (NSUInteger)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp"},"indexOfObjectAtIndexes:options:passingTest:":{"abs":"Returns the index, from a given set of indexes, of the first object in the array that passes a test in a given Block for a given set of enumeration options.","dec":"- (NSUInteger)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexOfObjectIdenticalTo:":{"abs":"Returns the lowest index whose corresponding array value is identical to a given object.","dec":"- (NSUInteger)indexOfObjectIdenticalTo:(id)anObject"},"indexOfObjectIdenticalTo:inRange:":{"abs":"Returns the lowest index within a specified range whose corresponding array value is equal to a given object .","dec":"- (NSUInteger)indexOfObjectIdenticalTo:(id)anObject inRange:(NSRange)range"},"indexOfObjectPassingTest:":{"abs":"Returns the index of the first object in the array that passes a test in a given Block.","dec":"- (NSUInteger)indexOfObjectPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexOfObjectWithOptions:passingTest:":{"abs":"Returns the index of an object in the array that passes a test in a given Block for a given set of enumeration options.","dec":"- (NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"init":{"abs":"Initializes a newly allocated array.","dec":"- (instancetype)init"},"initWithArray:":{"abs":"Initializes a newly allocated array by placing in it the objects contained in a given array.","dec":"- (instancetype)initWithArray:(NSArray *)anArray"},"initWithArray:copyItems:":{"abs":"Initializes a newly allocated array using anArray as the source of data objects for the array.","dec":"- (instancetype)initWithArray:(NSArray *)array copyItems:(BOOL)flag"},"initWithContentsOfFile:":{"abs":"Initializes a newly allocated array with the contents of the file specified by a given path.","dec":"- (id)initWithContentsOfFile:(NSString *)aPath"},"initWithContentsOfURL:":{"abs":"Initializes a newly allocated array with the contents of the location specified by a given URL.","dec":"- (id)initWithContentsOfURL:(NSURL *)aURL"},"initWithObjects:":{"abs":"Initializes a newly allocated array by placing in it the objects in the argument list.","dec":"- (instancetype)initWithObjects:(id)firstObj,,..."},"initWithObjects:count:":{"abs":"Initializes a newly allocated array to include a given number of objects from a given C array.","dec":"- (instancetype)initWithObjects:(const id [])objects count:(NSUInteger)count"},"isEqualToArray:":{"abs":"Compares the receiving array to another array.","dec":"- (BOOL)isEqualToArray:(NSArray *)otherArray"},"lastObject":{"abs":"Returns the last object in the array.","dec":"- (id)lastObject"},"makeObjectsPerformSelector:":{"abs":"Sends to each object in the array the message identified by a given selector, starting with the first object and continuing through the array to the last object.","dec":"- (void)makeObjectsPerformSelector:(SEL)aSelector"},"makeObjectsPerformSelector:withObject:":{"abs":"Sends the aSelector message to each object in the array, starting with the first object and continuing through the array to the last object.","dec":"- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)anObject"},"objectAtIndex:":{"abs":"Returns the object located at the specified index.","dec":"- (id)objectAtIndex:(NSUInteger)index"},"objectAtIndexedSubscript:":{"abs":"Returns the object at the specified index.","dec":"- (id)objectAtIndexedSubscript:(NSUInteger)idx"},"objectEnumerator":{"abs":"Returns an enumerator object that lets you access each object in the array.","dec":"- (NSEnumerator *)objectEnumerator"},"objectsAtIndexes:":{"abs":"Returns an array containing the objects in the array at the indexes specified by a given index set.","dec":"- (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes"},"pathsMatchingExtensions:":{"abs":"Returns an array containing all the pathname elements in the receiving array that have filename extensions from a given array.","dec":"- (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes"},"removeObserver:forKeyPath:":{"abs":"Raises an exception.","dec":"- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath"},"removeObserver:forKeyPath:context:":{"abs":"Raises an exception.","dec":"- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context"},"removeObserver:fromObjectsAtIndexes:forKeyPath:":{"abs":"Removes anObserver from all key value observer notifications associated with the specified keyPath relative to the array’s objects at indexes.","dec":"- (void)removeObserver:(NSObject *)anObserver fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath"},"removeObserver:fromObjectsAtIndexes:forKeyPath:context:":{"abs":"Raises an exception.","dec":"- (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context"},"reverseObjectEnumerator":{"abs":"Returns an enumerator object that lets you access each object in the array, in reverse order.","dec":"- (NSEnumerator *)reverseObjectEnumerator"},"setValue:forKey:":{"abs":"Invokes setValue:forKey: on each of the array's items using the specified value and key.","dec":"- (void)setValue:(id)value forKey:(NSString *)key"},"sortedArrayHint":{"abs":"Analyzes the array and returns a “hint” that speeds the sorting of the array when the hint is supplied to sortedArrayUsingFunction:context:hint:.","dec":"- (NSData *)sortedArrayHint"},"sortedArrayUsingComparator:":{"abs":"Returns an array that lists the receiving array’s elements in ascending order, as determined by the comparison method specified by a given NSComparator Block.","dec":"- (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr"},"sortedArrayUsingDescriptors:":{"abs":"Returns a copy of the receiving array sorted as specified by a given array of sort descriptors.","dec":"- (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors"},"sortedArrayUsingFunction:context:":{"abs":"Returns a new array that lists the receiving array’s elements in ascending order as defined by the comparison function comparator.","dec":"- (NSArray *)sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context"},"sortedArrayUsingFunction:context:hint:":{"abs":"Returns a new array that lists the receiving array’s elements in ascending order as defined by the comparison function comparator.","dec":"- (NSArray *)sortedArrayUsingFunction:(NSInteger (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint"},"sortedArrayUsingSelector:":{"abs":"Returns an array that lists the receiving array’s elements in ascending order, as determined by the comparison method specified by a given selector.","dec":"- (NSArray *)sortedArrayUsingSelector:(SEL)comparator"},"sortedArrayWithOptions:usingComparator:":{"abs":"Returns an array that lists the receiving array’s elements in ascending order, as determined by the comparison method specified by a given NSComparator Block.","dec":"- (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr"},"subarrayWithRange:":{"abs":"Returns a new array containing the receiving array’s elements that fall within the limits specified by a given range.","dec":"- (NSArray *)subarrayWithRange:(NSRange)range"},"valueForKey:":{"abs":"Returns an array containing the results of invoking valueForKey: using key on each of the array's objects.","dec":"- (id)valueForKey:(NSString *)key"},"writeToFile:atomically:":{"abs":"Writes the contents of the array to a file at a given path.","dec":"- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag"},"writeToURL:atomically:":{"abs":"Writes the contents of the array to the location specified by a given URL.","dec":"- (BOOL)writeToURL:(NSURL *)aURL atomically:(BOOL)flag"}},"[=]":{"NSBinarySearchingFirstEqual":"","NSBinarySearchingLastEqual":"","NSBinarySearchingInsertionIndex":""}};

ClassRef["NSAssertionHandler"] = {"[:]":"NSObject","[+]":{"currentHandler":{"abs":"Returns the NSAssertionHandler object associated with the current thread.","dec":"+ (NSAssertionHandler *)currentHandler"}},"[-]":{"handleFailureInFunction:file:lineNumber:description:":{"abs":"Logs (using NSLog) an error message that includes the name of the function, the name of the file, and the line number.","dec":"- (void)handleFailureInFunction:(NSString *)functionName file:(NSString *)fileName lineNumber:(NSInteger)line description:(NSString *)format, ..."},"handleFailureInMethod:object:file:lineNumber:description:":{"abs":"Logs (using NSLog) an error message that includes the name of the method that failed, the class name of the object, the name of the source file, and the line number.","dec":"- (void)handleFailureInMethod:(SEL)selector object:(id)object file:(NSString *)fileName lineNumber:(NSInteger)line description:(NSString *)format, ..."}},"[=]":{"NSAssertionHandlerKey":""}};

ClassRef["NSAttributedString UIKit Additions"] = {"[:]":"NSObject","[+]":{"attributedStringWithAttachment:":{"abs":"Creates an attributed string with an attachment.","dec":"+ (NSAttributedString *)attributedStringWithAttachment:(NSTextAttachment *)attachment"}},"[-]":{"boundingRectWithSize:options:context:":{"abs":"Returns the bounding rectangle required to draw the string.","dec":"- (CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options context:(NSStringDrawingContext *)context"},"dataFromRange:documentAttributes:error:":{"abs":"Returns an data object that contains a text stream corresponding to the characters and attributes within the given range.","dec":"- (NSData *)dataFromRange:(NSRange)range documentAttributes:(NSDictionary *)dict error:(NSError **)error"},"drawAtPoint:":{"abs":"Draws the attributed string starting at the specified point in the current graphics context.","dec":"- (void)drawAtPoint:(CGPoint)point"},"drawInRect:":{"abs":"Draws the attributed string inside the specified bounding rectangle in the current graphics context.","dec":"- (void)drawInRect:(CGRect)rect"},"drawWithRect:options:context:":{"abs":"Draws the attributed string in the specified bounding rectangle using the provided options.","dec":"- (void)drawWithRect:(CGRect)rect options:(NSStringDrawingOptions)options context:(NSStringDrawingContext *)context"},"fileWrapperFromRange:documentAttributes:error:":{"abs":"Returns an NSFileWrapper object that contains a text stream corresponding to the characters and attributes within the given range.","dec":"- (NSFileWrapper *)fileWrapperFromRange:(NSRange)range documentAttributes:(NSDictionary *)dict error:(NSError **)error"},"initWithData:options:documentAttributes:error:":{"abs":"Initializes and returns a new attributed string object from the data contained in the given data object.","dec":"- (id)initWithData:(NSData *)data options:(NSDictionary *)options documentAttributes:(NSDictionary **)dict error:(NSError **)error"},"initWithFileURL:options:documentAttributes:error:":{"abs":"Initializes a new attributed string object from the data at the given URL.","dec":"- (id)initWithFileURL:(NSURL *)url options:(NSDictionary *)options documentAttributes:(NSDictionary **)dict error:(NSError **)error"},"size":{"abs":"Returns the size required to draw the string.","dec":"- (CGSize)size"}},"[=]":{"NSStringDrawingTruncatesLastVisibleLine":"","NSStringDrawingUsesLineFragmentOrigin":"","NSStringDrawingUsesFontLeading":"","NSStringDrawingUsesDeviceMetrics":"","NSUnderlineStyleNone":"","NSUnderlineStyleSingle":"","NSUnderlineStyleThick":"","NSUnderlineStyleDouble":"","NSUnderlinePatternSolid":"","NSUnderlinePatternDot":"","NSUnderlinePatternDash":"","NSUnderlinePatternDashDot":"","NSUnderlinePatternDashDotDot":"","NSUnderlineByWord":"","NSFontAttributeName":"","NSParagraphStyleAttributeName":"","NSForegroundColorAttributeName":"","NSBackgroundColorAttributeName":"","NSLigatureAttributeName":"","NSKernAttributeName":"","NSStrikethroughStyleAttributeName":"","NSUnderlineStyleAttributeName":"","NSStrokeColorAttributeName":"","NSStrokeWidthAttributeName":"","NSShadowAttributeName":"","NSTextEffectAttributeName":"","NSAttachmentAttributeName":"","NSLinkAttributeName":"","NSBaselineOffsetAttributeName":"","NSUnderlineColorAttributeName":"","NSStrikethroughColorAttributeName":"","NSObliquenessAttributeName":"","NSExpansionAttributeName":"","NSWritingDirectionAttributeName":"","NSVerticalGlyphFormAttributeName":"","NSTextWritingDirectionEmbedding":"","NSTextWritingDirectionOverride":"","NSPlainTextDocumentType":"","NSRTFTextDocumentType":"","NSRTFDTextDocumentType":"","NSHTMLTextDocumentType":"","NSDocumentTypeDocumentAttribute":"","NSCharacterEncodingDocumentAttribute":"","NSDefaultAttributesDocumentAttribute":"","NSPaperSizeDocumentAttribute":"","NSPaperMarginDocumentAttribute":"","NSViewSizeDocumentAttribute":"","NSViewZoomDocumentAttribute":"","NSViewModeDocumentAttribute":"","NSReadOnlyDocumentAttribute":"","NSBackgroundColorDocumentAttribute":"","NSHyphenationFactorDocumentAttribute":"","NSDefaultTabIntervalDocumentAttribute":"","NSTextLayoutSectionsAttribute":"","NSTextLayoutSectionOrientation":"","NSTextLayoutSectionRange":"","NSTextEffectLetterpressStyle":""}};

ClassRef["NSAttributedString"] = {"[:]":"NSObject","[-]":{"attribute:atIndex:effectiveRange:":{"abs":"Returns the value for an attribute with a given name of the character at a given index, and by reference the range over which the attribute applies.","dec":"- (id)attribute:(NSString *)attributeName atIndex:(NSUInteger)index effectiveRange:(NSRangePointer)aRange"},"attribute:atIndex:longestEffectiveRange:inRange:":{"abs":"Returns the value for the attribute with a given name of the character at a given index, and by reference the range over which the attribute applies.","dec":"- (id)attribute:(NSString *)attributeName atIndex:(NSUInteger)index longestEffectiveRange:(NSRangePointer)aRange inRange:(NSRange)rangeLimit"},"attributedSubstringFromRange:":{"abs":"Returns an NSAttributedString object consisting of the characters and attributes within a given range in the receiver.","dec":"- (NSAttributedString *)attributedSubstringFromRange:(NSRange)aRange"},"attributesAtIndex:effectiveRange:":{"abs":"Returns the attributes for the character at a given index.","dec":"- (NSDictionary *)attributesAtIndex:(NSUInteger)index effectiveRange:(NSRangePointer)aRange"},"attributesAtIndex:longestEffectiveRange:inRange:":{"abs":"Returns the attributes for the character at a given index, and by reference the range over which the attributes apply.","dec":"- (NSDictionary *)attributesAtIndex:(NSUInteger)index longestEffectiveRange:(NSRangePointer)aRange inRange:(NSRange)rangeLimit"},"enumerateAttribute:inRange:options:usingBlock:":{"abs":"Executes the Block for the specified attribute run in the specified range.","dec":"- (void)enumerateAttribute:(NSString *)attrName inRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^)(id value, NSRange range, BOOL *stop))block"},"enumerateAttributesInRange:options:usingBlock:":{"abs":"Executes the Block for each attribute in the range.","dec":"- (void)enumerateAttributesInRange:(NSRange)enumerationRange options:(NSAttributedStringEnumerationOptions)opts usingBlock:(void (^)(NSDictionary *attrs, NSRange range, BOOL *stop))block"},"initWithAttributedString:":{"abs":"Returns an NSAttributedString object initialized with the characters and attributes of another given attributed string.","dec":"- (id)initWithAttributedString:(NSAttributedString *)attributedString"},"initWithString:":{"abs":"Returns an NSAttributedString object initialized with the characters of a given string and no attribute information.","dec":"- (id)initWithString:(NSString *)aString"},"initWithString:attributes:":{"abs":"Returns an NSAttributedString object initialized with a given string and attributes.","dec":"- (id)initWithString:(NSString *)aString attributes:(NSDictionary *)attributes"},"isEqualToAttributedString:":{"abs":"Returns a Boolean value that indicates whether the receiver is equal to another given attributed string.","dec":"- (BOOL)isEqualToAttributedString:(NSAttributedString *)otherString"},"length":{"abs":"Returns the length of the receiver’s string object.","dec":"- (NSUInteger)length"},"string":{"abs":"Returns the character contents of the receiver as an NSString object.","dec":"- (NSString *)string"}},"[=]":{"NSAttributedStringEnumerationReverse":"","NSAttributedStringEnumerationLongestEffectiveRangeNotRequired":""}};

ClassRef["NSAutoreleasePool"] = {"[:]":"NSObject","[+]":{"addObject:":{"abs":"Adds a given object to the active autorelease pool in the current thread.","dec":"+ (void)addObject:(id)object"}},"[-]":{"addObject:":{"abs":"Adds a given object to the receiver","dec":"- (void)addObject:(id)object"},"autorelease":{"abs":"Raises an exception.","dec":"- (id)autorelease"},"drain":{"abs":"In a reference-counted environment, releases and pops the receiver; in a garbage-collected environment, triggers garbage collection if the memory allocated since the last collection is greater than the current threshold.","dec":"- (void)drain"},"release":{"abs":"Releases and pops the receiver.","dec":"- (void)release"},"retain":{"abs":"Raises an exception.","dec":"- (id)retain"}}};

ClassRef["NSBlockOperation"] = {"[:]":"NSOperation : NSObject","[+]":{"blockOperationWithBlock:":{"abs":"Creates and returns an NSBlockOperation object and adds the specified block to it.","dec":"+ (id)blockOperationWithBlock:(void (^)(void))block"}},"[-]":{"addExecutionBlock:":{"abs":"Adds the specified block to the receiver’s list of blocks to perform.","dec":"- (void)addExecutionBlock:(void (^)(void))block"},"executionBlocks":{"abs":"Returns an array containing the blocks associated with the receiver.","dec":"- (NSArray *)executionBlocks"}}};

ClassRef["NSBundle UIKit Additions"] = {"[:]":"NSObject","[-]":{"loadNibNamed:owner:options:":{"abs":"Unarchives the contents of a nib file located in the receiver's bundle.","dec":"- (NSArray *)loadNibNamed:(NSString *)name owner:(id)owner options:(NSDictionary *)options"}},"[=]":{"UINibProxiedObjectsKey":"","UINibExternalObjects":""}};

ClassRef["NSBundle"] = {"[:]":"NSObject","[+]":{"allBundles":{"abs":"Returns an array of all the application’s non-framework bundles.","dec":"+ (NSArray *)allBundles"},"allFrameworks":{"abs":"Returns an array of all of the application’s bundles that represent frameworks.","dec":"+ (NSArray *)allFrameworks"},"bundleForClass:":{"abs":"Returns the NSBundle object with which the specified class is associated.","dec":"+ (NSBundle *)bundleForClass:(Class)aClass"},"bundleWithIdentifier:":{"abs":"Returns the previously created NSBundle instance that has the specified bundle identifier.","dec":"+ (NSBundle *)bundleWithIdentifier:(NSString *)identifier"},"bundleWithPath:":{"abs":"Returns an NSBundle object that corresponds to the specified directory.","dec":"+ (NSBundle *)bundleWithPath:(NSString *)fullPath"},"bundleWithURL:":{"abs":"Returns an NSBundle object that corresponds to the specified file URL.","dec":"+ (NSBundle *)bundleWithURL:(NSURL *)url"},"mainBundle":{"abs":"Returns the NSBundle object that corresponds to the directory where the current application executable is located.","dec":"+ (NSBundle *)mainBundle"},"pathForResource:ofType:inDirectory:":{"abs":"Returns the full pathname for the resource file identified by the specified name and extension and residing in a given bundle directory.","dec":"+ (NSString *)pathForResource:(NSString *)name ofType:(NSString *)extension inDirectory:(NSString *)bundlePath"},"pathsForResourcesOfType:inDirectory:":{"abs":"Returns an array containing the pathnames for all bundle resources having the specified extension and residing in the bundle directory at the specified path.","dec":"+ (NSArray *)pathsForResourcesOfType:(NSString *)extension inDirectory:(NSString *)bundlePath"},"preferredLocalizationsFromArray:":{"abs":"Returns one or more localizations from the specified list that a bundle object would use to locate resources for the current user.","dec":"+ (NSArray *)preferredLocalizationsFromArray:(NSArray *)localizationsArray"},"preferredLocalizationsFromArray:forPreferences:":{"abs":"Returns the localizations that a bundle object would prefer, given the specified bundle and user preference localizations.","dec":"+ (NSArray *)preferredLocalizationsFromArray:(NSArray *)localizationsArray forPreferences:(NSArray *)preferencesArray"},"URLForResource:withExtension:subdirectory:inBundleWithURL:":{"abs":"Creates and returns a file URL for the resource with the specified name and extension in the specified bundle.","dec":"+ (NSURL *)URLForResource:(NSString *)name withExtension:(NSString *)ext subdirectory:(NSString *)subpath inBundleWithURL:(NSURL *)bundleURL"},"URLsForResourcesWithExtension:subdirectory:inBundleWithURL:":{"abs":"Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, within the specified bundle.","dec":"+ (NSArray *)URLsForResourcesWithExtension:(NSString *)ext subdirectory:(NSString *)subpath inBundleWithURL:(NSURL *)bundleURL"}},"[-]":{"appStoreReceiptURL":{"abs":"Returns the file URL for the bundle’s App Store receipt.","dec":"- (NSURL *)appStoreReceiptURL"},"builtInPlugInsPath":{"abs":"Returns the full pathname of the receiver's subdirectory containing plug-ins.","dec":"- (NSString *)builtInPlugInsPath"},"builtInPlugInsURL":{"abs":"Returns the file URL of the receiver's subdirectory containing plug-ins.","dec":"- (NSURL *)builtInPlugInsURL"},"bundleIdentifier":{"abs":"Returns the receiver’s bundle identifier.","dec":"- (NSString *)bundleIdentifier"},"bundlePath":{"abs":"Returns the full pathname of the receiver’s bundle directory.","dec":"- (NSString *)bundlePath"},"bundleURL":{"abs":"Returns the full URL of the receiver’s bundle directory.","dec":"- (NSURL *)bundleURL"},"classNamed:":{"abs":"Returns the Class object for the specified name.","dec":"- (Class)classNamed:(NSString *)className"},"developmentLocalization":{"abs":"Returns the localization used to create the bundle.","dec":"- (NSString *)developmentLocalization"},"executableArchitectures":{"abs":"Returns an array of numbers indicating the architecture types supported by the bundle’s executable.","dec":"- (NSArray *)executableArchitectures"},"executablePath":{"abs":"Returns the full pathname of the receiver's executable file.","dec":"- (NSString *)executablePath"},"executableURL":{"abs":"Returns the file URL of the receiver's executable file.","dec":"- (NSURL *)executableURL"},"infoDictionary":{"abs":"Returns a dictionary that contains information about the receiver.","dec":"- (NSDictionary *)infoDictionary"},"initWithPath:":{"abs":"Returns an NSBundle object initialized to correspond to the specified directory.","dec":"- (id)initWithPath:(NSString *)fullPath"},"initWithURL:":{"abs":"Returns an NSBundle object initialized to correspond to the specified file URL.","dec":"- (id)initWithURL:(NSURL *)url"},"isLoaded":{"abs":"Obtains information about the load status of a bundle.","dec":"- (BOOL)isLoaded"},"load":{"abs":"Dynamically loads the bundle’s executable code into a running program, if the code has not already been loaded.","dec":"- (BOOL)load"},"loadAndReturnError:":{"abs":"Loads the bundle’s executable code and returns any errors.","dec":"- (BOOL)loadAndReturnError:(NSError **)error"},"localizations":{"abs":"Returns a list of all the localizations contained within the receiver’s bundle.","dec":"- (NSArray *)localizations"},"localizedInfoDictionary":{"abs":"Returns a dictionary with the keys from the bundle’s localized property list.","dec":"- (NSDictionary *)localizedInfoDictionary"},"localizedStringForKey:value:table:":{"abs":"Returns a localized version of the string designated by the specified key and residing in the specified table.","dec":"- (NSString *)localizedStringForKey:(NSString *)key value:(NSString *)value table:(NSString *)tableName"},"objectForInfoDictionaryKey:":{"abs":"Returns the value associated with the specified key in the receiver's information property list.","dec":"- (id)objectForInfoDictionaryKey:(NSString *)key"},"pathForAuxiliaryExecutable:":{"abs":"Returns the full pathname of the executable with the specified name in the receiver’s bundle.","dec":"- (NSString *)pathForAuxiliaryExecutable:(NSString *)executableName"},"pathForResource:ofType:":{"abs":"Returns the full pathname for the resource identified by the specified name and file extension.","dec":"- (NSString *)pathForResource:(NSString *)name ofType:(NSString *)extension"},"pathForResource:ofType:inDirectory:":{"abs":"Returns the full pathname for the resource identified by the specified name and file extension and located in the specified bundle subdirectory.","dec":"- (NSString *)pathForResource:(NSString *)name ofType:(NSString *)extension inDirectory:(NSString *)subpath"},"pathForResource:ofType:inDirectory:forLocalization:":{"abs":"Returns the full pathname for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.","dec":"- (NSString *)pathForResource:(NSString *)name ofType:(NSString *)extension inDirectory:(NSString *)subpath forLocalization:(NSString *)localizationName"},"pathsForResourcesOfType:inDirectory:":{"abs":"Returns an array containing the pathnames for all bundle resources having the specified filename extension and residing in the resource subdirectory.","dec":"- (NSArray *)pathsForResourcesOfType:(NSString *)extension inDirectory:(NSString *)subpath"},"pathsForResourcesOfType:inDirectory:forLocalization:":{"abs":"Returns an array containing the file for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.","dec":"- (NSArray *)pathsForResourcesOfType:(NSString *)extension inDirectory:(NSString *)subpath forLocalization:(NSString *)localizationName"},"preferredLocalizations":{"abs":"Returns an array of strings indicating the actual localizations contained in the receiver’s bundle.","dec":"- (NSArray *)preferredLocalizations"},"preflightAndReturnError:":{"abs":"Returns a Boolean value indicating whether the bundle’s executable code could be loaded successfully.","dec":"- (BOOL)preflightAndReturnError:(NSError **)error"},"principalClass":{"abs":"Returns the receiver’s principal class.","dec":"- (Class)principalClass"},"privateFrameworksPath":{"abs":"Returns the full pathname of the receiver's subdirectory containing private frameworks.","dec":"- (NSString *)privateFrameworksPath"},"privateFrameworksURL":{"abs":"Returns the file URL of the receiver's subdirectory containing private frameworks.","dec":"- (NSURL *)privateFrameworksURL"},"resourcePath":{"abs":"Returns the full pathname of the receiving bundle’s subdirectory containing resources.","dec":"- (NSString *)resourcePath"},"resourceURL":{"abs":"Returns the file URL of the receiver's subdirectory containing resource files.","dec":"- (NSURL *)resourceURL"},"sharedFrameworksPath":{"abs":"Returns the full pathname of the receiver's subdirectory containing shared frameworks.","dec":"- (NSString *)sharedFrameworksPath"},"sharedFrameworksURL":{"abs":"Returns the file URL of the receiver's subdirectory containing shared frameworks.","dec":"- (NSURL *)sharedFrameworksURL"},"sharedSupportPath":{"abs":"Returns the full pathname of the receiver's subdirectory containing shared support files.","dec":"- (NSString *)sharedSupportPath"},"sharedSupportURL":{"abs":"Returns the file URL of the receiver's subdirectory containing shared support files.","dec":"- (NSURL *)sharedSupportURL"},"unload":{"abs":"Unloads the code associated with the receiver.","dec":"- (BOOL)unload"},"URLForAuxiliaryExecutable:":{"abs":"Returns the file URL of the executable with the specified name in the receiver’s bundle.","dec":"- (NSURL *)URLForAuxiliaryExecutable:(NSString *)executableName"},"URLForResource:withExtension:":{"abs":"Returns the file URL for the resource identified by the specified name and file extension.","dec":"- (NSURL *)URLForResource:(NSString *)name withExtension:(NSString *)extension"},"URLForResource:withExtension:subdirectory:":{"abs":"Returns the file URL for the resource file identified by the specified name and extension and residing in a given bundle directory.","dec":"- (NSURL *)URLForResource:(NSString *)name withExtension:(NSString *)extension subdirectory:(NSString *)subpath"},"URLForResource:withExtension:subdirectory:localization:":{"abs":"Returns the file URL for the resource identified by the specified name and file extension, located in the specified bundle subdirectory, and limited to global resources and those associated with the specified localization.","dec":"- (NSURL *)URLForResource:(NSString *)name withExtension:(NSString *)extension subdirectory:(NSString *)subpath localization:(NSString *)localizationName"},"URLsForResourcesWithExtension:subdirectory:":{"abs":"Returns the file URL for the resource identified by the specified name and file extension and located in the specified bundle subdirectory.","dec":"- (NSArray *)URLsForResourcesWithExtension:(NSString *)extension subdirectory:(NSString *)subpath"},"URLsForResourcesWithExtension:subdirectory:localization:":{"abs":"Returns an array containing the file URLs for all bundle resources having the specified filename extension, residing in the specified resource subdirectory, and limited to global resources and those associated with the specified localization.","dec":"- (NSArray *)URLsForResourcesWithExtension:(NSString *)extensions subdirectory:(NSString *)subpath localization:(NSString *)localizationName"}},"[=]":{"NSBundleExecutableArchitectureI386":"","NSBundleExecutableArchitecturePPC":"","NSBundleExecutableArchitectureX86_64":"","NSBundleExecutableArchitecturePPC64":"","NSLoadedClasses":""}};

ClassRef["NSCache"] = {"[:]":"NSObject","[-]":{"countLimit":{"abs":"Returns the maximum number of objects that the cache can currently hold.","dec":"- (NSUInteger)countLimit"},"delegate":{"abs":"Returns the cache’s delegate.","dec":"- (<NSCacheDelegate>)delegate"},"evictsObjectsWithDiscardedContent":{"abs":"Returns whether or not the cache will automatically evict discardable-content objects whose content has been discarded.","dec":"- (BOOL)evictsObjectsWithDiscardedContent"},"name":{"abs":"Returns the name of the cache.","dec":"- (NSString *)name"},"objectForKey:":{"abs":"Returns the value associated with a given key.","dec":"- (id)objectForKey:(id)key"},"removeAllObjects":{"abs":"Empties the cache.","dec":"- (void)removeAllObjects"},"removeObjectForKey:":{"abs":"Removes the value of the specified key in the cache.","dec":"- (void)removeObjectForKey:(id)key"},"setCountLimit:":{"abs":"Sets the maximum number of objects that the cache can hold.","dec":"- (void)setCountLimit:(NSUInteger)lim"},"setDelegate:":{"abs":"Makes the given object the cache’s delegate.","dec":"- (void)setDelegate:(<NSCacheDelegate>)del"},"setEvictsObjectsWithDiscardedContent:":{"abs":"Sets whether the cache will automatically evict NSDiscardableContent objects after the object’s content has been discarded.","dec":"- (void)setEvictsObjectsWithDiscardedContent:(BOOL)b"},"setName:":{"abs":"Sets the cache’s name attribute to a specific string.","dec":"- (void)setName:(NSString *)cacheName"},"setObject:forKey:":{"abs":"Sets the value of the specified key in the cache.","dec":"- (void)setObject:(id)obj forKey:(id)key"},"setObject:forKey:cost:":{"abs":"Sets the value of the specified key in the cache, and associates the key-value pair with the specified cost.","dec":"- (void)setObject:(id)obj forKey:(id)key cost:(NSUInteger)num"},"setTotalCostLimit:":{"abs":"Sets the maximum total cost that the cache can have before it starts evicting objects.","dec":"- (void)setTotalCostLimit:(NSUInteger)lim"},"totalCostLimit":{"abs":"Returns the maximum total cost that the cache can have before it starts evicting objects.","dec":"- (NSUInteger)totalCostLimit"}}};

ClassRef["NSCachedURLResponse"] = {"[:]":"NSObject","[-]":{"data":{"abs":"Returns the receiver’s cached data.","dec":"- (NSData *)data"},"initWithResponse:data:":{"abs":"Initializes an NSCachedURLResponse object.","dec":"- (id)initWithResponse:(NSURLResponse *)response data:(NSData *)data"},"initWithResponse:data:userInfo:storagePolicy:":{"abs":"Initializes an NSCachedURLResponse object.","dec":"- (id)initWithResponse:(NSURLResponse *)response data:(NSData *)data userInfo:(NSDictionary *)userInfo storagePolicy:(NSURLCacheStoragePolicy)storagePolicy"},"response":{"abs":"Returns the NSURLResponse object associated with the receiver.","dec":"- (NSURLResponse *)response"},"storagePolicy":{"abs":"Returns the receiver’s cache storage policy.","dec":"- (NSURLCacheStoragePolicy)storagePolicy"},"userInfo":{"abs":"Returns the receiver’s user info dictionary.","dec":"- (NSDictionary *)userInfo"}},"[=]":{"NSURLCacheStorageAllowed":"","NSURLCacheStorageAllowedInMemoryOnly":"","NSURLCacheStorageNotAllowed":""}};

ClassRef["NSCalendar"] = {"[:]":"NSObject","[+]":{"autoupdatingCurrentCalendar":{"abs":"Returns the current logical calendar for the current user.","dec":"+ (id)autoupdatingCurrentCalendar"},"currentCalendar":{"abs":"Returns the logical calendar for the current user.","dec":"+ (id)currentCalendar"}},"[-]":{"calendarIdentifier":{"abs":"Returns the identifier for the receiver.","dec":"- (NSString *)calendarIdentifier"},"components:fromDate:":{"abs":"Returns a NSDateComponents object containing a given date decomposed into specified components.","dec":"- (NSDateComponents *)components:(NSUInteger)unitFlags fromDate:(NSDate *)date"},"components:fromDate:toDate:options:":{"abs":"Returns, as an NSDateComponents object using specified components, the difference between two supplied dates.","dec":"- (NSDateComponents *)components:(NSUInteger)unitFlags fromDate:(NSDate *)startingDate toDate:(NSDate *)resultDate options:(NSUInteger)opts"},"dateByAddingComponents:toDate:options:":{"abs":"Returns a new NSDate object representing the absolute time calculated by adding given components to a given date.","dec":"- (NSDate *)dateByAddingComponents:(NSDateComponents *)comps toDate:(NSDate *)date options:(NSUInteger)opts"},"dateFromComponents:":{"abs":"Returns a new NSDate object representing the absolute time calculated from given components.","dec":"- (NSDate *)dateFromComponents:(NSDateComponents *)comps"},"firstWeekday":{"abs":"Returns the index of the first weekday of the receiver.","dec":"- (NSUInteger)firstWeekday"},"initWithCalendarIdentifier:":{"abs":"Initializes a newly-allocated NSCalendar object for the calendar specified by a given identifier.","dec":"- (id)initWithCalendarIdentifier:(NSString *)string"},"locale":{"abs":"Returns the locale for the receiver.","dec":"- (NSLocale *)locale"},"maximumRangeOfUnit:":{"abs":"The maximum range limits of the values that a given unit can take on in the receive","dec":"- (NSRange)maximumRangeOfUnit:(NSCalendarUnit)unit"},"minimumDaysInFirstWeek":{"abs":"Returns the minimum number of days in the first week of the receiver.","dec":"- (NSUInteger)minimumDaysInFirstWeek"},"minimumRangeOfUnit:":{"abs":"Returns the minimum range limits of the values that a given unit can take on in the receiver.","dec":"- (NSRange)minimumRangeOfUnit:(NSCalendarUnit)unit"},"ordinalityOfUnit:inUnit:forDate:":{"abs":"Returns, for a given absolute time, the ordinal number of a smaller calendar unit (such as a day) within a specified larger calendar unit (such as a week).","dec":"- (NSUInteger)ordinalityOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate *)date"},"rangeOfUnit:inUnit:forDate:":{"abs":"Returns the range of absolute time values that a smaller calendar unit (such as a day) can take on in a larger calendar unit (such as a month) that includes a specified absolute time.","dec":"- (NSRange)rangeOfUnit:(NSCalendarUnit)smaller inUnit:(NSCalendarUnit)larger forDate:(NSDate *)date"},"rangeOfUnit:startDate:interval:forDate:":{"abs":"Returns by reference the starting time and duration of a given calendar unit that contains a given date.","dec":"- (BOOL)rangeOfUnit:(NSCalendarUnit)unit startDate:(NSDate **)datep interval:(NSTimeInterval *)tip forDate:(NSDate *)date"},"setFirstWeekday:":{"abs":"Sets the index of the first weekday for the receiver.","dec":"- (void)setFirstWeekday:(NSUInteger)weekday"},"setLocale:":{"abs":"Sets the locale for the receiver.","dec":"- (void)setLocale:(NSLocale *)locale"},"setMinimumDaysInFirstWeek:":{"abs":"Sets the minimum number of days in the first week of the receiver.","dec":"- (void)setMinimumDaysInFirstWeek:(NSUInteger)mdw"},"setTimeZone:":{"abs":"Sets the time zone for the receiver.","dec":"- (void)setTimeZone:(NSTimeZone *)tz"},"timeZone":{"abs":"Returns the time zone for the receiver.","dec":"- (NSTimeZone *)timeZone"}},"[=]":{"NSEraCalendarUnit":"","NSYearCalendarUnit":"","NSMonthCalendarUnit":"","NSDayCalendarUnit":"","NSHourCalendarUnit":"","NSMinuteCalendarUnit":"","NSSecondCalendarUnit":"","NSWeekCalendarUnit":"","NSWeekdayCalendarUnit":"","NSWeekdayOrdinalCalendarUnit":"","NSQuarterCalendarUnit":"","NSWeekOfMonthCalendarUnit":"","NSWeekOfYearCalendarUnit":"","NSYearForWeekOfYearCalendarUnit":"","NSCalendarCalendarUnit":"","NSTimeZoneCalendarUnit":"","NSWrapCalendarComponents":""}};

ClassRef["NSCharacterSet"] = {"[:]":"NSObject","[+]":{"alphanumericCharacterSet":{"abs":"Returns a character set containing the characters in the categories Letters, Marks, and Numbers.","dec":"+ (id)alphanumericCharacterSet"},"capitalizedLetterCharacterSet":{"abs":"Returns a character set containing the characters in the category of Titlecase Letters.","dec":"+ (id)capitalizedLetterCharacterSet"},"characterSetWithBitmapRepresentation:":{"abs":"Returns a character set containing characters determined by a given bitmap representation.","dec":"+ (id)characterSetWithBitmapRepresentation:(NSData *)data"},"characterSetWithCharactersInString:":{"abs":"Returns a character set containing the characters in a given string.","dec":"+ (id)characterSetWithCharactersInString:(NSString *)aString"},"characterSetWithContentsOfFile:":{"abs":"Returns a character set read from the bitmap representation stored in the file a given path.","dec":"+ (id)characterSetWithContentsOfFile:(NSString *)path"},"characterSetWithRange:":{"abs":"Returns a character set containing characters with Unicode values in a given range.","dec":"+ (id)characterSetWithRange:(NSRange)aRange"},"controlCharacterSet":{"abs":"Returns a character set containing the characters in the categories of Control or Format Characters.","dec":"+ (id)controlCharacterSet"},"decimalDigitCharacterSet":{"abs":"Returns a character set containing the characters in the category of Decimal Numbers.","dec":"+ (id)decimalDigitCharacterSet"},"decomposableCharacterSet":{"abs":"Returns a character set containing all individual Unicode characters that can also be represented as composed character sequences.","dec":"+ (id)decomposableCharacterSet"},"illegalCharacterSet":{"abs":"Returns a character set containing values in the category of Non-Characters or that have not yet been defined in version 3.2 of the Unicode standard.","dec":"+ (id)illegalCharacterSet"},"letterCharacterSet":{"abs":"Returns a character set containing the characters in the categories Letters and Marks.","dec":"+ (id)letterCharacterSet"},"lowercaseLetterCharacterSet":{"abs":"Returns a character set containing the characters in the category of Lowercase Letters.","dec":"+ (id)lowercaseLetterCharacterSet"},"newlineCharacterSet":{"abs":"Returns a character set containing the newline characters.","dec":"+ (id)newlineCharacterSet"},"nonBaseCharacterSet":{"abs":"Returns a character set containing the characters in the category of Marks.","dec":"+ (id)nonBaseCharacterSet"},"punctuationCharacterSet":{"abs":"Returns a character set containing the characters in the category of Punctuation.","dec":"+ (id)punctuationCharacterSet"},"symbolCharacterSet":{"abs":"Returns a character set containing the characters in the category of Symbols.","dec":"+ (id)symbolCharacterSet"},"uppercaseLetterCharacterSet":{"abs":"Returns a character set containing the characters in the categories of Uppercase Letters and Titlecase Letters.","dec":"+ (id)uppercaseLetterCharacterSet"},"URLFragmentAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a fragment URL component.","dec":"+ (id)URLFragmentAllowedCharacterSet"},"URLHostAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a host URL subcomponent.","dec":"+ (id)URLHostAllowedCharacterSet"},"URLPasswordAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a password URL subcomponent.","dec":"+ (id)URLPasswordAllowedCharacterSet"},"URLPathAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a path URL component.","dec":"+ (id)URLPathAllowedCharacterSet"},"URLQueryAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a query URL component.","dec":"+ (id)URLQueryAllowedCharacterSet"},"URLUserAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a user URL subcomponent.","dec":"+ (id)URLUserAllowedCharacterSet"},"whitespaceAndNewlineCharacterSet":{"abs":"Returns a character set containing Unicode General Category Z*, U000A ~ U000D, and U0085.","dec":"+ (id)whitespaceAndNewlineCharacterSet"},"whitespaceCharacterSet":{"abs":"Returns a character set containing only the in-line whitespace characters space (U+0020) and tab (U+0009).","dec":"+ (id)whitespaceCharacterSet"}},"[-]":{"bitmapRepresentation":{"abs":"Returns an NSData object encoding the receiver in binary format.","dec":"- (NSData *)bitmapRepresentation"},"characterIsMember:":{"abs":"Returns a Boolean value that indicates whether a given character is in the receiver.","dec":"- (BOOL)characterIsMember:(unichar)aCharacter"},"hasMemberInPlane:":{"abs":"Returns a Boolean value that indicates whether the receiver has at least one member in a given character plane.","dec":"- (BOOL)hasMemberInPlane:(uint8_t)thePlane"},"invertedSet":{"abs":"Returns a character set containing only characters that don’t exist in the receiver.","dec":"- (NSCharacterSet *)invertedSet"},"isSupersetOfSet:":{"abs":"Returns a Boolean value that indicates whether the receiver is a superset of another given character set.","dec":"- (BOOL)isSupersetOfSet:(NSCharacterSet *)theOtherSet"},"longCharacterIsMember:":{"abs":"Returns a Boolean value that indicates whether a given long character is a member of the receiver.","dec":"- (BOOL)longCharacterIsMember:(UTF32Char)theLongChar"}},"[=]":{"NSOpenStepUnicodeReservedBase":""}};

ClassRef["NSCoder UIKit Additions"] = {"[:]":"NSObject","[-]":{"decodeCGAffineTransformForKey:":{"abs":"Decodes and returns the CGAffineTransform structure associated with the specified key in the receiver’s archive.","dec":"- (CGAffineTransform)decodeCGAffineTransformForKey:(NSString *)key"},"decodeCGPointForKey:":{"abs":"Decodes and returns the CGPoint structure associated with the specified key in the receiver’s archive.","dec":"- (CGPoint)decodeCGPointForKey:(NSString *)key"},"decodeCGRectForKey:":{"abs":"Decodes and returns the CGRect structure associated with the specified key in the receiver’s archive.","dec":"- (CGRect)decodeCGRectForKey:(NSString *)key"},"decodeCGSizeForKey:":{"abs":"Decodes and returns the CGSize structure associated with the specified key in the receiver’s archive.","dec":"- (CGSize)decodeCGSizeForKey:(NSString *)key"},"decodeUIEdgeInsetsForKey:":{"abs":"Decodes and returns the UIEdgeInsets structure associated with the specified key in the receiver’s archive.","dec":"- (UIEdgeInsets)decodeUIEdgeInsetsForKey:(NSString *)key"},"decodeUIOffsetForKey:":{"abs":"Decodes and returns the UIOffset structure associated with the specified key in the receiver’s archive.","dec":"- (UIOffset)decodeUIOffsetForKey:(NSString *)key"},"encodeCGAffineTransform:forKey:":{"abs":"Encodes an affine transform and associates it with the specified key in the receiver’s archive.","dec":"- (void)encodeCGAffineTransform:(CGAffineTransform)transform forKey:(NSString *)key"},"encodeCGPoint:forKey:":{"abs":"Encodes a point and associates it with the specified key in the receiver’s archive.","dec":"- (void)encodeCGPoint:(CGPoint)point forKey:(NSString *)key"},"encodeCGRect:forKey:":{"abs":"Encodes a rectangle and associates it with the specified key in the receiver’s archive.","dec":"- (void)encodeCGRect:(CGRect)rect forKey:(NSString *)key"},"encodeCGSize:forKey:":{"abs":"Encodes size information and associates it with the specified key in the receiver’s archive.","dec":"- (void)encodeCGSize:(CGSize)size forKey:(NSString *)key"},"encodeUIEdgeInsets:forKey:":{"abs":"Encodes edge inset data and associates it with the specified key in the receiver’s archive.","dec":"- (void)encodeUIEdgeInsets:(UIEdgeInsets)insets forKey:(NSString *)key"},"encodeUIOffset:forKey:":{"abs":"Encodes offset data and associates it with the specified key in the receiver’s archive.","dec":"- (void)encodeUIOffset:(UIOffset)offset forKey:(NSString *)key"}}};

ClassRef["NSCoder"] = {"[:]":"NSObject","[-]":{"allowedClasses":{"abs":"Get the current set of coded classes that allow secure coding.","dec":"- (NSSet *)allowedClasses"},"allowsKeyedCoding":{"abs":"Returns a Boolean value that indicates whether the receiver supports keyed coding of objects.","dec":"- (BOOL)allowsKeyedCoding"},"containsValueForKey:":{"abs":"Returns a Boolean value that indicates whether an encoded value is available for a string.","dec":"- (BOOL)containsValueForKey:(NSString *)key"},"decodeArrayOfObjCType:count:at:":{"abs":"Decodes an array of count items, whose Objective-C type is given by itemType.","dec":"- (void)decodeArrayOfObjCType:(const char *)itemType count:(NSUInteger)count at:(void *)address"},"decodeBoolForKey:":{"abs":"Decodes and returns a boolean value that was previously encoded with encodeBool:forKey: and associated with the string key.","dec":"- (BOOL)decodeBoolForKey:(NSString *)key"},"decodeBytesForKey:returnedLength:":{"abs":"Decodes a buffer of data that was previously encoded with encodeBytes:length:forKey: and associated with the string key.","dec":"- (const uint8_t *)decodeBytesForKey:(NSString *)key returnedLength:(NSUInteger *)lengthp"},"decodeBytesWithReturnedLength:":{"abs":"Decodes a buffer of data whose types are unspecified.","dec":"- (void *)decodeBytesWithReturnedLength:(NSUInteger *)numBytes"},"decodeDataObject":{"abs":"Decodes and returns an NSData object that was previously encoded with encodeDataObject:. Subclasses must override this method.","dec":"- (NSData *)decodeDataObject"},"decodeDoubleForKey:":{"abs":"Decodes and returns a double value that was previously encoded with either encodeFloat:forKey: or encodeDouble:forKey: and associated with the string key.","dec":"- (double)decodeDoubleForKey:(NSString *)key"},"decodeFloatForKey:":{"abs":"Decodes and returns a float value that was previously encoded with encodeFloat:forKey: or encodeDouble:forKey: and associated with the string key.","dec":"- (float)decodeFloatForKey:(NSString *)key"},"decodeInt32ForKey:":{"abs":"Decodes and returns a 32-bit integer value that was previously encoded with encodeInt:forKey:, encodeInteger:forKey:, encodeInt32:forKey:, or encodeInt64:forKey: and associated with the string key.","dec":"- (int32_t)decodeInt32ForKey:(NSString *)key"},"decodeInt64ForKey:":{"abs":"Decodes and returns a 64-bit integer value that was previously encoded with encodeInt:forKey:, encodeInteger:forKey:, encodeInt32:forKey:, or encodeInt64:forKey: and associated with the string key.","dec":"- (int64_t)decodeInt64ForKey:(NSString *)key"},"decodeIntegerForKey:":{"abs":"Decodes and returns an NSInteger value that was previously encoded with encodeInt:forKey:, encodeInteger:forKey:, encodeInt32:forKey:, or encodeInt64:forKey: and associated with the string key.","dec":"- (NSInteger)decodeIntegerForKey:(NSString *)key"},"decodeIntForKey:":{"abs":"Decodes and returns an int value that was previously encoded with encodeInt:forKey:, encodeInteger:forKey:, encodeInt32:forKey:, or encodeInt64:forKey: and associated with the string key.","dec":"- (int)decodeIntForKey:(NSString *)key"},"decodeObject":{"abs":"Decodes an Objective-C object that was previously encoded with any of the encode...Object: methods.","dec":"- (id)decodeObject"},"decodeObjectForKey:":{"abs":"Decodes and returns an Objective-C object that was previously encoded with encodeObject:forKey: or encodeConditionalObject:forKey: and associated with the string key.","dec":"- (id)decodeObjectForKey:(NSString *)key"},"decodeObjectOfClass:forKey:":{"abs":"Decodes an object for the key, restricted to the specified class.","dec":"- (id)decodeObjectOfClass:(Class)aClass forKey:(NSString *)key"},"decodeObjectOfClasses:forKey:":{"abs":"Decodes an object for the key, restricted to the specified classes.","dec":"- (id)decodeObjectOfClasses:(NSSet *)classes forKey:(NSString *)key"},"decodePropertyListForKey:":{"abs":"Returns a decoded property list for the specified key.","dec":"- (id)decodePropertyListForKey:(NSString *)key"},"decodeValueOfObjCType:at:":{"abs":"Decodes a single value, whose Objective-C type is given by valueType.","dec":"- (void)decodeValueOfObjCType:(const char *)valueType at:(void *)data"},"decodeValuesOfObjCTypes:":{"abs":"Decodes a series of potentially different Objective-C types.","dec":"- (void)decodeValuesOfObjCTypes:(const char *)valueTypes, ..."},"encodeArrayOfObjCType:count:at:":{"abs":"Encodes an array of count items, whose Objective-C type is given by itemType.","dec":"- (void)encodeArrayOfObjCType:(const char *)itemType count:(NSUInteger)count at:(const void *)address"},"encodeBool:forKey:":{"abs":"Encodes boolv and associates it with the string key.","dec":"- (void)encodeBool:(BOOL)boolv forKey:(NSString *)key"},"encodeBycopyObject:":{"abs":"Can be overridden by subclasses to encode object so that a copy, rather than a proxy, is created upon decoding.","dec":"- (void)encodeBycopyObject:(id)object"},"encodeByrefObject:":{"abs":"Can be overridden by subclasses to encode object so that a proxy, rather than a copy, is created upon decoding.","dec":"- (void)encodeByrefObject:(id)object"},"encodeBytes:length:":{"abs":"Encodes a buffer of data whose types are unspecified.","dec":"- (void)encodeBytes:(const void *)address length:(NSUInteger)numBytes"},"encodeBytes:length:forKey:":{"abs":"Encodes a buffer of data, bytesp, whose length is specified by lenv, and associates it with the string key.","dec":"- (void)encodeBytes:(const uint8_t *)bytesp length:(NSUInteger)lenv forKey:(NSString *)key"},"encodeConditionalObject:":{"abs":"Can be overridden by subclasses to conditionally encode object, preserving common references to that object.","dec":"- (void)encodeConditionalObject:(id)object"},"encodeConditionalObject:forKey:":{"abs":"Conditionally encodes a reference to objv and associates it with the string key only if objv has been unconditionally encoded with encodeObject:forKey:.","dec":"- (void)encodeConditionalObject:(id)objv forKey:(NSString *)key"},"encodeDataObject:":{"abs":"Encodes a given NSData object.","dec":"- (void)encodeDataObject:(NSData *)data"},"encodeDouble:forKey:":{"abs":"Encodes realv and associates it with the string key.","dec":"- (void)encodeDouble:(double)realv forKey:(NSString *)key"},"encodeFloat:forKey:":{"abs":"Encodes realv and associates it with the string key.","dec":"- (void)encodeFloat:(float)realv forKey:(NSString *)key"},"encodeInt32:forKey:":{"abs":"Encodes the 32-bit integer intv and associates it with the string key.","dec":"- (void)encodeInt32:(int32_t)intv forKey:(NSString *)key"},"encodeInt64:forKey:":{"abs":"Encodes the 64-bit integer intv and associates it with the string key.","dec":"- (void)encodeInt64:(int64_t)intv forKey:(NSString *)key"},"encodeInt:forKey:":{"abs":"Encodes intv and associates it with the string key.","dec":"- (void)encodeInt:(int)intv forKey:(NSString *)key"},"encodeInteger:forKey:":{"abs":"Encodes a given NSInteger and associates it with a given key.","dec":"- (void)encodeInteger:(NSInteger)intv forKey:(NSString *)key"},"encodeObject:":{"abs":"Encodes object.","dec":"- (void)encodeObject:(id)object"},"encodeObject:forKey:":{"abs":"Encodes the object objv and associates it with the string key.","dec":"- (void)encodeObject:(id)objv forKey:(NSString *)key"},"encodeRootObject:":{"abs":"Can be overridden by subclasses to encode an interconnected group of Objective-C objects, starting with rootObject.","dec":"- (void)encodeRootObject:(id)rootObject"},"encodeValueOfObjCType:at:":{"abs":"Must be overridden by subclasses to encode a single value residing at address, whose Objective-C type is given by valueType.","dec":"- (void)encodeValueOfObjCType:(const char *)valueType at:(const void *)address"},"encodeValuesOfObjCTypes:":{"abs":"Encodes a series of values of potentially differing Objective-C types.","dec":"- (void)encodeValuesOfObjCTypes:(const char *)valueTypes, ..."},"objectZone":{"abs":"This method is present for historical reasons and has no effect.","dec":"- (NSZone *)objectZone"},"requiresSecureCoding":{"abs":"Returns whether the coder requires secure coding.","dec":"- (BOOL)requiresSecureCoding"},"setObjectZone:":{"abs":"This method is present for historical reasons and has no effect.","dec":"- (void)setObjectZone:(NSZone *)zone"},"systemVersion":{"abs":"During encoding, this method should return the system version currently in effect.","dec":"- (unsigned)systemVersion"},"versionForClassName:":{"abs":"This method is present for historical reasons and is not used with keyed archivers.","dec":"- (NSInteger)versionForClassName:(NSString *)className"}}};

ClassRef["NSComparisonPredicate"] = {"[:]":"NSPredicate : NSObject","[+]":{"predicateWithLeftExpression:rightExpression:customSelector:":{"abs":"Returns a new predicate formed by combining the left and right expressions using a given selector.","dec":"+ (NSPredicate *)predicateWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs customSelector:(SEL)selector"},"predicateWithLeftExpression:rightExpression:modifier:type:options:":{"abs":"Creates and returns a predicate of a given type formed by combining given left and right expressions using a given modifier and options.","dec":"+ (NSPredicate *)predicateWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options"}},"[-]":{"comparisonPredicateModifier":{"abs":"Returns the comparison predicate modifier for the receiver.","dec":"- (NSComparisonPredicateModifier)comparisonPredicateModifier"},"customSelector":{"abs":"Returns the selector for the receiver.","dec":"- (SEL)customSelector"},"initWithLeftExpression:rightExpression:customSelector:":{"abs":"Initializes a predicate formed by combining given left and right expressions using a given selector.","dec":"- (id)initWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs customSelector:(SEL)selector"},"initWithLeftExpression:rightExpression:modifier:type:options:":{"abs":"Initializes a predicate to a given type formed by combining given left and right expressions using a given modifier and options.","dec":"- (id)initWithLeftExpression:(NSExpression *)lhs rightExpression:(NSExpression *)rhs modifier:(NSComparisonPredicateModifier)modifier type:(NSPredicateOperatorType)type options:(NSComparisonPredicateOptions)options"},"leftExpression":{"abs":"Returns the left expression for the receiver.","dec":"- (NSExpression *)leftExpression"},"options":{"abs":"Returns the options that are set for the receiver.","dec":"- (NSComparisonPredicateOptions)options"},"predicateOperatorType":{"abs":"Returns the predicate type for the receiver.","dec":"- (NSPredicateOperatorType)predicateOperatorType"},"rightExpression":{"abs":"Returns the right expression for the receiver.","dec":"- (NSExpression *)rightExpression"}},"[=]":{"NSDirectPredicateModifier":"","NSAllPredicateModifier":"","NSAnyPredicateModifier":"","NSCaseInsensitivePredicateOption":"","NSDiacriticInsensitivePredicateOption":"","NSNormalizedPredicateOption":"","NSLocaleSensitivePredicateOption":"","NSLessThanPredicateOperatorType":"","NSLessThanOrEqualToPredicateOperatorType":"","NSGreaterThanPredicateOperatorType":"","NSGreaterThanOrEqualToPredicateOperatorType":"","NSEqualToPredicateOperatorType":"","NSNotEqualToPredicateOperatorType":"","NSMatchesPredicateOperatorType":"","NSLikePredicateOperatorType":"","NSBeginsWithPredicateOperatorType":"","NSEndsWithPredicateOperatorType":"","NSInPredicateOperatorType":"","NSCustomSelectorPredicateOperatorType":"","NSContainsPredicateOperatorType":"","NSBetweenPredicateOperatorType":""}};

ClassRef["NSCompoundPredicate"] = {"[:]":"NSPredicate : NSObject","[+]":{"andPredicateWithSubpredicates:":{"abs":"Returns a new predicate formed by AND-ing the predicates in a given array.","dec":"+ (NSPredicate *)andPredicateWithSubpredicates:(NSArray *)subpredicates"},"notPredicateWithSubpredicate:":{"abs":"Returns a new predicate formed by NOT-ing a given predicate.","dec":"+ (NSPredicate *)notPredicateWithSubpredicate:(NSPredicate *)predicate"},"orPredicateWithSubpredicates:":{"abs":"Returns a new predicate formed by OR-ing the predicates in a given array.","dec":"+ (NSPredicate *)orPredicateWithSubpredicates:(NSArray *)subpredicates"}},"[-]":{"compoundPredicateType":{"abs":"Returns the predicate type for the receiver.","dec":"- (NSCompoundPredicateType)compoundPredicateType"},"initWithType:subpredicates:":{"abs":"Returns the receiver initialized to a given type using predicates from a given array.","dec":"- (id)initWithType:(NSCompoundPredicateType)type subpredicates:(NSArray *)subpredicates"},"subpredicates":{"abs":"Returns the array of the receiver’s subpredicates.","dec":"- (NSArray *)subpredicates"}},"[=]":{"NSNotPredicateType":"","NSAndPredicateType":"","NSOrPredicateType":""}};

ClassRef["NSCondition"] = {"[:]":"NSObject","[-]":{"broadcast":{"abs":"Signals the condition, waking up all threads waiting on it.","dec":"- (void)broadcast"},"name":{"abs":"Returns the name associated with the receiver.","dec":"- (NSString *)name"},"setName:":{"abs":"Assigns a name to the receiver.","dec":"- (void)setName:(NSString *)newName"},"signal":{"abs":"Signals the condition, waking up one thread waiting on it.","dec":"- (void)signal"},"wait":{"abs":"Blocks the current thread until the condition is signaled.","dec":"- (void)wait"},"waitUntilDate:":{"abs":"Blocks the current thread until the condition is signaled or the specified time limit is reached.","dec":"- (BOOL)waitUntilDate:(NSDate *)limit"}}};

ClassRef["NSConditionLock"] = {"[:]":"NSObject","[-]":{"condition":{"abs":"Returns the condition associated with the receiver.","dec":"- (NSInteger)condition"},"initWithCondition:":{"abs":"Initializes a newly allocated NSConditionLock object and sets its condition.","dec":"- (id)initWithCondition:(NSInteger)condition"},"lockBeforeDate:":{"abs":"Attempts to acquire a lock before a specified moment in time.","dec":"- (BOOL)lockBeforeDate:(NSDate *)limit"},"lockWhenCondition:":{"abs":"Attempts to acquire a lock.","dec":"- (void)lockWhenCondition:(NSInteger)condition"},"lockWhenCondition:beforeDate:":{"abs":"Attempts to acquire a lock before a specified moment in time.","dec":"- (BOOL)lockWhenCondition:(NSInteger)condition beforeDate:(NSDate *)limit"},"name":{"abs":"Returns the name associated with the receiver.","dec":"- (NSString *)name"},"setName:":{"abs":"Assigns a name to the receiver.","dec":"- (void)setName:(NSString *)newName"},"tryLock":{"abs":"Attempts to acquire a lock without regard to the receiver’s condition.","dec":"- (BOOL)tryLock"},"tryLockWhenCondition:":{"abs":"Attempts to acquire a lock if the receiver’s condition is equal to the specified condition.","dec":"- (BOOL)tryLockWhenCondition:(NSInteger)condition"},"unlockWithCondition:":{"abs":"Relinquishes the lock and sets the receiver’s condition.","dec":"- (void)unlockWithCondition:(NSInteger)condition"}}};

ClassRef["NSCountedSet"] = {"[:]":"NSMutableSet : NSSet : NSObject","[-]":{"addObject:":{"abs":"Adds a given object to the set.","dec":"- (void)addObject:(id)anObject"},"countForObject:":{"abs":"Returns the count associated with a given object in the set.","dec":"- (NSUInteger)countForObject:(id)anObject"},"initWithArray:":{"abs":"Returns a counted set object initialized with the contents of a given array.","dec":"- (id)initWithArray:(NSArray *)anArray"},"initWithCapacity:":{"abs":"Returns a counted set object initialized with enough memory to hold a given number of objects.","dec":"- (id)initWithCapacity:(NSUInteger)numItems"},"initWithSet:":{"abs":"Returns a counted set object initialized with the contents of a given set.","dec":"- (id)initWithSet:(NSSet *)aSet"},"objectEnumerator":{"abs":"Returns an enumerator object that lets you access each object in the set once, independent of its count.","dec":"- (NSEnumerator *)objectEnumerator"},"removeObject:":{"abs":"Removes a given object from the set.","dec":"- (void)removeObject:(id)anObject"}}};

ClassRef["NSData"] = {"[:]":"NSObject","[+]":{"data":{"abs":"Creates and returns an empty data object.","dec":"+ (id)data"},"dataWithBytes:length:":{"abs":"Creates and returns a data object containing a given number of bytes copied from a given buffer.","dec":"+ (id)dataWithBytes:(const void *)bytes length:(NSUInteger)length"},"dataWithBytesNoCopy:length:":{"abs":"Creates and returns a data object that holds length bytes from the buffer bytes.","dec":"+ (id)dataWithBytesNoCopy:(void *)bytes length:(NSUInteger)length"},"dataWithBytesNoCopy:length:freeWhenDone:":{"abs":"Creates and returns a data object that holds a given number of bytes from a given buffer.","dec":"+ (id)dataWithBytesNoCopy:(void *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)freeWhenDone"},"dataWithContentsOfFile:":{"abs":"Creates and returns a data object by reading every byte from the file specified by a given path.","dec":"+ (id)dataWithContentsOfFile:(NSString *)path"},"dataWithContentsOfFile:options:error:":{"abs":"Creates and returns a data object by reading every byte from the file specified by a given path.","dec":"+ (id)dataWithContentsOfFile:(NSString *)path options:(NSDataReadingOptions)mask error:(NSError **)errorPtr"},"dataWithContentsOfURL:":{"abs":"Returns a data object containing the data from the location specified by a given URL.","dec":"+ (id)dataWithContentsOfURL:(NSURL *)aURL"},"dataWithContentsOfURL:options:error:":{"abs":"Creates and returns a data object containing the data from the location specified by aURL.","dec":"+ (id)dataWithContentsOfURL:(NSURL *)aURL options:(NSDataReadingOptions)mask error:(NSError **)errorPtr"},"dataWithData:":{"abs":"Creates and returns a data object containing the contents of another data object.","dec":"+ (id)dataWithData:(NSData *)aData"}},"[-]":{"base64EncodedDataWithOptions:":{"abs":"Create a Base-64, UTF-8 encoded NSData from the receiver's contents using the given options.","dec":"- (NSData *)base64EncodedDataWithOptions:(NSDataBase64EncodingOptions)options"},"base64EncodedStringWithOptions:":{"abs":"Create a Base-64 encoded NSString from the receiver's contents using the given options.","dec":"- (NSString *)base64EncodedStringWithOptions:(NSDataBase64EncodingOptions)options"},"bytes":{"abs":"Returns a pointer to the receiver’s contents.","dec":"- (const void *)bytes"},"description":{"abs":"Returns an NSString object that contains a hexadecimal representation of the receiver’s contents.","dec":"- (NSString *)description"},"enumerateByteRangesUsingBlock:":{"abs":"Enumerate through each range of bytes in the data object using a block.","dec":"- (void)enumerateByteRangesUsingBlock:(void (^)(const void *bytes, NSRange byteRange, BOOL *stop))block"},"getBytes:length:":{"abs":"Copies a number of bytes from the start of the receiver's data into a given buffer.","dec":"- (void)getBytes:(void *)buffer length:(NSUInteger)length"},"getBytes:range:":{"abs":"Copies a range of bytes from the receiver’s data into a given buffer.","dec":"- (void)getBytes:(void *)buffer range:(NSRange)range"},"initWithBase64EncodedData:options:":{"abs":"Returns a data object initialized with the given Base-64 encoded data.","dec":"- (id)initWithBase64EncodedData:(NSData *)base64Data options:(NSDataBase64DecodingOptions)options"},"initWithBase64EncodedString:options:":{"abs":"Returns a data object initialized with the given Base-64 encoded string.","dec":"- (id)initWithBase64EncodedString:(NSString *)base64String options:(NSDataBase64DecodingOptions)options"},"initWithBytes:length:":{"abs":"Returns a data object initialized by adding to it a given number of bytes of data copied from a given buffer.","dec":"- (id)initWithBytes:(const void *)bytes length:(NSUInteger)length"},"initWithBytesNoCopy:length:":{"abs":"Returns a data object initialized by adding to it a given number of bytes of data from a given buffer.","dec":"- (id)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length"},"initWithBytesNoCopy:length:deallocator:":{"abs":"Returns a data object initialized by adding to it a given number of bytes of data from a given buffer, with a custom deallocator block.","dec":"- (id)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length deallocator:(void (^)(void *bytes, NSUInteger length))deallocator"},"initWithBytesNoCopy:length:freeWhenDone:":{"abs":"Initializes a newly allocated data object by adding to it length bytes of data from the buffer bytes.","dec":"- (id)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length freeWhenDone:(BOOL)flag"},"initWithContentsOfFile:":{"abs":"Returns a data object initialized by reading into it the data from the file specified by a given path.","dec":"- (id)initWithContentsOfFile:(NSString *)path"},"initWithContentsOfFile:options:error:":{"abs":"Returns a data object initialized by reading into it the data from the file specified by a given path.","dec":"- (id)initWithContentsOfFile:(NSString *)path options:(NSDataReadingOptions)mask error:(NSError **)errorPtr"},"initWithContentsOfURL:":{"abs":"Initializes a newly allocated data object initialized with the data from the location specified by aURL.","dec":"- (id)initWithContentsOfURL:(NSURL *)aURL"},"initWithContentsOfURL:options:error:":{"abs":"Returns a data object initialized with the data from the location specified by a given URL.","dec":"- (id)initWithContentsOfURL:(NSURL *)aURL options:(NSDataReadingOptions)mask error:(NSError **)errorPtr"},"initWithData:":{"abs":"Returns a data object initialized with the contents of another data object.","dec":"- (id)initWithData:(NSData *)data"},"isEqualToData:":{"abs":"Compares the receiving data object to otherData.","dec":"- (BOOL)isEqualToData:(NSData *)otherData"},"length":{"abs":"Returns the number of bytes contained in the receiver.","dec":"- (NSUInteger)length"},"rangeOfData:options:range:":{"abs":"Finds and returns the range of the first occurrence of the given data, within the given range, subject to given options.","dec":"- (NSRange)rangeOfData:(NSData *)dataToFind options:(NSDataSearchOptions)mask range:(NSRange)searchRange"},"subdataWithRange:":{"abs":"Returns a data object containing the receiver’s bytes that fall within the limits specified by a given range.","dec":"- (NSData *)subdataWithRange:(NSRange)range"},"writeToFile:atomically:":{"abs":"Writes the bytes in the receiver to the file specified by a given path.","dec":"- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag"},"writeToFile:options:error:":{"abs":"Writes the bytes in the receiver to the file specified by a given path.","dec":"- (BOOL)writeToFile:(NSString *)path options:(NSDataWritingOptions)mask error:(NSError **)errorPtr"},"writeToURL:atomically:":{"abs":"Writes the bytes in the receiver to the location specified by aURL.","dec":"- (BOOL)writeToURL:(NSURL *)aURL atomically:(BOOL)atomically"},"writeToURL:options:error:":{"abs":"Writes the bytes in the receiver to the location specified by a given URL.","dec":"- (BOOL)writeToURL:(NSURL *)aURL options:(NSDataWritingOptions)mask error:(NSError **)errorPtr"}},"[=]":{"NSDataReadingMappedIfSafe":"","NSDataReadingUncached":"","NSDataReadingMappedAlways":"","NSDataBase64Encoding64CharacterLineLength":"","NSDataBase64Encoding76CharacterLineLength":"","NSDataBase64EncodingEndLineWithCarriageReturn":"","NSDataBase64EncodingEndLineWithLineFeed":"","NSDataBase64DecodingIgnoreUnknownCharacters":"","NSDataReadingMapped":"","NSMappedRead":"","NSUncachedRead":"","NSDataWritingAtomic":"","NSDataWritingWithoutOverwriting":"","NSDataWritingFileProtectionNone":"","NSDataWritingFileProtectionComplete":"","NSDataWritingFileProtectionCompleteUnlessOpen":"","NSDataWritingFileProtectionCompleteUntilFirstUserAuthentication":"","NSDataWritingFileProtectionMask":"","NSAtomicWrite":"","NSDataSearchBackwards":"","NSDataSearchAnchored":""}};

ClassRef["NSDataDetector"] = {"[:]":"NSRegularExpression : NSObject","[.]":{"checkingTypes":{"abs":"Returns the checking types for this data detector. (read-only)","dec":"@property(readonly) NSTextCheckingTypes checkingTypes"}},"[+]":{"dataDetectorWithTypes:error:":{"abs":"Creates and returns a new data detector instance.","dec":"+ (NSDataDetector *)dataDetectorWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError **)error"}},"[-]":{"initWithTypes:error:":{"abs":"Initializes and returns a data detector instance.","dec":"- (id)initWithTypes:(NSTextCheckingTypes)checkingTypes error:(NSError **)error"}}};

ClassRef["NSDate"] = {"[:]":"NSObject","[+]":{"date":{"abs":"Creates and returns a new date set to the current date and time.","dec":"+ (instancetype)date"},"dateWithTimeInterval:sinceDate:":{"abs":"Creates and returns an NSDate object set to a given number of seconds from the specified date.","dec":"+ (instancetype)dateWithTimeInterval:(NSTimeInterval)seconds sinceDate:(NSDate *)date"},"dateWithTimeIntervalSince1970:":{"abs":"Creates and returns an NSDate object set to the given number of seconds from the first instant of 1 January 1970, GMT.","dec":"+ (instancetype)dateWithTimeIntervalSince1970:(NSTimeInterval)seconds"},"dateWithTimeIntervalSinceNow:":{"abs":"Creates and returns an NSDate object set to a given number of seconds from the current date and time.","dec":"+ (instancetype)dateWithTimeIntervalSinceNow:(NSTimeInterval)seconds"},"dateWithTimeIntervalSinceReferenceDate:":{"abs":"Creates and returns an NSDate object set to a given number of seconds from the first instant of 1 January 2001, GMT.","dec":"+ (instancetype)dateWithTimeIntervalSinceReferenceDate:(NSTimeInterval)seconds"},"distantFuture":{"abs":"Creates and returns an NSDate object representing a date in the distant future.","dec":"+ (id)distantFuture"},"distantPast":{"abs":"Creates and returns an NSDate object representing a date in the distant past.","dec":"+ (id)distantPast"},"timeIntervalSinceReferenceDate":{"abs":"Returns the interval between the first instant of 1 January 2001, GMT and the current date and time.","dec":"+ (NSTimeInterval)timeIntervalSinceReferenceDate"}},"[-]":{"compare:":{"abs":"Returns an NSComparisonResult value that indicates the temporal ordering of the receiver and another given date.","dec":"- (NSComparisonResult)compare:(NSDate *)anotherDate"},"dateByAddingTimeInterval:":{"abs":"Returns a new NSDate object that is set to a given number of seconds relative to the receiver.","dec":"- (id)dateByAddingTimeInterval:(NSTimeInterval)seconds"},"description":{"abs":"Returns a string representation of the receiver.","dec":"- (NSString *)description"},"descriptionWithLocale:":{"abs":"Returns a string representation of the receiver using the given locale.","dec":"- (NSString *)descriptionWithLocale:(id)locale"},"earlierDate:":{"abs":"Returns the earlier of the receiver and another given date.","dec":"- (NSDate *)earlierDate:(NSDate *)anotherDate"},"init":{"abs":"Returns an NSDate object initialized to the current date and time.","dec":"- (instancetype)init"},"initWithTimeInterval:sinceDate:":{"abs":"Returns an NSDate object initialized relative to another given date by a given number of seconds.","dec":"- (instancetype)initWithTimeInterval:(NSTimeInterval)seconds sinceDate:(NSDate *)refDate"},"initWithTimeIntervalSince1970:":{"abs":"Returns an NSDate object set to the given number of seconds from the first instant of 1 January 1970, GMT.","dec":"- (instancetype)initWithTimeIntervalSince1970:(NSTimeInterval)seconds"},"initWithTimeIntervalSinceNow:":{"abs":"Returns an NSDate object initialized relative to the current date and time by a given number of seconds.","dec":"- (instancetype)initWithTimeIntervalSinceNow:(NSTimeInterval)seconds"},"initWithTimeIntervalSinceReferenceDate:":{"abs":"Returns an NSDate object initialized relative the first instant of 1 January 2001, GMT by a given number of seconds.","dec":"- (instancetype)initWithTimeIntervalSinceReferenceDate:(NSTimeInterval)seconds"},"isEqualToDate:":{"abs":"Returns a Boolean value that indicates whether a given object is an NSDate object and exactly equal the receiver.","dec":"- (BOOL)isEqualToDate:(NSDate *)anotherDate"},"laterDate:":{"abs":"Returns the later of the receiver and another given date.","dec":"- (NSDate *)laterDate:(NSDate *)anotherDate"},"timeIntervalSince1970":{"abs":"Returns the interval between the receiver and the first instant of 1 January 1970, GMT.","dec":"- (NSTimeInterval)timeIntervalSince1970"},"timeIntervalSinceDate:":{"abs":"Returns the interval between the receiver and another given date.","dec":"- (NSTimeInterval)timeIntervalSinceDate:(NSDate *)anotherDate"},"timeIntervalSinceNow":{"abs":"Returns the interval between the receiver and the current date and time.","dec":"- (NSTimeInterval)timeIntervalSinceNow"},"timeIntervalSinceReferenceDate":{"abs":"Returns the interval between the receiver and the first instant of 1 January 2001, GMT.","dec":"- (NSTimeInterval)timeIntervalSinceReferenceDate"}},"[=]":{"NSTimeIntervalSince1970":""}};

ClassRef["NSDateComponents"] = {"[:]":"NSObject","[-]":{"calendar":{"abs":"Returns the calendar of the receiver.","dec":"- (NSCalendar *)calendar"},"date":{"abs":"Returns the date of the receiver.","dec":"- (NSDate *)date"},"day":{"abs":"Returns the number of day units for the receiver.","dec":"- (NSInteger)day"},"era":{"abs":"Returns the number of era units for the receiver.","dec":"- (NSInteger)era"},"hour":{"abs":"Returns the number of hour units for the receiver.","dec":"- (NSInteger)hour"},"isLeapMonth":{"abs":"Returns whether the month is a leap month.","dec":"- (BOOL)isLeapMonth"},"minute":{"abs":"Returns the number of minute units for the receiver.","dec":"- (NSInteger)minute"},"month":{"abs":"Returns the number of month units for the receiver.","dec":"- (NSInteger)month"},"quarter":{"abs":"Returns the number of quarters in the calendar.","dec":"- (NSInteger)quarter"},"second":{"abs":"Returns the number of second units for the receiver.","dec":"- (NSInteger)second"},"setCalendar:":{"abs":"Sets the receiver’s calendar.","dec":"- (void)setCalendar:(NSCalendar *)cal"},"setDay:":{"abs":"Sets the number of day units for the receiver.","dec":"- (void)setDay:(NSInteger)v"},"setEra:":{"abs":"Sets the number of era units for the receiver.","dec":"- (void)setEra:(NSInteger)v"},"setHour:":{"abs":"Sets the number of hour units for the receiver.","dec":"- (void)setHour:(NSInteger)v"},"setLeapMonth:":{"abs":"Sets the month as a leap month.","dec":"- (void)setLeapMonth:(BOOL)lm"},"setMinute:":{"abs":"Sets the number of minute units for the receiver.","dec":"- (void)setMinute:(NSInteger)v"},"setMonth:":{"abs":"Sets the number of month units for the receiver.","dec":"- (void)setMonth:(NSInteger)v"},"setQuarter:":{"abs":"Sets the number of quarters in the calendar.","dec":"- (void)setQuarter:(NSInteger)v"},"setSecond:":{"abs":"Sets the number of second units for the receiver.","dec":"- (void)setSecond:(NSInteger)v"},"setTimeZone:":{"abs":"Sets the receiver’s time zone.","dec":"- (void)setTimeZone:(NSTimeZone *)tz"},"setWeek:":{"abs":"Sets the number of week units for the receiver.","dec":"- (void)setWeek:(NSInteger)v"},"setWeekday:":{"abs":"Sets the number of weekday units for the receiver.","dec":"- (void)setWeekday:(NSInteger)v"},"setWeekdayOrdinal:":{"abs":"Sets the ordinal number of weekday units for the receiver.","dec":"- (void)setWeekdayOrdinal:(NSInteger)v"},"setWeekOfMonth:":{"abs":"Sets the week of the month.","dec":"- (void)setWeekOfMonth:(NSInteger)week"},"setWeekOfYear:":{"abs":"Sets the week of the year.","dec":"- (void)setWeekOfYear:(NSInteger)week"},"setYear:":{"abs":"Sets the number of year units for the receiver.","dec":"- (void)setYear:(NSInteger)v"},"setYearForWeekOfYear:":{"abs":"Sets the year for the week of the year.","dec":"- (void)setYearForWeekOfYear:(NSInteger)year"},"timeZone":{"abs":"Returns the receiver’s time zone.","dec":"- (NSTimeZone *)timeZone"},"week":{"abs":"Returns the number of week units for the receiver.","dec":"- (NSInteger)week"},"weekday":{"abs":"Returns the number of weekday units for the receiver.","dec":"- (NSInteger)weekday"},"weekdayOrdinal":{"abs":"Returns the ordinal number of weekday units for the receiver.","dec":"- (NSInteger)weekdayOrdinal"},"weekOfMonth":{"abs":"Returns the week of the month.","dec":"- (NSInteger)weekOfMonth"},"weekOfYear":{"abs":"Returns the week of the year.","dec":"- (NSInteger)weekOfYear"},"year":{"abs":"Returns the number of year units for the receiver.","dec":"- (NSInteger)year"},"yearForWeekOfYear":{"abs":"Returns the year for the week of the year.","dec":"- (NSInteger)yearForWeekOfYear"}},"[=]":{"NSUndefinedDateComponent":""}};

ClassRef["NSDateFormatter"] = {"[:]":"NSFormatter : NSObject","[+]":{"dateFormatFromTemplate:options:locale:":{"abs":"Returns a localized date format string representing the given date format components arranged appropriately for the specified locale.","dec":"+ (NSString *)dateFormatFromTemplate:(NSString *)template options:(NSUInteger)opts locale:(NSLocale *)locale"},"defaultFormatterBehavior":{"abs":"Returns the default formatting behavior for instances of the class.","dec":"+ (NSDateFormatterBehavior)defaultFormatterBehavior"},"localizedStringFromDate:dateStyle:timeStyle:":{"abs":"Returns string representation of a given date formatted for the current locale using the specified date and time styles.","dec":"+ (NSString *)localizedStringFromDate:(NSDate *)date dateStyle:(NSDateFormatterStyle)dateStyle timeStyle:(NSDateFormatterStyle)timeStyle"},"setDefaultFormatterBehavior:":{"abs":"Sets the default formatting behavior for instances of the class.","dec":"+ (void)setDefaultFormatterBehavior:(NSDateFormatterBehavior)behavior"}},"[-]":{"AMSymbol":{"abs":"Returns the AM symbol for the receiver.","dec":"- (NSString *)AMSymbol"},"calendar":{"abs":"Returns the calendar for the receiver.","dec":"- (NSCalendar *)calendar"},"dateFormat":{"abs":"Returns the date format string used by the receiver.","dec":"- (NSString *)dateFormat"},"dateFromString:":{"abs":"Returns a date representation of a given string interpreted using the receiver’s current settings.","dec":"- (NSDate *)dateFromString:(NSString *)string"},"dateStyle":{"abs":"Returns the date style of the receiver.","dec":"- (NSDateFormatterStyle)dateStyle"},"defaultDate":{"abs":"Returns the default date for the receiver.","dec":"- (NSDate *)defaultDate"},"doesRelativeDateFormatting":{"abs":"Returns a Boolean value that indicates whether the receiver uses phrases such as “today” and “tomorrow” for the date component.","dec":"- (BOOL)doesRelativeDateFormatting"},"eraSymbols":{"abs":"Returns the era symbols for the receiver.","dec":"- (NSArray *)eraSymbols"},"formatterBehavior":{"abs":"Returns the formatter behavior for the receiver.","dec":"- (NSDateFormatterBehavior)formatterBehavior"},"generatesCalendarDates":{"abs":"You should not use this method.","dec":"- (BOOL)generatesCalendarDates"},"getObjectValue:forString:range:error:":{"abs":"Returns by reference a date representation of a given string and the range of the string used, and returns a Boolean value that indicates whether the string could be parsed.","dec":"- (BOOL)getObjectValue:(out id *)obj forString:(NSString *)string range:(inout NSRange *)rangep error:(out NSError **)error"},"gregorianStartDate":{"abs":"Returns the start date of the Gregorian calendar for the receiver.","dec":"- (NSDate *)gregorianStartDate"},"isLenient":{"abs":"Returns a Boolean value that indicates whether the receiver uses heuristics when parsing a string.","dec":"- (BOOL)isLenient"},"locale":{"abs":"Returns the locale for the receiver.","dec":"- (NSLocale *)locale"},"longEraSymbols":{"abs":"Returns the long era symbols for the receiver","dec":"- (NSArray *)longEraSymbols"},"monthSymbols":{"abs":"Returns the month symbols for the receiver.","dec":"- (NSArray *)monthSymbols"},"PMSymbol":{"abs":"Returns the PM symbol for the receiver.","dec":"- (NSString *)PMSymbol"},"quarterSymbols":{"abs":"Returns the quarter symbols for the receiver.","dec":"- (NSArray *)quarterSymbols"},"setAMSymbol:":{"abs":"Sets the AM symbol for the receiver.","dec":"- (void)setAMSymbol:(NSString *)string"},"setCalendar:":{"abs":"Sets the calendar for the receiver.","dec":"- (void)setCalendar:(NSCalendar *)calendar"},"setDateFormat:":{"abs":"Sets the date format for the receiver.","dec":"- (void)setDateFormat:(NSString *)string"},"setDateStyle:":{"abs":"Sets the date style of the receiver.","dec":"- (void)setDateStyle:(NSDateFormatterStyle)style"},"setDefaultDate:":{"abs":"Sets the default date for the receiver.","dec":"- (void)setDefaultDate:(NSDate *)date"},"setDoesRelativeDateFormatting:":{"abs":"Specifies whether the receiver uses phrases such as “today” and “tomorrow” for the date component.","dec":"- (void)setDoesRelativeDateFormatting:(BOOL)b"},"setEraSymbols:":{"abs":"Sets the era symbols for the receiver.","dec":"- (void)setEraSymbols:(NSArray *)array"},"setFormatterBehavior:":{"abs":"Sets the formatter behavior for the receiver.","dec":"- (void)setFormatterBehavior:(NSDateFormatterBehavior)behavior"},"setGeneratesCalendarDates:":{"abs":"You should not use this method.","dec":"- (void)setGeneratesCalendarDates:(BOOL)b"},"setGregorianStartDate:":{"abs":"Sets the start date of the Gregorian calendar for the receiver.","dec":"- (void)setGregorianStartDate:(NSDate *)date"},"setLenient:":{"abs":"Sets whether the receiver uses heuristics when parsing a string.","dec":"- (void)setLenient:(BOOL)b"},"setLocale:":{"abs":"Sets the locale for the receiver.","dec":"- (void)setLocale:(NSLocale *)locale"},"setLongEraSymbols:":{"abs":"Sets the long era symbols for the receiver.","dec":"- (void)setLongEraSymbols:(NSArray *)array"},"setMonthSymbols:":{"abs":"Sets the month symbols for the receiver.","dec":"- (void)setMonthSymbols:(NSArray *)array"},"setPMSymbol:":{"abs":"Sets the PM symbol for the receiver.","dec":"- (void)setPMSymbol:(NSString *)string"},"setQuarterSymbols:":{"abs":"Sets the quarter symbols for the receiver.","dec":"- (void)setQuarterSymbols:(NSArray *)array"},"setShortMonthSymbols:":{"abs":"Sets the short month symbols for the receiver.","dec":"- (void)setShortMonthSymbols:(NSArray *)array"},"setShortQuarterSymbols:":{"abs":"Sets the short quarter symbols for the receiver.","dec":"- (void)setShortQuarterSymbols:(NSArray *)array"},"setShortStandaloneMonthSymbols:":{"abs":"Sets the short standalone month symbols for the receiver.","dec":"- (void)setShortStandaloneMonthSymbols:(NSArray *)array"},"setShortStandaloneQuarterSymbols:":{"abs":"Sets the short standalone quarter symbols for the receiver.","dec":"- (void)setShortStandaloneQuarterSymbols:(NSArray *)array"},"setShortStandaloneWeekdaySymbols:":{"abs":"Sets the short standalone weekday symbols for the receiver.","dec":"- (void)setShortStandaloneWeekdaySymbols:(NSArray *)array"},"setShortWeekdaySymbols:":{"abs":"Sets the short weekday symbols for the receiver.","dec":"- (void)setShortWeekdaySymbols:(NSArray *)array"},"setStandaloneMonthSymbols:":{"abs":"Sets the standalone month symbols for the receiver.","dec":"- (void)setStandaloneMonthSymbols:(NSArray *)array"},"setStandaloneQuarterSymbols:":{"abs":"Sets the standalone quarter symbols for the receiver.","dec":"- (void)setStandaloneQuarterSymbols:(NSArray *)array"},"setStandaloneWeekdaySymbols:":{"abs":"Sets the standalone weekday symbols for the receiver.","dec":"- (void)setStandaloneWeekdaySymbols:(NSArray *)array"},"setTimeStyle:":{"abs":"Sets the time style of the receiver.","dec":"- (void)setTimeStyle:(NSDateFormatterStyle)style"},"setTimeZone:":{"abs":"Sets the time zone for the receiver.","dec":"- (void)setTimeZone:(NSTimeZone *)tz"},"setTwoDigitStartDate:":{"abs":"Sets the two-digit start date for the receiver.","dec":"- (void)setTwoDigitStartDate:(NSDate *)date"},"setVeryShortMonthSymbols:":{"abs":"Sets the very short month symbols for the receiver.","dec":"- (void)setVeryShortMonthSymbols:(NSArray *)array"},"setVeryShortStandaloneMonthSymbols:":{"abs":"Sets the very short standalone month symbols for the receiver.","dec":"- (void)setVeryShortStandaloneMonthSymbols:(NSArray *)array"},"setVeryShortStandaloneWeekdaySymbols:":{"abs":"Sets the very short standalone weekday symbols for the receiver.","dec":"- (void)setVeryShortStandaloneWeekdaySymbols:(NSArray *)array"},"setVeryShortWeekdaySymbols:":{"abs":"Sets the vert short weekday symbols for the receiver","dec":"- (void)setVeryShortWeekdaySymbols:(NSArray *)array"},"setWeekdaySymbols:":{"abs":"Sets the weekday symbols for the receiver.","dec":"- (void)setWeekdaySymbols:(NSArray *)array"},"shortMonthSymbols":{"abs":"Returns the array of short month symbols for the receiver.","dec":"- (NSArray *)shortMonthSymbols"},"shortQuarterSymbols":{"abs":"Returns the short quarter symbols for the receiver.","dec":"- (NSArray *)shortQuarterSymbols"},"shortStandaloneMonthSymbols":{"abs":"Returns the short standalone month symbols for the receiver.","dec":"- (NSArray *)shortStandaloneMonthSymbols"},"shortStandaloneQuarterSymbols":{"abs":"Returns the short standalone quarter symbols for the receiver.","dec":"- (NSArray *)shortStandaloneQuarterSymbols"},"shortStandaloneWeekdaySymbols":{"abs":"Returns the array of short standalone weekday symbols for the receiver.","dec":"- (NSArray *)shortStandaloneWeekdaySymbols"},"shortWeekdaySymbols":{"abs":"Returns the array of short weekday symbols for the receiver.","dec":"- (NSArray *)shortWeekdaySymbols"},"standaloneMonthSymbols":{"abs":"Returns the standalone month symbols for the receiver.","dec":"- (NSArray *)standaloneMonthSymbols"},"standaloneQuarterSymbols":{"abs":"Returns the standalone quarter symbols for the receiver.","dec":"- (NSArray *)standaloneQuarterSymbols"},"standaloneWeekdaySymbols":{"abs":"Returns the array of standalone weekday symbols for the receiver.","dec":"- (NSArray *)standaloneWeekdaySymbols"},"stringFromDate:":{"abs":"Returns a string representation of a given date formatted using the receiver’s current settings.","dec":"- (NSString *)stringFromDate:(NSDate *)date"},"timeStyle":{"abs":"Returns the time style of the receiver.","dec":"- (NSDateFormatterStyle)timeStyle"},"timeZone":{"abs":"Returns the time zone for the receiver.","dec":"- (NSTimeZone *)timeZone"},"twoDigitStartDate":{"abs":"Returns the earliest date that can be denoted by a two-digit year specifier.","dec":"- (NSDate *)twoDigitStartDate"},"veryShortMonthSymbols":{"abs":"Returns the very short month symbols for the receiver.","dec":"- (NSArray *)veryShortMonthSymbols"},"veryShortStandaloneMonthSymbols":{"abs":"Returns the very short month symbols for the receiver.","dec":"- (NSArray *)veryShortStandaloneMonthSymbols"},"veryShortStandaloneWeekdaySymbols":{"abs":"Returns the array of very short standalone weekday symbols for the receiver.","dec":"- (NSArray *)veryShortStandaloneWeekdaySymbols"},"veryShortWeekdaySymbols":{"abs":"Returns the array of very short weekday symbols for the receiver.","dec":"- (NSArray *)veryShortWeekdaySymbols"},"weekdaySymbols":{"abs":"Returns the array of weekday symbols for the receiver.","dec":"- (NSArray *)weekdaySymbols"}},"[=]":{"NSDateFormatterNoStyle":"","NSDateFormatterShortStyle":"","NSDateFormatterMediumStyle":"","NSDateFormatterLongStyle":"","NSDateFormatterFullStyle":"","NSDateFormatterBehaviorDefault":"","NSDateFormatterBehavior10_0":"","NSDateFormatterBehavior10_4":""}};

ClassRef["NSDecimalNumber"] = {"[:]":"NSNumber : NSValue : NSObject","[+]":{"decimalNumberWithDecimal:":{"abs":"Creates and returns an NSDecimalNumber object equivalent to a given NSDecimal structure.","dec":"+ (NSDecimalNumber *)decimalNumberWithDecimal:(NSDecimal)decimal"},"decimalNumberWithMantissa:exponent:isNegative:":{"abs":"Creates and returns an NSDecimalNumber object equivalent to the number specified by the arguments.","dec":"+ (NSDecimalNumber *)decimalNumberWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)isNegative"},"decimalNumberWithString:":{"abs":"Creates and returns an NSDecimalNumber object whose value is equivalent to that in a given numeric string.","dec":"+ (NSDecimalNumber *)decimalNumberWithString:(NSString *)numericString"},"decimalNumberWithString:locale:":{"abs":"Creates and returns an NSDecimalNumber object whose value is equivalent to that in a given numeric string, interpreted using a given locale.","dec":"+ (NSDecimalNumber *)decimalNumberWithString:(NSString *)numericString locale:(NSDictionary *)locale"},"defaultBehavior":{"abs":"Returns the way arithmetic methods, like decimalNumberByAdding:, round off and handle error conditions.","dec":"+ (id < NSDecimalNumberBehaviors >)defaultBehavior"},"maximumDecimalNumber":{"abs":"Returns the largest possible value of an NSDecimalNumber object.","dec":"+ (NSDecimalNumber *)maximumDecimalNumber"},"minimumDecimalNumber":{"abs":"Returns the smallest possible value of an NSDecimalNumber object.","dec":"+ (NSDecimalNumber *)minimumDecimalNumber"},"notANumber":{"abs":"Returns an NSDecimalNumber object that specifies no number.","dec":"+ (NSDecimalNumber *)notANumber"},"one":{"abs":"Returns an NSDecimalNumber object equivalent to the number 1.0.","dec":"+ (NSDecimalNumber *)one"},"setDefaultBehavior:":{"abs":"Specifies the way that arithmetic methods, like decimalNumberByAdding:, round off and handle error conditions.","dec":"+ (void)setDefaultBehavior:(id < NSDecimalNumberBehaviors >)behavior"},"zero":{"abs":"Returns an NSDecimalNumber object equivalent to the number 0.0.","dec":"+ (NSDecimalNumber *)zero"}},"[-]":{"compare:":{"abs":"Returns an NSComparisonResult value that indicates the numerical ordering of the receiver and another given NSDecimalNumber object.","dec":"- (NSComparisonResult)compare:(NSNumber *)decimalNumber"},"decimalNumberByAdding:":{"abs":"Returns a new NSDecimalNumber object whose value is the sum of the receiver and another given NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByAdding:(NSDecimalNumber *)decimalNumber"},"decimalNumberByAdding:withBehavior:":{"abs":"Adds decimalNumber to the receiver and returns the sum, a newly created NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByAdding:(NSDecimalNumber *)decimalNumber withBehavior:(id < NSDecimalNumberBehaviors >)behavior"},"decimalNumberByDividingBy:":{"abs":"Returns a new NSDecimalNumber object whose value is the value of the receiver divided by that of another given NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByDividingBy:(NSDecimalNumber *)decimalNumber"},"decimalNumberByDividingBy:withBehavior:":{"abs":"Divides the receiver by decimalNumber and returns the quotient, a newly created NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByDividingBy:(NSDecimalNumber *)decimalNumber withBehavior:(id < NSDecimalNumberBehaviors >)behavior"},"decimalNumberByMultiplyingBy:":{"abs":"Returns a new NSDecimalNumber object whose value is the value of the receiver multiplied by that of another given NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByMultiplyingBy:(NSDecimalNumber *)decimalNumber"},"decimalNumberByMultiplyingBy:withBehavior:":{"abs":"Multiplies the receiver by decimalNumber and returns the product, a newly created NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByMultiplyingBy:(NSDecimalNumber *)decimalNumber withBehavior:(id < NSDecimalNumberBehaviors >)behavior"},"decimalNumberByMultiplyingByPowerOf10:":{"abs":"Multiplies the receiver by 10^power and returns the product, a newly created NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByMultiplyingByPowerOf10:(short)power"},"decimalNumberByMultiplyingByPowerOf10:withBehavior:":{"abs":"Multiplies the receiver by 10^power and returns the product, a newly created NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByMultiplyingByPowerOf10:(short)power withBehavior:(id < NSDecimalNumberBehaviors >)behavior"},"decimalNumberByRaisingToPower:":{"abs":"Returns a new NSDecimalNumber object whose value is the value of the receiver raised to a given power.","dec":"- (NSDecimalNumber *)decimalNumberByRaisingToPower:(NSUInteger)power"},"decimalNumberByRaisingToPower:withBehavior:":{"abs":"Raises the receiver to power and returns the result, a newly created NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByRaisingToPower:(NSUInteger)power withBehavior:(id < NSDecimalNumberBehaviors >)behavior"},"decimalNumberByRoundingAccordingToBehavior:":{"abs":"Rounds the receiver off in the way specified by behavior and returns the result, a newly created NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberByRoundingAccordingToBehavior:(id < NSDecimalNumberBehaviors >)behavior"},"decimalNumberBySubtracting:":{"abs":"Returns a new NSDecimalNumber object whose value is that of another given NSDecimalNumber object subtracted from the value of the receiver.","dec":"- (NSDecimalNumber *)decimalNumberBySubtracting:(NSDecimalNumber *)decimalNumber"},"decimalNumberBySubtracting:withBehavior:":{"abs":"Subtracts decimalNumber from the receiver and returns the difference, a newly created NSDecimalNumber object.","dec":"- (NSDecimalNumber *)decimalNumberBySubtracting:(NSDecimalNumber *)decimalNumber withBehavior:(id < NSDecimalNumberBehaviors >)behavior"},"decimalValue":{"abs":"Returns the receiver’s value, expressed as an NSDecimal structure.","dec":"- (NSDecimal)decimalValue"},"descriptionWithLocale:":{"abs":"Returns a string, specified according to a given locale, that represents the contents of the receiver.","dec":"- (NSString *)descriptionWithLocale:(NSDictionary *)locale"},"doubleValue":{"abs":"Returns the approximate value of the receiver as a double.","dec":"- (double)doubleValue"},"initWithDecimal:":{"abs":"Returns an NSDecimalNumber object initialized to represent a given decimal.","dec":"- (id)initWithDecimal:(NSDecimal)decimal"},"initWithMantissa:exponent:isNegative:":{"abs":"Returns an NSDecimalNumber object initialized using the given mantissa, exponent, and sign.","dec":"- (id)initWithMantissa:(unsigned long long)mantissa exponent:(short)exponent isNegative:(BOOL)flag"},"initWithString:":{"abs":"Returns an NSDecimalNumber object initialized so that its value is equivalent to that in a given numeric string.","dec":"- (id)initWithString:(NSString *)numericString"},"initWithString:locale:":{"abs":"Returns an NSDecimalNumber object initialized so that its value is equivalent to that in a given numeric string, interpreted using a given locale.","dec":"- (id)initWithString:(NSString *)numericString locale:(NSDictionary *)locale"},"objCType":{"abs":"Returns a C string containing the Objective-C type of the data contained in the receiver, which for an NSDecimalNumber object is always “d” (for double).","dec":"- (const char *)objCType"}},"[=]":{"NSDecimalNumberExactnessException":"","NSDecimalNumberOverflowException":"","NSDecimalNumberUnderflowException":"","NSDecimalNumberDivideByZeroException":""}};

ClassRef["NSDecimalNumberHandler"] = {"[:]":"NSObject","[+]":{"decimalNumberHandlerWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:":{"abs":"Returns an NSDecimalNumberHandler object with customized behavior.","dec":"+ (id)decimalNumberHandlerWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)raiseOnExactness raiseOnOverflow:(BOOL)raiseOnOverflow raiseOnUnderflow:(BOOL)raiseOnUnderflow raiseOnDivideByZero:(BOOL)raiseOnDivideByZero"},"defaultDecimalNumberHandler":{"abs":"Returns the default instance of NSDecimalNumberHandler.","dec":"+ (id)defaultDecimalNumberHandler"}},"[-]":{"initWithRoundingMode:scale:raiseOnExactness:raiseOnOverflow:raiseOnUnderflow:raiseOnDivideByZero:":{"abs":"Returns an NSDecimalNumberHandler object initialized so it behaves as specified by the method’s arguments.","dec":"- (id)initWithRoundingMode:(NSRoundingMode)roundingMode scale:(short)scale raiseOnExactness:(BOOL)raiseOnExactness raiseOnOverflow:(BOOL)raiseOnOverflow raiseOnUnderflow:(BOOL)raiseOnUnderflow raiseOnDivideByZero:(BOOL)raiseOnDivideByZero"}}};

ClassRef["NSDictionary"] = {"[:]":"NSObject","[+]":{"dictionary":{"abs":"Creates and returns an empty dictionary.","dec":"+ (instancetype)dictionary"},"dictionaryWithContentsOfFile:":{"abs":"Creates and returns a dictionary using the keys and values found in a file specified by a given path.","dec":"+ (id)dictionaryWithContentsOfFile:(NSString *)path"},"dictionaryWithContentsOfURL:":{"abs":"Creates and returns a dictionary using the keys and values found in a resource specified by a given URL.","dec":"+ (id)dictionaryWithContentsOfURL:(NSURL *)aURL"},"dictionaryWithDictionary:":{"abs":"Creates and returns a dictionary containing the keys and values from another given dictionary.","dec":"+ (instancetype)dictionaryWithDictionary:(NSDictionary *)otherDictionary"},"dictionaryWithObject:forKey:":{"abs":"Creates and returns a dictionary containing a given key and value.","dec":"+ (instancetype)dictionaryWithObject:(id)anObject forKey:(id<NSCopying>)aKey"},"dictionaryWithObjects:forKeys:":{"abs":"Creates and returns a dictionary containing entries constructed from the contents of an array of keys and an array of values.","dec":"+ (instancetype)dictionaryWithObjects:(NSArray *)objects forKeys:(NSArray *)keys"},"dictionaryWithObjects:forKeys:count:":{"abs":"Creates and returns a dictionary containing count objects from the objects array.","dec":"+ (instancetype)dictionaryWithObjects:(const id [])objects forKeys:(const id<NSCopying> [])keys count:(NSUInteger)count"},"dictionaryWithObjectsAndKeys:":{"abs":"Creates and returns a dictionary containing entries constructed from the specified set of values and keys.","dec":"+ (instancetype)dictionaryWithObjectsAndKeys:(id)firstObject, , ..."},"sharedKeySetForKeys:":{"abs":"Creates a shared key set object for the specified keys.","dec":"+ (id)sharedKeySetForKeys:(NSArray *)keys"}},"[-]":{"allKeys":{"abs":"Returns a new array containing the dictionary’s keys.","dec":"- (NSArray *)allKeys"},"allKeysForObject:":{"abs":"Returns a new array containing the keys corresponding to all occurrences of a given object in the dictionary.","dec":"- (NSArray *)allKeysForObject:(id)anObject"},"allValues":{"abs":"Returns a new array containing the dictionary’s values.","dec":"- (NSArray *)allValues"},"count":{"abs":"Returns the number of entries in the dictionary.","dec":"- (NSUInteger)count"},"description":{"abs":"Returns a string that represents the contents of the dictionary, formatted as a property list.","dec":"- (NSString *)description"},"descriptionInStringsFileFormat":{"abs":"Returns a string that represents the contents of the dictionary, formatted in .strings file format.","dec":"- (NSString *)descriptionInStringsFileFormat"},"descriptionWithLocale:":{"abs":"Returns a string object that represents the contents of the dictionary, formatted as a property list.","dec":"- (NSString *)descriptionWithLocale:(id)locale"},"descriptionWithLocale:indent:":{"abs":"Returns a string object that represents the contents of the dictionary, formatted as a property list.","dec":"- (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level"},"enumerateKeysAndObjectsUsingBlock:":{"abs":"Applies a given block object to the entries of the dictionary.","dec":"- (void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block"},"enumerateKeysAndObjectsWithOptions:usingBlock:":{"abs":"Applies a given block object to the entries of the dictionary.","dec":"- (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block"},"fileCreationDate":{"abs":"Returns the value for the NSFileCreationDate key.","dec":"- (NSDate *)fileCreationDate"},"fileExtensionHidden":{"abs":"Returns the value for the NSFileExtensionHidden key.","dec":"- (BOOL)fileExtensionHidden"},"fileGroupOwnerAccountID":{"abs":"Returns the value for the NSFileGroupOwnerAccountID key.","dec":"- (NSNumber *)fileGroupOwnerAccountID"},"fileGroupOwnerAccountName":{"abs":"Returns the value for the NSFileGroupOwnerAccountName key.","dec":"- (NSString *)fileGroupOwnerAccountName"},"fileHFSCreatorCode":{"abs":"Returns the value for the NSFileHFSCreatorCode key.","dec":"- (OSType)fileHFSCreatorCode"},"fileHFSTypeCode":{"abs":"Returns the value for the NSFileHFSTypeCode key.","dec":"- (OSType)fileHFSTypeCode"},"fileIsAppendOnly":{"abs":"Returns the value for the NSFileAppendOnly key.","dec":"- (BOOL)fileIsAppendOnly"},"fileIsImmutable":{"abs":"Returns the value for the NSFileImmutable key.","dec":"- (BOOL)fileIsImmutable"},"fileModificationDate":{"abs":"Returns the value for the key NSFileModificationDate.","dec":"- (NSDate *)fileModificationDate"},"fileOwnerAccountID":{"abs":"Returns the value for the NSFileOwnerAccountID key.","dec":"- (NSNumber *)fileOwnerAccountID"},"fileOwnerAccountName":{"abs":"Returns the value for the key NSFileOwnerAccountName.","dec":"- (NSString *)fileOwnerAccountName"},"filePosixPermissions":{"abs":"Returns the value for the key NSFilePosixPermissions.","dec":"- (NSUInteger)filePosixPermissions"},"fileSize":{"abs":"Returns the value for the key NSFileSize.","dec":"- (unsigned long long)fileSize"},"fileSystemFileNumber":{"abs":"Returns the value for the key NSFileSystemFileNumber.","dec":"- (NSUInteger)fileSystemFileNumber"},"fileSystemNumber":{"abs":"Returns the value for the key NSFileSystemNumber.","dec":"- (NSInteger)fileSystemNumber"},"fileType":{"abs":"Returns the value for the key NSFileType.","dec":"- (NSString *)fileType"},"getObjects:andKeys:":{"abs":"Returns by reference C arrays of the keys and values in the dictionary.","dec":"- (void)getObjects:(id [])objects andKeys:(id [])keys"},"init":{"abs":"Initializes a newly allocated dictionary.","dec":"- (instancetype)init"},"initWithContentsOfFile:":{"abs":"Initializes a newly allocated dictionary using the keys and values found in a file at a given path.","dec":"- (id)initWithContentsOfFile:(NSString *)path"},"initWithContentsOfURL:":{"abs":"Initializes a newly allocated dictionary using the keys and values found at a given URL.","dec":"- (id)initWithContentsOfURL:(NSURL *)aURL"},"initWithDictionary:":{"abs":"Initializes a newly allocated dictionary by placing in it the keys and values contained in another given dictionary.","dec":"- (instancetype)initWithDictionary:(NSDictionary *)otherDictionary"},"initWithDictionary:copyItems:":{"abs":"Initializes a newly allocated dictionary using the objects contained in another given dictionary.","dec":"- (instancetype)initWithDictionary:(NSDictionary *)otherDictionary copyItems:(BOOL)flag"},"initWithObjects:forKeys:":{"abs":"Initializes a newly allocated dictionary with entries constructed from the contents of the objects and keys arrays.","dec":"- (instancetype)initWithObjects:(NSArray *)objects forKeys:(NSArray *)keys"},"initWithObjects:forKeys:count:":{"abs":"Initializes a newly allocated dictionary with count entries.","dec":"- (instancetype)initWithObjects:(const id [])objects forKeys:(const id<NSCopying> [])keys count:(NSUInteger)count"},"initWithObjectsAndKeys:":{"abs":"Initializes a newly allocated dictionary with entries constructed from the specified set of values and keys.","dec":"- (instancetype)initWithObjectsAndKeys:(id)firstObject, , ..."},"isEqualToDictionary:":{"abs":"Returns a Boolean value that indicates whether the contents of the receiving dictionary are equal to the contents of another given dictionary.","dec":"- (BOOL)isEqualToDictionary:(NSDictionary *)otherDictionary"},"keyEnumerator":{"abs":"Returns an enumerator object that lets you access each key in the dictionary.","dec":"- (NSEnumerator *)keyEnumerator"},"keysOfEntriesPassingTest:":{"abs":"Returns the set of keys whose corresponding value satisfies a constraint described by a block object.","dec":"- (NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate"},"keysOfEntriesWithOptions:passingTest:":{"abs":"Returns the set of keys whose corresponding value satisfies a constraint described by a block object.","dec":"- (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate"},"keysSortedByValueUsingComparator:":{"abs":"Returns an array of the dictionary’s keys, in the order they would be in if the dictionary were sorted by its values using a given comparator block.","dec":"- (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr"},"keysSortedByValueUsingSelector:":{"abs":"Returns an array of the dictionary’s keys, in the order they would be in if the dictionary were sorted by its values.","dec":"- (NSArray *)keysSortedByValueUsingSelector:(SEL)comparator"},"keysSortedByValueWithOptions:usingComparator:":{"abs":"Returns an array of the dictionary’s keys, in the order they would be in if the dictionary were sorted by its values using a given comparator block and a specified set of options.","dec":"- (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr"},"objectEnumerator":{"abs":"Returns an enumerator object that lets you access each value in the dictionary.","dec":"- (NSEnumerator *)objectEnumerator"},"objectForKey:":{"abs":"Returns the value associated with a given key.","dec":"- (id)objectForKey:(id)aKey"},"objectForKeyedSubscript:":{"abs":"Returns the value associated with a given key.","dec":"- (id)objectForKeyedSubscript:(id)key"},"objectsForKeys:notFoundMarker:":{"abs":"Returns the set of objects from the dictionary that corresponds to the specified keys as an NSArray.","dec":"- (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject"},"valueForKey:":{"abs":"Returns the value associated with a given key.","dec":"- (id)valueForKey:(NSString *)key"},"writeToFile:atomically:":{"abs":"Writes a property list representation of the contents of the dictionary to a given path.","dec":"- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag"},"writeToURL:atomically:":{"abs":"Writes a property list representation of the contents of the dictionary to a given URL.","dec":"- (BOOL)writeToURL:(NSURL *)aURL atomically:(BOOL)flag"}}};

ClassRef["NSDirectoryEnumerator"] = {"[:]":"NSEnumerator : NSObject","[-]":{"directoryAttributes":{"abs":"Returns an NSDictionary object that contains the attributes of the directory at which enumeration started.","dec":"- (NSDictionary *)directoryAttributes"},"fileAttributes":{"abs":"Returns an object that contains the attributes of the most recently returned file or subdirectory (as referenced by the pathname).","dec":"- (NSDictionary *)fileAttributes"},"level":{"abs":"Returns the number of levels deep the current object is in the directory hierarchy being enumerated.","dec":"- (NSUInteger)level"},"skipDescendants":{"abs":"Causes the receiver to skip recursion into the most recently obtained subdirectory.","dec":"- (void)skipDescendants"},"skipDescendents":{"abs":"Causes the receiver to skip recursion into the most recently obtained subdirectory.","dec":"- (void)skipDescendents"}}};

ClassRef["NSEnumerator"] = {"[:]":"NSObject","[-]":{"allObjects":{"abs":"Returns an array of objects the receiver has yet to enumerate.","dec":"- (NSArray *)allObjects"},"nextObject":{"abs":"Returns the next object from the collection being enumerated.","dec":"- (id)nextObject"}}};

ClassRef["NSError"] = {"[:]":"NSObject","[+]":{"errorWithDomain:code:userInfo:":{"abs":"Creates and initializes an NSError object for a given domain and code with a given userInfo dictionary.","dec":"+ (id)errorWithDomain:(NSString *)domain code:(NSInteger)code userInfo:(NSDictionary *)dict"}},"[-]":{"code":{"abs":"Returns the receiver’s error code.","dec":"- (NSInteger)code"},"domain":{"abs":"Returns the receiver’s error domain.","dec":"- (NSString *)domain"},"helpAnchor":{"abs":"A string to display in response to an alert panel help anchor button being pressed.","dec":"- (NSString *)helpAnchor"},"initWithDomain:code:userInfo:":{"abs":"Returns an NSError object initialized for a given domain and code with a given userInfo dictionary.","dec":"- (id)initWithDomain:(NSString *)domain code:(NSInteger)code userInfo:(NSDictionary *)dict"},"localizedDescription":{"abs":"Returns a string containing the localized description of the error.","dec":"- (NSString *)localizedDescription"},"localizedFailureReason":{"abs":"Returns a string containing the localized explanation of the reason for the error.","dec":"- (NSString *)localizedFailureReason"},"localizedRecoveryOptions":{"abs":"Returns an array containing the localized titles of buttons appropriate for displaying in an alert panel.","dec":"- (NSArray *)localizedRecoveryOptions"},"localizedRecoverySuggestion":{"abs":"Returns a string containing the localized recovery suggestion for the error.","dec":"- (NSString *)localizedRecoverySuggestion"},"recoveryAttempter":{"abs":"Returns an object that conforms to the NSErrorRecoveryAttempting informal protocol.","dec":"- (id)recoveryAttempter"},"userInfo":{"abs":"Returns the receiver's user info dictionary.","dec":"- (NSDictionary *)userInfo"}},"[=]":{"NSLocalizedDescriptionKey":"","NSErrorFailingURLStringKey":"","NSFilePathErrorKey":"","NSStringEncodingErrorKey":"","NSUnderlyingErrorKey":"","NSURLErrorKey":"","NSLocalizedFailureReasonErrorKey":"","NSLocalizedRecoverySuggestionErrorKey":"","NSLocalizedRecoveryOptionsErrorKey":"","NSRecoveryAttempterErrorKey":"","NSHelpAnchorErrorKey":"","NSURLErrorFailingURLErrorKey":"","NSURLErrorFailingURLStringErrorKey":"","NSURLErrorFailingURLPeerTrustErrorKey":"","NSPOSIXErrorDomain":"","NSOSStatusErrorDomain":"","NSMachErrorDomain":""}};

ClassRef["NSException"] = {"[:]":"NSObject","[+]":{"exceptionWithName:reason:userInfo:":{"abs":"Creates and returns an exception object .","dec":"+ (NSException *)exceptionWithName:(NSString *)name reason:(NSString *)reason userInfo:(NSDictionary *)userInfo"},"raise:format:":{"abs":"A convenience method that creates and raises an exception.","dec":"+ (void)raise:(NSString *)name format:(NSString *)format, ..."},"raise:format:arguments:":{"abs":"Creates and raises an exception with the specified name, reason, and arguments.","dec":"+ (void)raise:(NSString *)name format:(NSString *)format arguments:(va_list)argList"}},"[-]":{"callStackReturnAddresses":{"abs":"Returns the call return addresses related to a raised exception.","dec":"- (NSArray *)callStackReturnAddresses"},"callStackSymbols":{"abs":"Returns an array containing the current call symbols.","dec":"- (NSArray *)callStackSymbols"},"initWithName:reason:userInfo:":{"abs":"Initializes and returns a newly allocated exception object.","dec":"- (id)initWithName:(NSString *)name reason:(NSString *)reason userInfo:(NSDictionary *)userInfo"},"name":{"abs":"Returns an NSString object used to uniquely identify the receiver.","dec":"- (NSString *)name"},"raise":{"abs":"Raises the receiver, causing program flow to jump to the local exception handler.","dec":"- (void)raise"},"reason":{"abs":"Returns an NSString object containing a “human-readable” reason for the receiver.","dec":"- (NSString *)reason"},"userInfo":{"abs":"Returns an NSDictionary object containing application-specific data pertaining to the receiver.","dec":"- (NSDictionary *)userInfo"}}};

ClassRef["NSExpression"] = {"[:]":"NSObject","[+]":{"expressionForAggregate:":{"abs":"Returns a new aggregate expression for a given collection.","dec":"+ (NSExpression *)expressionForAggregate:(NSArray *)collection"},"expressionForAnyKey":{"abs":"Returns a new expression that represents any key for a Spotlight query.","dec":"+ (NSExpression *)expressionForAnyKey"},"expressionForBlock:arguments:":{"abs":"Creates an NSExpression object that will use the Block for evaluating objects.","dec":"+ (NSExpression *)expressionForBlock:(id (^)(id evaluatedObject, NSArray *expressions, NSMutableDictionary *context))block arguments:(NSArray *)arguments"},"expressionForConstantValue:":{"abs":"Returns a new expression that represents a given constant value.","dec":"+ (NSExpression *)expressionForConstantValue:(id)obj"},"expressionForEvaluatedObject":{"abs":"Returns a new expression that represents the object being evaluated.","dec":"+ (NSExpression *)expressionForEvaluatedObject"},"expressionForFunction:arguments:":{"abs":"Returns a new expression that will invoke one of the predefined functions.","dec":"+ (NSExpression *)expressionForFunction:(NSString *)name arguments:(NSArray *)parameters"},"expressionForFunction:selectorName:arguments:":{"abs":"Returns an expression which will return the result of invoking on a given target a selector with a given name using given arguments.","dec":"+ (NSExpression *)expressionForFunction:(NSExpression *)target selectorName:(NSString *)name arguments:(NSArray *)parameters"},"expressionForIntersectSet:with:":{"abs":"Returns a new NSExpression object that represent the intersection of a given set and collection.","dec":"+ (NSExpression *)expressionForIntersectSet:(NSExpression *)left with:(NSExpression *)right"},"expressionForKeyPath:":{"abs":"Returns a new expression that invokes valueForKeyPath: with a given key path.","dec":"+ (NSExpression *)expressionForKeyPath:(NSString *)keyPath"},"expressionForMinusSet:with:":{"abs":"Returns a new NSExpression object that represent the subtraction of a given collection from a given set.","dec":"+ (NSExpression *)expressionForMinusSet:(NSExpression *)left with:(NSExpression *)right"},"expressionForSubquery:usingIteratorVariable:predicate:":{"abs":"Returns an expression that filters a collection by storing elements in the collection in a given variable and keeping the elements for which qualifier returns true.","dec":"+ (NSExpression *)expressionForSubquery:(NSExpression *)expression usingIteratorVariable:(NSString *)variable predicate:(id)predicate"},"expressionForUnionSet:with:":{"abs":"Returns a new NSExpression object that represent the union of a given set and collection.","dec":"+ (NSExpression *)expressionForUnionSet:(NSExpression *)left with:(NSExpression *)right"},"expressionForVariable:":{"abs":"Returns a new expression that extracts a value from the variable bindings dictionary for a given key.","dec":"+ (NSExpression *)expressionForVariable:(NSString *)string"},"expressionWithFormat:":{"abs":"Initializes the receiver with the specified expression arguments.","dec":"+ (NSExpression *)expressionWithFormat:(NSString *)expressionFormat,, ..."},"expressionWithFormat:argumentArray:":{"abs":"Initializes the receiver with the specified expression format and array of arguments.","dec":"+ (NSExpression *)expressionWithFormat:(NSString *)expressionFormat argumentArray:(NSArray *)arguments"},"expressionWithFormat:arguments:":{"abs":"Initializes the receiver with the specified expression format and arguments list.","dec":"+ (NSExpression *)expressionWithFormat:(NSString *)expressionFormat arguments:(va_list)argList"}},"[-]":{"allowEvaluation":{"abs":"Force an expression that was securely decoded to allow evaluation.","dec":"- (void)allowEvaluation"},"arguments":{"abs":"Returns the arguments for the receiver.","dec":"- (NSArray *)arguments"},"collection":{"abs":"Returns the collection of expressions in an aggregate expression, or the collection element of a subquery expression.","dec":"- (id)collection"},"constantValue":{"abs":"Returns the constant value of the receiver.","dec":"- (id)constantValue"},"expressionBlock":{"abs":"Returns the expression’s expression Block.","dec":"- (id (^)(id, NSArray *, NSMutableDictionary *))expressionBlock"},"expressionType":{"abs":"Returns the expression type for the receiver.","dec":"- (NSExpressionType)expressionType"},"expressionValueWithObject:context:":{"abs":"Evaluates an expression using a given object and context.","dec":"- (id)expressionValueWithObject:(id)object context:(NSMutableDictionary *)context"},"function":{"abs":"Returns the function for the receiver.","dec":"- (NSString *)function"},"initWithExpressionType:":{"abs":"Initializes the receiver with the specified expression type.","dec":"- (id)initWithExpressionType:(NSExpressionType)type"},"keyPath":{"abs":"Returns the key path for the receiver.","dec":"- (NSString *)keyPath"},"leftExpression":{"abs":"Returns the left expression of an aggregate expression.","dec":"- (NSExpression *)leftExpression"},"operand":{"abs":"Returns the operand for the receiver.","dec":"- (NSExpression *)operand"},"predicate":{"abs":"Return the predicate of a subquery expression.","dec":"- (NSPredicate *)predicate"},"rightExpression":{"abs":"Returns the right expression of an aggregate expression.","dec":"- (NSExpression *)rightExpression"},"variable":{"abs":"Returns the variable for the receiver.","dec":"- (NSString *)variable"}},"[=]":{"NSConstantValueExpressionType":"","NSEvaluatedObjectExpressionType":"","NSVariableExpressionType":"","NSKeyPathExpressionType":"","NSFunctionExpressionType":"","NSUnionSetExpressionType":"","NSIntersectSetExpressionType":"","NSMinusSetExpressionType":"","NSSubqueryExpressionType":"","NSAggregateExpressionType":"","NSAnyKeyExpressionType":"","NSBlockExpressionType":""}};

ClassRef["NSFileCoordinator"] = {"[:]":"NSObject","[+]":{"addFilePresenter:":{"abs":"Registers the specified file presenter object so that it can receive notifications.","dec":"+ (void)addFilePresenter:(id < NSFilePresenter >)filePresenter"},"filePresenters":{"abs":"Returns an array containing the currently registered file presenter objects.","dec":"+ (NSArray *)filePresenters"},"removeFilePresenter:":{"abs":"Unregisters the specified file presenter object.","dec":"+ (void)removeFilePresenter:(id < NSFilePresenter >)filePresenter"}},"[-]":{"cancel":{"abs":"Cancels any active file coordination calls.","dec":"- (void)cancel"},"coordinateReadingItemAtURL:options:error:byAccessor:":{"abs":"Initiates a read operation on a single file or directory using the specified options.","dec":"- (void)coordinateReadingItemAtURL:(NSURL *)url options:(NSFileCoordinatorReadingOptions)options error:(NSError **)outError byAccessor:(void (^)(NSURL *newURL))reader"},"coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:":{"abs":"Initiates a read operation that contains a follow-up write operation.","dec":"- (void)coordinateReadingItemAtURL:(NSURL *)readingURL options:(NSFileCoordinatorReadingOptions)readingOptions writingItemAtURL:(NSURL *)writingURL options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError **)outError byAccessor:(void (^)(NSURL *newReadingURL, NSURL *newWritingURL))readerWriter"},"coordinateWritingItemAtURL:options:error:byAccessor:":{"abs":"Initiates a write operation on a single file or directory using the specified options.","dec":"- (void)coordinateWritingItemAtURL:(NSURL *)url options:(NSFileCoordinatorWritingOptions)options error:(NSError **)outError byAccessor:(void (^)(NSURL *newURL))writer"},"coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:":{"abs":"Initiates a write operation that involves a secondary write operation.","dec":"- (void)coordinateWritingItemAtURL:(NSURL *)url1 options:(NSFileCoordinatorWritingOptions)options1 writingItemAtURL:(NSURL *)url2 options:(NSFileCoordinatorWritingOptions)options2 error:(NSError **)outError byAccessor:(void (^)(NSURL *newURL1, NSURL *newURL2))writer"},"initWithFilePresenter:":{"abs":"Initializes and returns a file coordinator object using the specified file presenter.","dec":"- (id)initWithFilePresenter:(id < NSFilePresenter >)filePresenterOrNil"},"itemAtURL:didMoveToURL:":{"abs":"Notifies relevant file presenters that the location of a file or directory changed.","dec":"- (void)itemAtURL:(NSURL *)oldURL didMoveToURL:(NSURL *)newURL"},"itemAtURL:willMoveToURL:":{"abs":"Announces that your app is moving a file to a new URL.","dec":"- (void)itemAtURL:(NSURL *)oldURL willMoveToURL:(NSURL *)newURL"},"prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:":{"abs":"Prepare to read or write from multiple files in a single batch operation.","dec":"- (void)prepareForReadingItemsAtURLs:(NSArray *)readingURLs options:(NSFileCoordinatorReadingOptions)readingOptions writingItemsAtURLs:(NSArray *)writingURLs options:(NSFileCoordinatorWritingOptions)writingOptions error:(NSError **)outError byAccessor:(void)batchAccessor"}},"[=]":{"NSFileCoordinatorReadingWithoutChanges":"","NSFileCoordinatorReadingResolvesSymbolicLink":"","NSFileCoordinatorWritingForDeleting":"","NSFileCoordinatorWritingForReplacing":"","NSFileCoordinatorWritingForMoving":"","NSFileCoordinatorWritingForMerging":""}};

ClassRef["NSFileHandle"] = {"[:]":"NSObject","[.]":{"readabilityHandler":{"abs":"The block to use for reading the contents of the file handle asynchronously.","dec":"@property (copy) void (^readabilityHandler)(NSFileHandle *);"},"writeabilityHandler":{"abs":"The block to use for writing the contents of the file handle asynchronously.","dec":"@property (copy) void (^writeabilityHandler)(NSFileHandle *);"}},"[+]":{"fileHandleForReadingAtPath:":{"abs":"Returns a file handle initialized for reading the file, device, or named socket at the specified path.","dec":"+ (id)fileHandleForReadingAtPath:(NSString *)path"},"fileHandleForReadingFromURL:error:":{"abs":"Returns a file handle initialized for reading the file, device, or named socket at the specified URL.","dec":"+ (id)fileHandleForReadingFromURL:(NSURL *)url error:(NSError **)error"},"fileHandleForUpdatingAtPath:":{"abs":"Returns a file handle initialized for reading and writing to the file, device, or named socket at the specified path.","dec":"+ (id)fileHandleForUpdatingAtPath:(NSString *)path"},"fileHandleForUpdatingURL:error:":{"abs":"Returns a file handle initialized for reading and writing to the file, device, or named socket at the specified URL.","dec":"+ (id)fileHandleForUpdatingURL:(NSURL *)url error:(NSError **)error"},"fileHandleForWritingAtPath:":{"abs":"Returns a file handle initialized for writing to the file, device, or named socket at the specified path.","dec":"+ (id)fileHandleForWritingAtPath:(NSString *)path"},"fileHandleForWritingToURL:error:":{"abs":"Returns a file handle initialized for writing to the file, device, or named socket at the specified URL.","dec":"+ (id)fileHandleForWritingToURL:(NSURL *)url error:(NSError **)error"},"fileHandleWithNullDevice":{"abs":"Returns a file handle associated with a null device.","dec":"+ (id)fileHandleWithNullDevice"},"fileHandleWithStandardError":{"abs":"Returns the file handle associated with the standard error file.","dec":"+ (id)fileHandleWithStandardError"},"fileHandleWithStandardInput":{"abs":"Returns the file handle associated with the standard input file.","dec":"+ (id)fileHandleWithStandardInput"},"fileHandleWithStandardOutput":{"abs":"Returns the file handle associated with the standard output file.","dec":"+ (id)fileHandleWithStandardOutput"}},"[-]":{"acceptConnectionInBackgroundAndNotify":{"abs":"Accepts a socket connection (for stream-type sockets only) in the background and creates a file handle for the “near” (client) end of the communications channel.","dec":"- (void)acceptConnectionInBackgroundAndNotify"},"acceptConnectionInBackgroundAndNotifyForModes:":{"abs":"Accepts a socket connection (for stream-type sockets only) in the background and creates a file handle for the “near” (client) end of the communications channel.","dec":"- (void)acceptConnectionInBackgroundAndNotifyForModes:(NSArray *)modes"},"availableData":{"abs":"Returns the data currently available in the receiver.","dec":"- (NSData *)availableData"},"closeFile":{"abs":"Disallows further access to the represented file or communications channel and signals end of file on communications channels that permit writing.","dec":"- (void)closeFile"},"fileDescriptor":{"abs":"Returns the file descriptor associated with the receiver.","dec":"- (int)fileDescriptor"},"initWithFileDescriptor:":{"abs":"Initializes and returns a file handle object associated with the specified file descriptor.","dec":"- (id)initWithFileDescriptor:(int)fileDescriptor"},"initWithFileDescriptor:closeOnDealloc:":{"abs":"Initializes and returns a file handle object associated with the specified file descriptor and deallocation policy.","dec":"- (id)initWithFileDescriptor:(int)fileDescriptor closeOnDealloc:(BOOL)flag"},"offsetInFile":{"abs":"Returns the position of the file pointer within the file represented by the receiver.","dec":"- (unsigned long long)offsetInFile"},"readDataOfLength:":{"abs":"Synchronously reads data up to the specified number of bytes.","dec":"- (NSData *)readDataOfLength:(NSUInteger)length"},"readDataToEndOfFile":{"abs":"Synchronously reads the available data up to the end of file or maximum number of bytes.","dec":"- (NSData *)readDataToEndOfFile"},"readInBackgroundAndNotify":{"abs":"Reads from the file or communications channel in the background and posts a notification when finished.","dec":"- (void)readInBackgroundAndNotify"},"readInBackgroundAndNotifyForModes:":{"abs":"Reads from the file or communications channel in the background and posts a notification when finished.","dec":"- (void)readInBackgroundAndNotifyForModes:(NSArray *)modes"},"readToEndOfFileInBackgroundAndNotify":{"abs":"Reads to the end of file from the file or communications channel in the background and posts a notification when finished.","dec":"- (void)readToEndOfFileInBackgroundAndNotify"},"readToEndOfFileInBackgroundAndNotifyForModes:":{"abs":"Reads to the end of file from the file or communications channel in the background and posts a notification when finished.","dec":"- (void)readToEndOfFileInBackgroundAndNotifyForModes:(NSArray *)modes"},"seekToEndOfFile":{"abs":"Puts the file pointer at the end of the file referenced by the receiver and returns the new file offset.","dec":"- (unsigned long long)seekToEndOfFile"},"seekToFileOffset:":{"abs":"Moves the file pointer to the specified offset within the file represented by the receiver.","dec":"- (void)seekToFileOffset:(unsigned long long)offset"},"synchronizeFile":{"abs":"Causes all in-memory data and attributes of the file represented by the receiver to be written to permanent storage.","dec":"- (void)synchronizeFile"},"truncateFileAtOffset:":{"abs":"Truncates or extends the file represented by the receiver to a specified offset within the file and puts the file pointer at that position.","dec":"- (void)truncateFileAtOffset:(unsigned long long)offset"},"waitForDataInBackgroundAndNotify":{"abs":"Asynchronously checks to see if data is available.","dec":"- (void)waitForDataInBackgroundAndNotify"},"waitForDataInBackgroundAndNotifyForModes:":{"abs":"Asynchronously checks to see if data is available.","dec":"- (void)waitForDataInBackgroundAndNotifyForModes:(NSArray *)modes"},"writeData:":{"abs":"Synchronously writes the specified data to the receiver.","dec":"- (void)writeData:(NSData *)data"}},"[=]":{"NSFileHandleNotificationFileHandleItem":"","NSFileHandleNotificationDataItem":"","NSFileHandleOperationException":"","NSFileHandleNotificationMonitorModes":""}};

ClassRef["NSFileManager"] = {"[:]":"NSObject","[+]":{"defaultManager":{"abs":"Returns the shared file manager object for the process.","dec":"+ (NSFileManager *)defaultManager"}},"[-]":{"attributesOfFileSystemForPath:error:":{"abs":"Returns a dictionary that describes the attributes of the mounted file system on which a given path resides.","dec":"- (NSDictionary *)attributesOfFileSystemForPath:(NSString *)path error:(NSError **)error"},"attributesOfItemAtPath:error:":{"abs":"Returns the attributes of the item at a given path.","dec":"- (NSDictionary *)attributesOfItemAtPath:(NSString *)path error:(NSError **)error"},"changeCurrentDirectoryPath:":{"abs":"Changes the path of the current working directory to the specified path.","dec":"- (BOOL)changeCurrentDirectoryPath:(NSString *)path"},"componentsToDisplayForPath:":{"abs":"Returns an array of strings representing the user-visible components of a given path.","dec":"- (NSArray *)componentsToDisplayForPath:(NSString *)path"},"containerURLForSecurityApplicationGroupIdentifier:":{"abs":"Returns the container directory associated with the specified security application group ID.","dec":"- (NSURL *)containerURLForSecurityApplicationGroupIdentifier:(NSString *)groupIdentifier"},"contentsAtPath:":{"abs":"Returns the contents of the file at the specified path.","dec":"- (NSData *)contentsAtPath:(NSString *)path"},"contentsEqualAtPath:andPath:":{"abs":"Returns a Boolean value that indicates whether the files or directories in specified paths have the same contents.","dec":"- (BOOL)contentsEqualAtPath:(NSString *)path1 andPath:(NSString *)path2"},"contentsOfDirectoryAtPath:error:":{"abs":"Performs a shallow search of the specified directory and returns the paths of any contained items.","dec":"- (NSArray *)contentsOfDirectoryAtPath:(NSString *)path error:(NSError **)error"},"contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:":{"abs":"Performs a shallow search of the specified directory and returns URLs for the contained items.","dec":"- (NSArray *)contentsOfDirectoryAtURL:(NSURL *)url includingPropertiesForKeys:(NSArray *)keys options:(NSDirectoryEnumerationOptions)mask error:(NSError **)error"},"copyItemAtPath:toPath:error:":{"abs":"Copies the item at the specified path to a new location synchronously.","dec":"- (BOOL)copyItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error"},"copyItemAtURL:toURL:error:":{"abs":"Copies the file at the specified URL to a new location synchronously.","dec":"- (BOOL)copyItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL error:(NSError **)error"},"createDirectoryAtPath:withIntermediateDirectories:attributes:error:":{"abs":"Creates a directory with given attributes at the specified path.","dec":"- (BOOL)createDirectoryAtPath:(NSString *)path withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary *)attributes error:(NSError **)error"},"createDirectoryAtURL:withIntermediateDirectories:attributes:error:":{"abs":"Creates a directory with the given attributes at the specified URL.","dec":"- (BOOL)createDirectoryAtURL:(NSURL *)url withIntermediateDirectories:(BOOL)createIntermediates attributes:(NSDictionary *)attributes error:(NSError **)error"},"createFileAtPath:contents:attributes:":{"abs":"Creates a file with the specified content and attributes at the given location.","dec":"- (BOOL)createFileAtPath:(NSString *)path contents:(NSData *)contents attributes:(NSDictionary *)attributes"},"createSymbolicLinkAtPath:withDestinationPath:error:":{"abs":"Creates a symbolic link that points to the specified destination.","dec":"- (BOOL)createSymbolicLinkAtPath:(NSString *)path withDestinationPath:(NSString *)destPath error:(NSError **)error"},"createSymbolicLinkAtURL:withDestinationURL:error:":{"abs":"Creates a symbolic link at the specified URL that points to an item at the given URL.","dec":"- (BOOL)createSymbolicLinkAtURL:(NSURL *)url withDestinationURL:(NSURL *)destURL error:(NSError **)error"},"currentDirectoryPath":{"abs":"Returns the path of the program’s current directory.","dec":"- (NSString *)currentDirectoryPath"},"delegate":{"abs":"Returns the delegate for the receiver.","dec":"- (id)delegate"},"destinationOfSymbolicLinkAtPath:error:":{"abs":"Returns the path of the item pointed to by a symbolic link.","dec":"- (NSString *)destinationOfSymbolicLinkAtPath:(NSString *)path error:(NSError **)error"},"displayNameAtPath:":{"abs":"Returns the display name of the file or directory at a specified path.","dec":"- (NSString *)displayNameAtPath:(NSString *)path"},"enumeratorAtPath:":{"abs":"Returns a directory enumerator object that can be used to perform a deep enumeration of the directory at the specified path.","dec":"- (NSDirectoryEnumerator *)enumeratorAtPath:(NSString *)path"},"enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:":{"abs":"Returns a directory enumerator object that can be used to perform a deep enumeration of the directory at the specified URL.","dec":"- (NSDirectoryEnumerator *)enumeratorAtURL:(NSURL *)url includingPropertiesForKeys:(NSArray *)keys options:(NSDirectoryEnumerationOptions)mask errorHandler:(BOOL (^)(NSURL *url, NSError *error))handler"},"evictUbiquitousItemAtURL:error:":{"abs":"Removes the local copy of the specified cloud-based item.","dec":"- (BOOL)evictUbiquitousItemAtURL:(NSURL *)url error:(NSError **)errorOut"},"fileExistsAtPath:":{"abs":"Returns a Boolean value that indicates whether a file or directory exists at a specified path.","dec":"- (BOOL)fileExistsAtPath:(NSString *)path"},"fileExistsAtPath:isDirectory:":{"abs":"Returns a Boolean value that indicates whether a file or directory exists at a specified path.","dec":"- (BOOL)fileExistsAtPath:(NSString *)path isDirectory:(BOOL *)isDirectory"},"fileSystemRepresentationWithPath:":{"abs":"Returns a C-string representation of a given path that properly encodes Unicode strings for use by the file system.","dec":"- (const char *)fileSystemRepresentationWithPath:(NSString *)path"},"init":{"abs":"Returns an initialized NSFileManager instance.","dec":"- init"},"isDeletableFileAtPath:":{"abs":"Returns a Boolean value that indicates whether the invoking object appears able to delete a specified file.","dec":"- (BOOL)isDeletableFileAtPath:(NSString *)path"},"isExecutableFileAtPath:":{"abs":"Returns a Boolean value that indicates whether the operating system appears able to execute a specified file.","dec":"- (BOOL)isExecutableFileAtPath:(NSString *)path"},"isReadableFileAtPath:":{"abs":"Returns a Boolean value that indicates whether the invoking object appears able to read a specified file.","dec":"- (BOOL)isReadableFileAtPath:(NSString *)path"},"isUbiquitousItemAtURL:":{"abs":"Returns a Boolean indicating whether the item is targeted for storage in iCloud.","dec":"- (BOOL)isUbiquitousItemAtURL:(NSURL *)url"},"isWritableFileAtPath:":{"abs":"Returns a Boolean value that indicates whether the invoking object appears able to write to a specified file.","dec":"- (BOOL)isWritableFileAtPath:(NSString *)path"},"linkItemAtPath:toPath:error:":{"abs":"Creates a hard link between the items at the specified paths.","dec":"- (BOOL)linkItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error"},"linkItemAtURL:toURL:error:":{"abs":"Creates a hard link between the items at the specified URLs.","dec":"- (BOOL)linkItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL error:(NSError **)error"},"mountedVolumeURLsIncludingResourceValuesForKeys:options:":{"abs":"Returns an array of URLs that identify the mounted volumes available on the computer.","dec":"- (NSArray *)mountedVolumeURLsIncludingResourceValuesForKeys:(NSArray *)propertyKeys options:(NSVolumeEnumerationOptions)options"},"moveItemAtPath:toPath:error:":{"abs":"Moves the file or directory at the specified path to a new location synchronously.","dec":"- (BOOL)moveItemAtPath:(NSString *)srcPath toPath:(NSString *)dstPath error:(NSError **)error"},"moveItemAtURL:toURL:error:":{"abs":"Moves the file or directory at the specified URL to a new location synchronously.","dec":"- (BOOL)moveItemAtURL:(NSURL *)srcURL toURL:(NSURL *)dstURL error:(NSError **)error"},"removeItemAtPath:error:":{"abs":"Removes the file or directory at the specified path.","dec":"- (BOOL)removeItemAtPath:(NSString *)path error:(NSError **)error"},"removeItemAtURL:error:":{"abs":"Removes the file or directory at the specified URL.","dec":"- (BOOL)removeItemAtURL:(NSURL *)URL error:(NSError **)error"},"replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:":{"abs":"Replaces the contents of the item at the specified URL in a manner that insures no data loss occurs.","dec":"- (BOOL)replaceItemAtURL:(NSURL *)originalItemURL withItemAtURL:(NSURL *)newItemURL backupItemName:(NSString *)backupItemName options:(NSFileManagerItemReplacementOptions)options resultingItemURL:(NSURL **)resultingURL error:(NSError **)error"},"setAttributes:ofItemAtPath:error:":{"abs":"Sets the attributes of the specified file or directory.","dec":"- (BOOL)setAttributes:(NSDictionary *)attributes ofItemAtPath:(NSString *)path error:(NSError **)error"},"setDelegate:":{"abs":"Sets the delegate for the receiver.","dec":"- (void)setDelegate:(id)delegate"},"setUbiquitous:itemAtURL:destinationURL:error:":{"abs":"Sets whether the item at the specified URL should be stored in the cloud.","dec":"- (BOOL)setUbiquitous:(BOOL)flag itemAtURL:(NSURL *)url destinationURL:(NSURL *)destinationURL error:(NSError **)errorOut"},"startDownloadingUbiquitousItemAtURL:error:":{"abs":"Starts downloading (if necessary) the specified item to the local system.","dec":"- (BOOL)startDownloadingUbiquitousItemAtURL:(NSURL *)url error:(NSError **)errorOut"},"stringWithFileSystemRepresentation:length:":{"abs":"Returns an NSString object whose contents are derived from the specified C-string path.","dec":"- (NSString *)stringWithFileSystemRepresentation:(const char *)string length:(NSUInteger)len"},"subpathsAtPath:":{"abs":"Returns an array of strings identifying the paths for all items in the specified directory.","dec":"- (NSArray *)subpathsAtPath:(NSString *)path"},"subpathsOfDirectoryAtPath:error:":{"abs":"Performs a deep enumeration of the specified directory and returns the paths of all of the contained subdirectories.","dec":"- (NSArray *)subpathsOfDirectoryAtPath:(NSString *)path error:(NSError **)error"},"ubiquityIdentityToken":{"abs":"Returns an opaque token that represents the current iCloud (“ubiquity”) identity.","dec":"- (id < NSObject, NSCopying, NSCoding >)ubiquityIdentityToken"},"URLForDirectory:inDomain:appropriateForURL:create:error:":{"abs":"Locates and optionally creates the specified common directory in a domain.","dec":"- (NSURL *)URLForDirectory:(NSSearchPathDirectory)directory inDomain:(NSSearchPathDomainMask)domain appropriateForURL:(NSURL *)url create:(BOOL)shouldCreate error:(NSError **)error"},"URLForPublishingUbiquitousItemAtURL:expirationDate:error:":{"abs":"Returns a URL that can be emailed to users to allow them to download a copy of a cloud-based item.","dec":"- (NSURL *)URLForPublishingUbiquitousItemAtURL:(NSURL *)url expirationDate:(NSDate **)outDate error:(NSError **)error"},"URLForUbiquityContainerIdentifier:":{"abs":"Returns the URL for the ubiquity (iCloud) container associated with the specified container identifier, and establishes access to that container.","dec":"- (NSURL *)URLForUbiquityContainerIdentifier:(NSString *)containerID"},"URLsForDirectory:inDomains:":{"abs":"Returns an array of URLs for the specified common directory in the requested domains.","dec":"- (NSArray *)URLsForDirectory:(NSSearchPathDirectory)directory inDomains:(NSSearchPathDomainMask)domainMask"}},"[=]":{"NSVolumeEnumerationSkipHiddenVolumes":"","NSVolumeEnumerationProduceFileReferenceURLs":"","NSDirectoryEnumerationSkipsSubdirectoryDescendants":"","NSDirectoryEnumerationSkipsPackageDescendants":"","NSDirectoryEnumerationSkipsHiddenFiles":"","NSFileManagerItemReplacementUsingNewMetadataOnly":"","NSFileManagerItemReplacementWithoutDeletingBackupItem":"","NSFileAppendOnly":"","NSFileBusy":"","NSFileCreationDate":"","NSFileOwnerAccountName":"","NSFileGroupOwnerAccountName":"","NSFileDeviceIdentifier":"","NSFileExtensionHidden":"","NSFileGroupOwnerAccountID":"","NSFileHFSCreatorCode":"","NSFileHFSTypeCode":"","NSFileImmutable":"","NSFileModificationDate":"","NSFileOwnerAccountID":"","NSFilePosixPermissions":"","NSFileReferenceCount":"","NSFileSize":"","NSFileSystemFileNumber":"","NSFileType":"","NSFileProtectionKey":"","NSFileTypeDirectory":"","NSFileTypeRegular":"","NSFileTypeSymbolicLink":"","NSFileTypeSocket":"","NSFileTypeCharacterSpecial":"","NSFileTypeBlockSpecial":"","NSFileTypeUnknown":"","NSFileSystemSize":"","NSFileSystemFreeSize":"","NSFileSystemNodes":"","NSFileSystemFreeNodes":"","NSFileSystemNumber":"","NSFileProtectionNone":"","NSFileProtectionComplete":"","NSFileProtectionCompleteUnlessOpen":"","NSFileProtectionCompleteUntilFirstUserAuthentication":"","NSFoundationVersionWithFileManagerResourceForkSupport":""}};

ClassRef["NSFileVersion"] = {"[:]":"NSObject","[.]":{"conflict":{"abs":"A Boolean value indicating whether the contents of the version are in conflict with the contents of another version. (read-only)","dec":"@property (readonly, getter=isConflict) BOOL conflict"},"localizedName":{"abs":"The string containing the user-presentable name of the file version. (read-only)","dec":"@property(readonly) NSString *localizedName"},"localizedNameOfSavingComputer":{"abs":"The user-presentable name of the computer on which the revision was saved. (read-only)","dec":"@property (readonly) NSString *localizedNameOfSavingComputer"},"modificationDate":{"abs":"The modification date of the version. (read-only)","dec":"@property(readonly) NSDate *modificationDate"},"persistentIdentifier":{"abs":"The identifier for this version of the file. (read-only)","dec":"@property(readonly) id<NSCoding> persistentIdentifier"},"resolved":{"abs":"A Boolean value that indicates the version object is not in conflict (YES) or is in conflict (NO).","dec":"@property (getter=isResolved) BOOL resolved"},"URL":{"abs":"The URL identifying the location of the file associated with the file version object. (read-only)","dec":"@property(readonly) NSURL *URL"}},"[+]":{"currentVersionOfItemAtURL:":{"abs":"Returns the most recent version object for the file at the specified URL.","dec":"+ (NSFileVersion *)currentVersionOfItemAtURL:(NSURL *)url"},"otherVersionsOfItemAtURL:":{"abs":"Returns all versions of the specified file except the current version.","dec":"+ (NSArray *)otherVersionsOfItemAtURL:(NSURL *)url"},"removeOtherVersionsOfItemAtURL:error:":{"abs":"Removes all versions of a file, except the current one, from the version store.","dec":"+ (BOOL)removeOtherVersionsOfItemAtURL:(NSURL *)inFileURL error:(NSError **)outError"},"unresolvedConflictVersionsOfItemAtURL:":{"abs":"Returns an array of version objects that are currently in conflict for the specified URL.","dec":"+ (NSArray *)unresolvedConflictVersionsOfItemAtURL:(NSURL *)url"},"versionOfItemAtURL:forPersistentIdentifier:":{"abs":"Returns the version of the file that has the specified persistent ID.","dec":"+ (NSFileVersion *)versionOfItemAtURL:(NSURL *)url forPersistentIdentifier:(id)persistentIdentifier"}},"[-]":{"removeAndReturnError:":{"abs":"Remove this version object and its associated file from the version store.","dec":"- (BOOL)removeAndReturnError:(NSError **)outError"},"replaceItemAtURL:options:error:":{"abs":"Replace the contents of the specified file with the contents of the current version’s file.","dec":"- (NSURL *)replaceItemAtURL:(NSURL *)url options:(NSFileVersionReplacingOptions)options error:(NSError **)error"}},"[=]":{"NSFileVersionAddingByMoving":"","NSFileVersionReplacingByMoving":""}};

ClassRef["NSFileWrapper"] = {"[:]":"NSObject","[-]":{"addFileWrapper:":{"abs":"Adds a child file wrapper to the receiver, which must be a directory file wrapper.","dec":"- (NSString *)addFileWrapper:(NSFileWrapper *)child"},"addRegularFileWithContents:preferredFilename:":{"abs":"Creates a regular-file file wrapper with the given contents and adds it to the receiver, which must be a directory file wrapper.","dec":"- (NSString *)addRegularFileWithContents:(NSData *)data preferredFilename:(NSString *)filename"},"fileAttributes":{"abs":"Returns a file wrapper’s file attributes.","dec":"- (NSDictionary *)fileAttributes"},"filename":{"abs":"Provides the filename of a file wrapper.","dec":"- (NSString *)filename"},"fileWrappers":{"abs":"Returns the file wrappers contained by a directory file wrapper.","dec":"- (NSDictionary *)fileWrappers"},"initDirectoryWithFileWrappers:":{"abs":"Initializes the receiver as a directory file wrapper, with a given file-wrapper list.","dec":"- (id)initDirectoryWithFileWrappers:(NSDictionary *)childrenByPreferredName"},"initRegularFileWithContents:":{"abs":"Initializes the receiver as a regular-file file wrapper.","dec":"- (id)initRegularFileWithContents:(NSData *)contents"},"initSymbolicLinkWithDestinationURL:":{"abs":"Initializes the receiver as a symbolic-link file wrapper that links to a specified file.","dec":"- (id)initSymbolicLinkWithDestinationURL:(NSURL *)url"},"initWithSerializedRepresentation:":{"abs":"Initializes the receiver as a regular-file file wrapper from given serialized data.","dec":"- (id)initWithSerializedRepresentation:(NSData *)serializedRepresentation"},"initWithURL:options:error:":{"abs":"Initializes a file wrapper instance whose kind is determined by the type of file-system node located by the URL.","dec":"- (id)initWithURL:(NSURL *)url options:(NSFileWrapperReadingOptions)options error:(NSError **)outError"},"isDirectory":{"abs":"Indicates whether the receiver is a directory file wrapper.","dec":"- (BOOL)isDirectory"},"isRegularFile":{"abs":"Indicates whether the receiver is a regular-file file wrapper.","dec":"- (BOOL)isRegularFile"},"isSymbolicLink":{"abs":"Indicates whether the receiver is a symbolic-link file wrapper.","dec":"- (BOOL)isSymbolicLink"},"keyForFileWrapper:":{"abs":"Returns the dictionary key used by a directory to identify a given file wrapper.","dec":"- (NSString *)keyForFileWrapper:(NSFileWrapper *)child"},"matchesContentsOfURL:":{"abs":"Indicates whether the contents of a file wrapper matches a directory, regular file, or symbolic link on disk.","dec":"- (BOOL)matchesContentsOfURL:(NSURL *)url"},"preferredFilename":{"abs":"Provides the preferred filename for a file wrapper.","dec":"- (NSString *)preferredFilename"},"readFromURL:options:error:":{"abs":"Recursively rereads the entire contents of a file wrapper from the specified location on disk.","dec":"- (BOOL)readFromURL:(NSURL *)url options:(NSFileWrapperReadingOptions)options error:(NSError **)outError"},"regularFileContents":{"abs":"Returns the contents of the file-system node associated with a regular-file file wrapper.","dec":"- (NSData *)regularFileContents"},"removeFileWrapper:":{"abs":"Removes a child file wrapper from the receiver, which must be a directory file wrapper.","dec":"- (void)removeFileWrapper:(NSFileWrapper *)child"},"serializedRepresentation":{"abs":"Returns the contents of the file wrapper as an opaque collection of data.","dec":"- (NSData *)serializedRepresentation"},"setFileAttributes:":{"abs":"Specifies a file wrapper’s file attributes.","dec":"- (void)setFileAttributes:(NSDictionary *)fileAttributes"},"setFilename:":{"abs":"Specifies the filename of a file wrapper.","dec":"- (void)setFilename:(NSString *)filename"},"setPreferredFilename:":{"abs":"Specifies the receiver’s preferred filename.","dec":"- (void)setPreferredFilename:(NSString *)filename"},"symbolicLinkDestinationURL":{"abs":"Provides the URL referenced by the receiver, which must be a symbolic-link file wrapper.","dec":"- (NSURL *)symbolicLinkDestinationURL"},"writeToURL:options:originalContentsURL:error:":{"abs":"Recursively writes the entire contents of a file wrapper to a given file-system URL.","dec":"- (BOOL)writeToURL:(NSURL *)url options:(NSFileWrapperWritingOptions)options originalContentsURL:(NSURL *)originalContentsURL error:(NSError **)outError"}},"[=]":{"NSFileWrapperReadingImmediate":"","NSFileWrapperReadingWithoutMapping":"","NSFileWrapperWritingAtomic":"","NSFileWrapperWritingWithNameUpdating":""}};

ClassRef["NSFormatter"] = {"[:]":"NSObject","[-]":{"attributedStringForObjectValue:withDefaultAttributes:":{"abs":"The default implementation returns nil to indicate that the formatter object does not provide an attributed string.","dec":"- (NSAttributedString *)attributedStringForObjectValue:(id)anObject withDefaultAttributes:(NSDictionary *)attributes"},"editingStringForObjectValue:":{"abs":"The default implementation of this method invokes stringForObjectValue:.","dec":"- (NSString *)editingStringForObjectValue:(id)anObject"},"getObjectValue:forString:errorDescription:":{"abs":"The default implementation of this method raises an exception.","dec":"- (BOOL)getObjectValue:(id *)anObject forString:(NSString *)string errorDescription:(NSString **)error"},"isPartialStringValid:newEditingString:errorDescription:":{"abs":"Returns a Boolean value that indicates whether a partial string is valid.","dec":"- (BOOL)isPartialStringValid:(NSString *)partialString newEditingString:(NSString **)newString errorDescription:(NSString **)error"},"isPartialStringValid:proposedSelectedRange:originalString:originalSelectedRange:errorDescription:":{"abs":"This method should be implemented in subclasses that want to validate user changes to a string in a field, where the user changes are not necessarily at the end of the string, and preserve the selection (or set a different one, such as selecting the erroneous part of the string the user has typed).","dec":"- (BOOL)isPartialStringValid:(NSString **)partialStringPtr proposedSelectedRange:(NSRangePointer)proposedSelRangePtr originalString:(NSString *)origString originalSelectedRange:(NSRange)origSelRange errorDescription:(NSString **)error"},"stringForObjectValue:":{"abs":"The default implementation of this method raises an exception.","dec":"- (NSString *)stringForObjectValue:(id)anObject"}}};

ClassRef["NSHashTable"] = {"[:]":"NSObject","[+]":{"hashTableWithOptions:":{"abs":"Returns a hash table with given pointer functions options.","dec":"+ (id)hashTableWithOptions:(NSPointerFunctionsOptions)options"},"weakObjectsHashTable":{"abs":"Returns a new hash table for storing weak references to its contents.","dec":"+ (id)weakObjectsHashTable"}},"[-]":{"addObject:":{"abs":"Adds a given object to the hash table.","dec":"- (void)addObject:(id)object"},"allObjects":{"abs":"Returns an array that contains the hash table’s members.","dec":"- (NSArray *)allObjects"},"anyObject":{"abs":"Returns one of the objects in the hash table.","dec":"- (id)anyObject"},"containsObject:":{"abs":"Returns a Boolean value that indicates whether the hash table contains a given object.","dec":"- (BOOL)containsObject:(id)anObject"},"count":{"abs":"Returns the number of elements in the hash table.","dec":"- (NSUInteger)count"},"initWithOptions:capacity:":{"abs":"Returns a hash table initialized with the given attributes.","dec":"- (id)initWithOptions:(NSPointerFunctionsOptions)options capacity:(NSUInteger)capacity"},"initWithPointerFunctions:capacity:":{"abs":"Returns a hash table initialized with the given functions and capacity.","dec":"- (id)initWithPointerFunctions:(NSPointerFunctions *)functions capacity:(NSUInteger)initialCapacity"},"intersectHashTable:":{"abs":"Removes from the receiving hash table each element that isn’t a member of another given hash table.","dec":"- (void)intersectHashTable:(NSHashTable *)other"},"intersectsHashTable:":{"abs":"Returns a Boolean value that indicates whether a given hash table intersects with the receiving hash table.","dec":"- (BOOL)intersectsHashTable:(NSHashTable *)other"},"isEqualToHashTable:":{"abs":"Returns a Boolean value that indicates whether a given hash table is equal to the receiving hash table.","dec":"- (BOOL)isEqualToHashTable:(NSHashTable *)other"},"isSubsetOfHashTable:":{"abs":"Returns a Boolean value that indicates whether every element in the receiving hash table is also present in another given hash table.","dec":"- (BOOL)isSubsetOfHashTable:(NSHashTable *)other"},"member:":{"abs":"Determines whether the hash table contains a given object, and returns that object if it is present","dec":"- (id)member:(id)object"},"minusHashTable:":{"abs":"Removes each element in another given hash table from the receiving hash table, if present.","dec":"- (void)minusHashTable:(NSHashTable *)other"},"objectEnumerator":{"abs":"Returns an enumerator object that lets you access each object in the hash table.","dec":"- (NSEnumerator *)objectEnumerator"},"pointerFunctions":{"abs":"Returns the pointer functions for the hash table.","dec":"- (NSPointerFunctions *)pointerFunctions"},"removeAllObjects":{"abs":"Removes all objects from the hash table.","dec":"- (void)removeAllObjects"},"removeObject:":{"abs":"Removes a given object from the hash table.","dec":"- (void)removeObject:(id)object"},"setRepresentation":{"abs":"Returns a set that contains the hash table’s members.","dec":"- (NSSet *)setRepresentation"},"unionHashTable:":{"abs":"Adds each element in another given hash table to the receiving hash table, if not present.","dec":"- (void)unionHashTable:(NSHashTable *)other"}},"[=]":{"NSHashTableStrongMemory":"","NSHashTableCopyIn":"","NSHashTableObjectPointerPersonality":"","NSHashTableWeakMemory":""}};

ClassRef["NSHTTPCookie"] = {"[:]":"NSObject","[+]":{"cookiesWithResponseHeaderFields:forURL:":{"abs":"Returns an array of NSHTTPCookie objects corresponding to the provided response header fields for the provided URL.","dec":"+ (NSArray *)cookiesWithResponseHeaderFields:(NSDictionary *)headerFields forURL:(NSURL *)theURL"},"cookieWithProperties:":{"abs":"Creates and initializes an NSHTTPCookie object using the provided properties.","dec":"+ (id)cookieWithProperties:(NSDictionary *)properties"},"requestHeaderFieldsWithCookies:":{"abs":"Returns a dictionary of header fields corresponding to a provided array of cookies.","dec":"+ (NSDictionary *)requestHeaderFieldsWithCookies:(NSArray *)cookies"}},"[-]":{"comment":{"abs":"Returns the receiver's comment string.","dec":"- (NSString *)comment"},"commentURL":{"abs":"Returns the receiver’s comment URL.","dec":"- (NSURL *)commentURL"},"domain":{"abs":"Returns the domain of the receiver’s cookie.","dec":"- (NSString *)domain"},"expiresDate":{"abs":"Returns the receiver’s expiration date.","dec":"- (NSDate *)expiresDate"},"initWithProperties:":{"abs":"Returns an initialized NSHTTPCookie object using the provided properties.","dec":"- (id)initWithProperties:(NSDictionary *)properties"},"isHTTPOnly":{"abs":"Returns whether the receiver should only be sent to HTTP servers per RFC 2965.","dec":"- (BOOL)isHTTPOnly"},"isSecure":{"abs":"Returns whether his cookie should only be sent over secure channels.","dec":"- (BOOL)isSecure"},"isSessionOnly":{"abs":"Returns whether the receiver should be discarded at the end of the session (regardless of expiration date).","dec":"- (BOOL)isSessionOnly"},"name":{"abs":"Returns the receiver’s name.","dec":"- (NSString *)name"},"path":{"abs":"Returns the receiver’s path.","dec":"- (NSString *)path"},"portList":{"abs":"Returns the receiver's port list.","dec":"- (NSArray *)portList"},"properties":{"abs":"Returns the receiver’s cookie properties.","dec":"- (NSDictionary *)properties"},"value":{"abs":"Returns the receiver’s value.","dec":"- (NSString *)value"},"version":{"abs":"Returns the receiver’s version.","dec":"- (NSUInteger)version"}},"[=]":{"NSHTTPCookieComment":"","NSHTTPCookieCommentURL":"","NSHTTPCookieDiscard":"","NSHTTPCookieDomain":"","NSHTTPCookieExpires":"","NSHTTPCookieMaximumAge":"","NSHTTPCookieName":"","NSHTTPCookieOriginURL":"","NSHTTPCookiePath":"","NSHTTPCookiePort":"","NSHTTPCookieSecure":"","NSHTTPCookieValue":"","NSHTTPCookieVersion":""}};

ClassRef["NSHTTPCookieStorage"] = {"[:]":"NSObject","[+]":{"sharedHTTPCookieStorage":{"abs":"Returns the shared cookie storage instance.","dec":"+ (NSHTTPCookieStorage *)sharedHTTPCookieStorage"}},"[-]":{"cookieAcceptPolicy":{"abs":"Returns the cookie storage’s cookie accept policy.","dec":"- (NSHTTPCookieAcceptPolicy)cookieAcceptPolicy"},"cookies":{"abs":"Returns the cookie storage’s cookies.","dec":"- (NSArray *)cookies"},"cookiesForURL:":{"abs":"Returns all the cookie storage’s cookies that are sent to a specified URL.","dec":"- (NSArray *)cookiesForURL:(NSURL *)theURL"},"deleteCookie:":{"abs":"Deletes the specified cookie from the cookie storage.","dec":"- (void)deleteCookie:(NSHTTPCookie *)aCookie"},"setCookie:":{"abs":"Stores a specified cookie in the cookie storage if the cookie accept policy permits.","dec":"- (void)setCookie:(NSHTTPCookie *)aCookie"},"setCookieAcceptPolicy:":{"abs":"Sets the cookie accept policy of the cookie storage.","dec":"- (void)setCookieAcceptPolicy:(NSHTTPCookieAcceptPolicy)aPolicy"},"setCookies:forURL:mainDocumentURL:":{"abs":"Adds an array of cookies to the receiver if the receiver’s cookie acceptance policy permits.","dec":"- (void)setCookies:(NSArray *)cookies forURL:(NSURL *)theURL mainDocumentURL:(NSURL *)mainDocumentURL"},"sortedCookiesUsingDescriptors:":{"abs":"Returns all of the cookie storage’s cookies, sorted according to a given set of sort descriptors.","dec":"- (NSArray *)sortedCookiesUsingDescriptors:(NSArray *)sortOrder"}},"[=]":{"NSHTTPCookieAcceptPolicyAlways":"","NSHTTPCookieAcceptPolicyNever":"","NSHTTPCookieAcceptPolicyOnlyFromMainDocumentDomain":""}};

ClassRef["NSHTTPURLResponse"] = {"[:]":"NSURLResponse : NSObject","[+]":{"localizedStringForStatusCode:":{"abs":"Returns a localized string corresponding to a specified HTTP status code.","dec":"+ (NSString *)localizedStringForStatusCode:(NSInteger)statusCode"}},"[-]":{"allHeaderFields":{"abs":"Returns all the HTTP header fields of the receiver.","dec":"- (NSDictionary *)allHeaderFields"},"initWithURL:statusCode:HTTPVersion:headerFields:":{"abs":"Initializes an HTTP URL response object with a status code, protocol version, and response headers.","dec":"- (id)initWithURL:(NSURL *)url statusCode:(NSInteger)statusCode HTTPVersion:(NSString *)HTTPVersion headerFields:(NSDictionary *)headerFields"},"statusCode":{"abs":"Returns the receiver’s HTTP status code.","dec":"- (NSInteger)statusCode"}}};

ClassRef["NSIndexPath UIKit Additions"] = {"[:]":"NSObject","[.]":{"item":{"abs":"An index number identifying an item in a section of a collection view. (read-only)","dec":"@property (nonatomic, readonly) NSInteger item;"},"row":{"abs":"An index number identifying a row in a section of a table view. (read-only)","dec":"@property(nonatomic, readonly) NSInteger row"},"section":{"abs":"An index number identifying a section in a table view or collection view. (read-only)","dec":"@property(nonatomic, readonly) NSInteger section"}},"[+]":{"indexPathForItem:inSection:":{"abs":"Returns an index-path object initialized with the indexes of a specific item and section in a collection view.","dec":"+ (NSIndexPath *)indexPathForItem:(NSInteger)item inSection:(NSInteger)section"},"indexPathForRow:inSection:":{"abs":"Returns an index-path object initialized with the indexes of a specific row and section in a table view.","dec":"+ (NSIndexPath *)indexPathForRow:(NSInteger)row inSection:(NSInteger)section"}}};

ClassRef["NSIndexPath"] = {"[:]":"NSObject","[+]":{"indexPathWithIndex:":{"abs":"Creates an one-node index path.","dec":"+ (instancetype)indexPathWithIndex:(NSUInteger)index"},"indexPathWithIndexes:length:":{"abs":"Creates an index path with one or more nodes.","dec":"+ (instancetype)indexPathWithIndexes:(const NSUInteger [])indexes length:(NSUInteger)length"}},"[-]":{"compare:":{"abs":"Indicates the depth-first traversal order of the receiving index path and another index path.","dec":"- (NSComparisonResult)compare:(NSIndexPath *)indexPath"},"getIndexes:":{"abs":"Copies the objects contained in the index path into indexes.","dec":"- (void)getIndexes:(NSUInteger *)indexes"},"indexAtPosition:":{"abs":"Provides the index at a particular node in the index path.","dec":"- (NSUInteger)indexAtPosition:(NSUInteger)node"},"indexPathByAddingIndex:":{"abs":"Provides an index path containing the indexes in the receiving index path and another index.","dec":"- (NSIndexPath *)indexPathByAddingIndex:(NSUInteger)index"},"indexPathByRemovingLastIndex":{"abs":"Provides an index path with the indexes in the receiving index path, excluding the last one.","dec":"- (NSIndexPath *)indexPathByRemovingLastIndex"},"init":{"abs":"","dec":"- (instancetype)init"},"initWithIndex:":{"abs":"Initializes an allocated NSIndexPath object with a one-node index path.","dec":"- (instancetype)initWithIndex:(NSUInteger)index"},"initWithIndexes:length:":{"abs":"Initializes an allocated NSIndexPath object with an index path of a specific length.","dec":"- (instancetype)initWithIndexes:(const NSUInteger [])indexes length:(NSUInteger)length"},"length":{"abs":"Provides the number of indexes in the index path.","dec":"- (NSUInteger)length"}}};

ClassRef["NSIndexSet"] = {"[:]":"NSObject","[+]":{"indexSet":{"abs":"Creates an empty index set.","dec":"+ (instancetype)indexSet"},"indexSetWithIndex:":{"abs":"Creates an index set with an index.","dec":"+ (instancetype)indexSetWithIndex:(NSUInteger)index"},"indexSetWithIndexesInRange:":{"abs":"Creates an index set with an index range.","dec":"+ (instancetype)indexSetWithIndexesInRange:(NSRange)indexRange"}},"[-]":{"containsIndex:":{"abs":"Indicates whether the index set contains a specific index.","dec":"- (BOOL)containsIndex:(NSUInteger)index"},"containsIndexes:":{"abs":"Indicates whether the receiving index set contains a superset of the indexes in another index set.","dec":"- (BOOL)containsIndexes:(NSIndexSet *)indexSet"},"containsIndexesInRange:":{"abs":"Indicates whether the index set contains the indexes represented by an index range.","dec":"- (BOOL)containsIndexesInRange:(NSRange)indexRange"},"count":{"abs":"Returns the number of indexes in the index set.","dec":"- (NSUInteger)count"},"countOfIndexesInRange:":{"abs":"Returns the number of indexes in the index set that are members of a given range.","dec":"- (NSUInteger)countOfIndexesInRange:(NSRange)indexRange"},"enumerateIndexesInRange:options:usingBlock:":{"abs":"Executes a given Block using the indexes in the specified range, using the specified enumeration options.","dec":"- (void)enumerateIndexesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^)(NSUInteger idx, BOOL *stop))block"},"enumerateIndexesUsingBlock:":{"abs":"Executes a given Block using each object in the index set.","dec":"- (void)enumerateIndexesUsingBlock:(void (^)(NSUInteger idx, BOOL *stop))block"},"enumerateIndexesWithOptions:usingBlock:":{"abs":"Executes a given Block over the index set’s indexes, using the specified enumeration options.","dec":"- (void)enumerateIndexesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(NSUInteger idx, BOOL *stop))block"},"enumerateRangesInRange:options:usingBlock:":{"abs":"Enumerates over the ranges in the range of objects using the block","dec":"- (void)enumerateRangesInRange:(NSRange)range options:(NSEnumerationOptions)opts usingBlock:(void (^)(NSRange range, BOOL *stop))block"},"enumerateRangesUsingBlock:":{"abs":"Executes a given block using each object in the index set, in the specified ranges.","dec":"- (void)enumerateRangesUsingBlock:(void (^)(NSRange range, BOOL *stop))block"},"enumerateRangesWithOptions:usingBlock:":{"abs":"Executes a given block using each object in the index set, in the specified ranges.","dec":"- (void)enumerateRangesWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(NSRange range, BOOL *stop))block"},"firstIndex":{"abs":"Returns either the first index in the index set or the not-found indicator.","dec":"- (NSUInteger)firstIndex"},"getIndexes:maxCount:inIndexRange:":{"abs":"The index set fills an index buffer with the indexes contained both in the index set and in an index range, returning the number of indexes copied.","dec":"- (NSUInteger)getIndexes:(NSUInteger *)indexBuffer maxCount:(NSUInteger)bufferSize inIndexRange:(NSRangePointer)indexRangePointer"},"indexesInRange:options:passingTest:":{"abs":"Returns an NSIndexSet containing the receiving index set’s objects in the specified range that pass the Block test.","dec":"- (NSIndexSet *)indexesInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate"},"indexesPassingTest:":{"abs":"Returns an NSIndexSet containing the receiving index set’s objects that pass the Block test.","dec":"- (NSIndexSet *)indexesPassingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate"},"indexesWithOptions:passingTest:":{"abs":"Returns an NSIndexSet containing the receiving index set’s objects that pass the Block test using the specified enumeration options.","dec":"- (NSIndexSet *)indexesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate"},"indexGreaterThanIndex:":{"abs":"Returns either the closest index in the index set that is greater than a specific index or the not-found indicator.","dec":"- (NSUInteger)indexGreaterThanIndex:(NSUInteger)index"},"indexGreaterThanOrEqualToIndex:":{"abs":"Returns either the closest index in the index set that is greater than or equal to a specific index or the not-found indicator.","dec":"- (NSUInteger)indexGreaterThanOrEqualToIndex:(NSUInteger)index"},"indexInRange:options:passingTest:":{"abs":"Returns the index of the first object in the specified range that passes the predicate Block test.","dec":"- (NSUInteger)indexInRange:(NSRange)range options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate"},"indexLessThanIndex:":{"abs":"Returns either the closest index in the index set that is less than a specific index or the not-found indicator.","dec":"- (NSUInteger)indexLessThanIndex:(NSUInteger)index"},"indexLessThanOrEqualToIndex:":{"abs":"Returns either the closest index in the index set that is less than or equal to a specific index or the not-found indicator.","dec":"- (NSUInteger)indexLessThanOrEqualToIndex:(NSUInteger)index"},"indexPassingTest:":{"abs":"Returns the index of the first object that passes the predicate Block test.","dec":"- (NSUInteger)indexPassingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate"},"indexWithOptions:passingTest:":{"abs":"Returns the index of the first object that passes the predicate Block test using the specified enumeration options.","dec":"- (NSUInteger)indexWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(NSUInteger idx, BOOL *stop))predicate"},"init":{"abs":"Initializes an allocated NSIndexSet object.","dec":"- (instancetype)init"},"initWithIndex:":{"abs":"Initializes an allocated NSIndexSet object with an index.","dec":"- (instancetype)initWithIndex:(NSUInteger)index"},"initWithIndexesInRange:":{"abs":"Initializes an allocated NSIndexSet object with an index range.","dec":"- (instancetype)initWithIndexesInRange:(NSRange)indexRange"},"initWithIndexSet:":{"abs":"Initializes an allocated NSIndexSet object with an index set.","dec":"- (instancetype)initWithIndexSet:(NSIndexSet *)indexSet"},"intersectsIndexesInRange:":{"abs":"Indicates whether the index set contains any of the indexes in a range.","dec":"- (BOOL)intersectsIndexesInRange:(NSRange)indexRange"},"isEqualToIndexSet:":{"abs":"Indicates whether the indexes in the receiving index set are the same indexes contained in another index set.","dec":"- (BOOL)isEqualToIndexSet:(NSIndexSet *)indexSet"},"lastIndex":{"abs":"Returns either the last index in the index set or the not-found indicator.","dec":"- (NSUInteger)lastIndex"}}};

ClassRef["NSInputStream"] = {"[:]":"NSStream : NSObject","[+]":{"inputStreamWithData:":{"abs":"Creates and returns an initialized NSInputStream object for reading from a given NSData object.","dec":"+ (id)inputStreamWithData:(NSData *)data"},"inputStreamWithFileAtPath:":{"abs":"Creates and returns an initialized NSInputStream object that reads data from the file at a given path.","dec":"+ (id)inputStreamWithFileAtPath:(NSString *)path"},"inputStreamWithURL:":{"abs":"Creates and returns an initialized NSInputStream object that reads data from the file at a given URL.","dec":"+ (id)inputStreamWithURL:(NSURL *)url"}},"[-]":{"getBuffer:length:":{"abs":"Returns by reference a pointer to a read buffer and, by reference, the number of bytes available, and returns a Boolean value that indicates whether the buffer is available.","dec":"- (BOOL)getBuffer:(uint8_t **)buffer length:(NSUInteger *)len"},"hasBytesAvailable":{"abs":"Returns a Boolean value that indicates whether the receiver has bytes available to read.","dec":"- (BOOL)hasBytesAvailable"},"initWithData:":{"abs":"Initializes and returns an NSInputStream object for reading from a given NSData object.","dec":"- (id)initWithData:(NSData *)data"},"initWithFileAtPath:":{"abs":"Initializes and returns an NSInputStream object that reads data from the file at a given path.","dec":"- (id)initWithFileAtPath:(NSString *)path"},"initWithURL:":{"abs":"Initializes and returns an NSInputStream object that reads data from the file at a given URL.","dec":"- (id)initWithURL:(NSURL *)url"},"read:maxLength:":{"abs":"Reads up to a given number of bytes into a given buffer.","dec":"- (NSInteger)read:(uint8_t *)buffer maxLength:(NSUInteger)len"}}};

ClassRef["NSInvocation"] = {"[:]":"NSObject","[+]":{"invocationWithMethodSignature:":{"abs":"Returns an NSInvocation object able to construct messages using a given method signature.","dec":"+ (NSInvocation *)invocationWithMethodSignature:(NSMethodSignature *)signature"}},"[-]":{"argumentsRetained":{"abs":"Returns YES if the receiver has retained its arguments, NO otherwise.","dec":"- (BOOL)argumentsRetained"},"getArgument:atIndex:":{"abs":"Returns by indirection the receiver's argument at a specified index.","dec":"- (void)getArgument:(void *)buffer atIndex:(NSInteger)index"},"getReturnValue:":{"abs":"Gets the receiver's return value.","dec":"- (void)getReturnValue:(void *)buffer"},"invoke":{"abs":"Sends the receiver’s message (with arguments) to its target and sets the return value.","dec":"- (void)invoke"},"invokeWithTarget:":{"abs":"Sets the receiver’s target, sends the receiver’s message (with arguments) to that target, and sets the return value.","dec":"- (void)invokeWithTarget:(id)anObject"},"methodSignature":{"abs":"Returns the receiver’s method signature.","dec":"- (NSMethodSignature *)methodSignature"},"retainArguments":{"abs":"If the receiver hasn’t already done so, retains the target and all object arguments of the receiver and copies all of its C-string arguments and blocks.","dec":"- (void)retainArguments"},"selector":{"abs":"Returns the receiver’s selector, or 0 if it hasn’t been set.","dec":"- (SEL)selector"},"setArgument:atIndex:":{"abs":"Sets an argument of the receiver.","dec":"- (void)setArgument:(void *)buffer atIndex:(NSInteger)index"},"setReturnValue:":{"abs":"Sets the receiver’s return value.","dec":"- (void)setReturnValue:(void *)buffer"},"setSelector:":{"abs":"Sets the receiver’s selector.","dec":"- (void)setSelector:(SEL)selector"},"setTarget:":{"abs":"Sets the receiver’s target.","dec":"- (void)setTarget:(id)anObject"},"target":{"abs":"Returns the receiver’s target, or nil if the receiver has no target.","dec":"- (id)target"}}};

ClassRef["NSInvocationOperation"] = {"[:]":"NSOperation : NSObject","[-]":{"initWithInvocation:":{"abs":"Returns an NSInvocationOperation object initialized with the specified invocation object.","dec":"- (id)initWithInvocation:(NSInvocation *)inv"},"initWithTarget:selector:object:":{"abs":"Returns an NSInvocationOperation object initialized with the specified target and selector.","dec":"- (id)initWithTarget:(id)target selector:(SEL)sel object:(id)arg"},"invocation":{"abs":"Returns the receiver’s invocation object.","dec":"- (NSInvocation *)invocation"},"result":{"abs":"Returns the result of the invocation or method.","dec":"- (id)result"}},"[=]":{"NSInvocationOperationVoidResultException":"","NSInvocationOperationCancelledException":""}};

ClassRef["NSKeyedUnarchiver"] = {"[:]":"NSCoder : NSObject","[+]":{"classForClassName:":{"abs":"Returns the class from which NSKeyedUnarchiver instantiates an encoded object with a given class name.","dec":"+ (Class)classForClassName:(NSString *)codedName"},"setClass:forClassName:":{"abs":"Adds a class translation mapping to NSKeyedUnarchiver whereby objects encoded with a given class name are decoded as instances of a given class instead.","dec":"+ (void)setClass:(Class)cls forClassName:(NSString *)codedName"},"unarchiveObjectWithData:":{"abs":"Decodes and returns the object graph previously encoded by NSKeyedArchiver and stored in a given NSData object.","dec":"+ (id)unarchiveObjectWithData:(NSData *)data"},"unarchiveObjectWithFile:":{"abs":"Decodes and returns the object graph previously encoded by NSKeyedArchiver written to the file at a given path.","dec":"+ (id)unarchiveObjectWithFile:(NSString *)path"}},"[-]":{"classForClassName:":{"abs":"Returns the class from which the receiver instantiates an encoded object with a given class name.","dec":"- (Class)classForClassName:(NSString *)codedName"},"containsValueForKey:":{"abs":"Returns a Boolean value that indicates whether the archive contains a value for a given key within the current decoding scope.","dec":"- (BOOL)containsValueForKey:(NSString *)key"},"decodeBoolForKey:":{"abs":"Decodes a Boolean value associated with a given key.","dec":"- (BOOL)decodeBoolForKey:(NSString *)key"},"decodeBytesForKey:returnedLength:":{"abs":"Decodes a stream of bytes associated with a given key.","dec":"- (const uint8_t *)decodeBytesForKey:(NSString *)key returnedLength:(NSUInteger *)lengthp"},"decodeDoubleForKey:":{"abs":"Decodes a double-precision floating-point value associated with a given key.","dec":"- (double)decodeDoubleForKey:(NSString *)key"},"decodeFloatForKey:":{"abs":"Decodes a single-precision floating-point value associated with a given key.","dec":"- (float)decodeFloatForKey:(NSString *)key"},"decodeInt32ForKey:":{"abs":"Decodes a 32-bit integer value associated with a given key.","dec":"- (int32_t)decodeInt32ForKey:(NSString *)key"},"decodeInt64ForKey:":{"abs":"Decodes a 64-bit integer value associated with a given key.","dec":"- (int64_t)decodeInt64ForKey:(NSString *)key"},"decodeIntForKey:":{"abs":"Decodes an integer value associated with a given key.","dec":"- (int)decodeIntForKey:(NSString *)key"},"decodeObjectForKey:":{"abs":"Decodes and returns an object associated with a given key.","dec":"- (id)decodeObjectForKey:(NSString *)key"},"delegate":{"abs":"Returns the receiver’s delegate.","dec":"- (id<NSKeyedUnarchiverDelegate>)delegate"},"finishDecoding":{"abs":"Tells the receiver that you are finished decoding objects.","dec":"- (void)finishDecoding"},"initForReadingWithData:":{"abs":"Initializes the receiver for decoding an archive previously encoded by NSKeyedArchiver.","dec":"- (id)initForReadingWithData:(NSData *)data"},"setClass:forClassName:":{"abs":"Adds a class translation mapping to the receiver whereby objects encoded with a given class name are decoded as instances of a given class instead.","dec":"- (void)setClass:(Class)cls forClassName:(NSString *)codedName"},"setDelegate:":{"abs":"Sets the receiver’s delegate.","dec":"- (void)setDelegate:(id<NSKeyedUnarchiverDelegate>)delegate"},"setRequiresSecureCoding:":{"abs":"Indicates whether the receiver requires all unarchived classes to conform to NSSecureCoding.","dec":"- (void)setRequiresSecureCoding:(BOOL)flag"}},"[=]":{"NSInvalidUnarchiveOperationException":""}};

ClassRef.NSLayoutConstraint = {"[:]":"NSObject","[.]":{"constant":{"abs":"The constant added to the multiplied second attribute participating in the constraint.","dec":"@property CGFloat constant"},"firstAttribute":{"abs":"The attribute of the first object participating in the constraint.","dec":"@property (readonly) NSLayoutAttribute firstAttribute"},"firstItem":{"abs":"The first object participating in the constraint.","dec":"@property (readonly, assign) id firstItem"},"multiplier":{"abs":"The multiplier applied to the second attribute participating in the constraint.","dec":"@property (readonly) CGFloat multiplier"},"priority":{"abs":"The priority of the constraint.","dec":"@property NSLayoutPriority priority"},"relation":{"abs":"The relation between the two attributes in the constraint.","dec":"@property (readonly) NSLayoutRelation relation"},"secondAttribute":{"abs":"The attribute of the second object participating in the constraint.","dec":"@property (readonly) NSLayoutAttribute secondAttribute"},"secondItem":{"abs":"The second object participating in the constraint.","dec":"@property (readonly, assign) id secondItem"},"shouldBeArchived":{"abs":"Determines whether the constraint should be archived by its owning view.","dec":"@property BOOL shouldBeArchived"}},"[+]":{"constraintsWithVisualFormat:options:metrics:views:":{"abs":"Create constraints described by an ASCII art-like visual format string.","dec":"+ (NSArray *)constraintsWithVisualFormat:(NSString *)format options:(NSLayoutFormatOptions)opts metrics:(NSDictionary *)metrics views:(NSDictionary *)views"},"constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:":{"abs":"Create a constraint of the form \"view1.attr1 <relation> view2.attr2 * multiplier + constant\".","dec":"+ (id)constraintWithItem:(id)view1 attribute:(NSLayoutAttribute)attr1 relatedBy:(NSLayoutRelation)relation toItem:(id)view2 attribute:(NSLayoutAttribute)attr2 multiplier:(CGFloat)multiplier constant:(CGFloat)c"}},"[=]":{"NSLayoutRelationLessThanOrEqual":"","NSLayoutRelationEqual":"","NSLayoutRelationGreaterThanOrEqual":"","NSLayoutAttributeLeft":"","NSLayoutAttributeRight":"","NSLayoutAttributeTop":"","NSLayoutAttributeBottom":"","NSLayoutAttributeLeading":"","NSLayoutAttributeTrailing":"","NSLayoutAttributeWidth":"","NSLayoutAttributeHeight":"","NSLayoutAttributeCenterX":"","NSLayoutAttributeCenterY":"","NSLayoutAttributeBaseline":"","NSLayoutAttributeNotAnAttribute":"","NSLayoutFormatAlignAllLeft":"","NSLayoutFormatAlignAllRight":"","NSLayoutFormatAlignAllTop":"","NSLayoutFormatAlignAllBottom":"","NSLayoutFormatAlignAllLeading":"","NSLayoutFormatAlignAllTrailing":"","NSLayoutFormatAlignAllCenterX":"","NSLayoutFormatAlignAllCenterY":"","NSLayoutFormatAlignAllBaseline":"","NSLayoutFormatAlignmentMask":"","NSLayoutFormatDirectionLeadingToTrailing":"","NSLayoutFormatDirectionLeftToRight":"","NSLayoutFormatDirectionRightToLeft":"","NSLayoutFormatDirectionMask":"","UILayoutPriorityRequired":"","UILayoutPriorityDefaultHigh":"","UILayoutPriorityDefaultLow":"","UILayoutPriorityFittingSizeLevel":""}};

ClassRef.NSLayoutManager  = {"[:]":"NSObject","[.]":{"allowsNonContiguousLayout":{"abs":"Indicates whether noncontiguous layout is enabled or disabled.","dec":"@property(nonatomic) BOOL allowsNonContiguousLayout"},"delegate":{"abs":"This layout manager’s delegate.","dec":"@property(assign, nonatomic) id<NSLayoutManagerDelegate> delegate"},"extraLineFragmentRect":{"abs":"The rectangle defining the extra line fragment for the insertion point at the end of a text (either in an empty text or after a final paragraph separator). (read-only)","dec":"@property(readonly, nonatomic) CGRect extraLineFragmentRect"},"extraLineFragmentTextContainer":{"abs":"The text container that contains the extra line fragment rectangle. (read-only)","dec":"@property(readonly, nonatomic) NSTextContainer *extraLineFragmentTextContainer"},"extraLineFragmentUsedRect":{"abs":"The rectangle enclosing the insertion point drawn in the extra line fragment rectangle. (read-only)","dec":"@property(readonly, nonatomic) CGRect extraLineFragmentUsedRect"},"hasNonContiguousLayout":{"abs":"Indicates whether the layout manager currently has any areas of noncontiguous layout. (read-only)","dec":"@property(readonly, nonatomic) BOOL hasNonContiguousLayout"},"hyphenationFactor":{"abs":"The current hyphenation threshold.","dec":"@property(nonatomic) CGFloat hyphenationFactor"},"numberOfGlyphs":{"abs":"The number of glyphs in the receiver. (read-only)","dec":"@property(readonly, nonatomic) NSUInteger numberOfGlyphs"},"showsControlCharacters":{"abs":"Specifies whether to substitute visible glyphs for control characters in layout.","dec":"@property(nonatomic) BOOL showsControlCharacters"},"showsInvisibleCharacters":{"abs":"Specifies whether to substitute visible glyphs for whitespace and other typically invisible characters in layout.","dec":"@property(nonatomic) BOOL showsInvisibleCharacters"},"textContainers":{"abs":"The receiver’s text containers. (read-only)","dec":"@property(readonly, nonatomic) NSArray *textContainers"},"textStorage":{"abs":"The receiver’s text storage object.","dec":"@property(assign, nonatomic) NSTextStorage *textStorage"},"usesFontLeading":{"abs":"Indicates whether the receiver uses the leading provided in the font.","dec":"@property(nonatomic) BOOL usesFontLeading"}},"[-]":{"addTextContainer:":{"abs":"Appends the given text container to the series of text containers where the receiver arranges text.","dec":"- (void)addTextContainer:(NSTextContainer *)container"},"attachmentSizeForGlyphAtIndex:":{"abs":"For a glyph corresponding to an attachment, returns the size for the attachment cell to occupy.","dec":"- (CGSize)attachmentSizeForGlyphAtIndex:(NSUInteger)glyphIndex"},"boundingRectForGlyphRange:inTextContainer:":{"abs":"Returns a single bounding rectangle (in container coordinates) enclosing all glyphs and other marks drawn in the given text container for the given glyph range, including glyphs that draw outside their line fragment rectangles and text attributes such as underlining.","dec":"- (CGRect)boundingRectForGlyphRange:(NSRange)glyphRange inTextContainer:(NSTextContainer *)container"},"characterIndexForGlyphAtIndex:":{"abs":"Returns the index in the text storage for the first character associated with the given glyph.","dec":"- (NSUInteger)characterIndexForGlyphAtIndex:(NSUInteger)glyphIndex"},"characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:":{"abs":"Returns the index of the character falling under the given point, expressed in the given container's coordinate system.","dec":"- (NSUInteger)characterIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer *)container fractionOfDistanceBetweenInsertionPoints:(CGFloat *)partialFraction"},"characterRangeForGlyphRange:actualGlyphRange:":{"abs":"Returns the range of characters that generated the glyphs in the given glyph range.","dec":"- (NSRange)characterRangeForGlyphRange:(NSRange)glyphRange actualGlyphRange:(NSRangePointer)actualGlyphRange"},"drawBackgroundForGlyphRange:atPoint:":{"abs":"Draws background marks for the given glyph range, which must lie completely within a single text container.","dec":"- (void)drawBackgroundForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin"},"drawGlyphsForGlyphRange:atPoint:":{"abs":"Draws the glyphs in the given glyph range, which must lie completely within a single text container.","dec":"- (void)drawGlyphsForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin"},"drawsOutsideLineFragmentForGlyphAtIndex:":{"abs":"Indicates whether the glyph draws outside of its line fragment rectangle.","dec":"- (BOOL)drawsOutsideLineFragmentForGlyphAtIndex:(NSUInteger)glyphIndex"},"drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:":{"abs":"Draws a strikethrough for the glyphs in a given range.","dec":"- (void)drawStrikethroughForGlyphRange:(NSRange)glyphRange strikethroughType:(NSUnderlineStyle)strikethroughVal baselineOffset:(CGFloat)baselineOffset lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin"},"drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:":{"abs":"Draws underlining for the glyphs in a given range.","dec":"- (void)drawUnderlineForGlyphRange:(NSRange)glyphRange underlineType:(NSUnderlineStyle)underlineVal baselineOffset:(CGFloat)baselineOffset lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin"},"ensureGlyphsForCharacterRange:":{"abs":"Forces the receiver to generate glyphs for the specified character range, if it has not already done so.","dec":"- (void)ensureGlyphsForCharacterRange:(NSRange)charRange"},"ensureGlyphsForGlyphRange:":{"abs":"Forces the receiver to generate glyphs for the specified glyph range, if it has not already done so.","dec":"- (void)ensureGlyphsForGlyphRange:(NSRange)glyphRange"},"ensureLayoutForBoundingRect:inTextContainer:":{"abs":"Forces the receiver to perform layout for the specified area in the specified text container, if it has not already done so.","dec":"- (void)ensureLayoutForBoundingRect:(CGRect)bounds inTextContainer:(NSTextContainer *)container"},"ensureLayoutForCharacterRange:":{"abs":"Forces the receiver to perform layout for the specified character range, if it has not already done so.","dec":"- (void)ensureLayoutForCharacterRange:(NSRange)charRange"},"ensureLayoutForGlyphRange:":{"abs":"Forces the receiver to perform layout for the specified glyph range, if it has not already done so.","dec":"- (void)ensureLayoutForGlyphRange:(NSRange)glyphRange"},"ensureLayoutForTextContainer:":{"abs":"Forces the receiver to perform layout for the specified text container, if it has not already done so.","dec":"- (void)ensureLayoutForTextContainer:(NSTextContainer *)container"},"enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:":{"abs":"Enumerates enclosing rectangles for the given glyph range in the given text container.","dec":"- (void)enumerateEnclosingRectsForGlyphRange:(NSRange)glyphRange withinSelectedGlyphRange:(NSRange)selectedRange inTextContainer:(NSTextContainer *)textContainer usingBlock:(void (^)(CGRect rect, BOOL *stop))block"},"enumerateLineFragmentsForGlyphRange:usingBlock:":{"abs":"Enumerates line fragments intersecting with the given glyph range.","dec":"- (void)enumerateLineFragmentsForGlyphRange:(NSRange)glyphRange usingBlock:(void (^)(CGRect rect, CGRect usedRect, NSTextContainer *textContainer, NSRange glyphRange, BOOL *stop))block"},"fillBackgroundRectArray:count:forCharacterRange:color:":{"abs":"Fills background rectangles with a color.","dec":"- (void)fillBackgroundRectArray:(const CGRect *)rectArray count:(NSUInteger)rectCount forCharacterRange:(NSRange)charRange color:(UIColor *)color"},"firstUnlaidCharacterIndex":{"abs":"Returns the index for the first character in the layout manager that has not been laid out.","dec":"- (NSUInteger)firstUnlaidCharacterIndex"},"firstUnlaidGlyphIndex":{"abs":"Returns the index for the first glyph in the layout manager that has not been laid out.","dec":"- (NSUInteger)firstUnlaidGlyphIndex"},"fractionOfDistanceThroughGlyphForPoint:inTextContainer:":{"abs":"This method is a primitive for glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:. You should always call the main method, not the primitives.","dec":"- (CGFloat)fractionOfDistanceThroughGlyphForPoint:(CGPoint)point inTextContainer:(NSTextContainer *)container"},"getFirstUnlaidCharacterIndex:glyphIndex:":{"abs":"Returns the index for the first character or glyph, or both, having invalid layout information.","dec":"- (void)getFirstUnlaidCharacterIndex:(NSUInteger *)charIndex glyphIndex:(NSUInteger *)glyphIndex"},"getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:":{"abs":"Fills a passed-in buffer with a sequence of glyphs.","dec":"- (NSUInteger)getGlyphsInRange:(NSRange)glyphRange glyphs:(CGGlyph *)glyphBuffer properties:(NSGlyphProperty *)props characterIndexes:(NSUInteger *)charIndexBuffer bidiLevels:(unsigned char *)bidiLevelBuffer"},"getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:":{"abs":"Returns insertion points in bulk for a given line fragment.","dec":"- (NSUInteger)getLineFragmentInsertionPointsForCharacterAtIndex:(NSUInteger)charIndex alternatePositions:(BOOL)aFlag inDisplayOrder:(BOOL)dFlag positions:(CGFloat *)positions characterIndexes:(NSUInteger *)charIndexes"},"glyphAtIndex:":{"abs":"Returns the glyph at the given glyph index.","dec":"- (CGGlyph)glyphAtIndex:(NSUInteger)glyphIndex"},"glyphAtIndex:isValidIndex:":{"abs":"If the given index is valid, returns the glyph at that location and optionally returns a flag indicating whether the requested index is in range.","dec":"- (CGGlyph)glyphAtIndex:(NSUInteger)glyphIndex isValidIndex:(BOOL *)isValidIndex"},"glyphIndexForCharacterAtIndex:":{"abs":"Returns the index of the first glyph associated with the character at the specified index.","dec":"- (NSUInteger)glyphIndexForCharacterAtIndex:(NSUInteger)charIndex"},"glyphIndexForPoint:inTextContainer:":{"abs":"This method is a primitive for glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:. You should always call the main method, not the primitives.","dec":"- (NSUInteger)glyphIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer *)container"},"glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:":{"abs":"Returns the index of the glyph falling under the given point, expressed in the given container's coordinate system.","dec":"- (NSUInteger)glyphIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer *)container fractionOfDistanceThroughGlyph:(CGFloat *)partialFraction"},"glyphRangeForBoundingRect:inTextContainer:":{"abs":"Returns the smallest contiguous range for glyphs that are laid out wholly or partially within the given rectangle in the given text container.","dec":"- (NSRange)glyphRangeForBoundingRect:(CGRect)bounds inTextContainer:(NSTextContainer *)container"},"glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:":{"abs":"Returns the smallest contiguous range for glyphs that are laid out wholly or partially within the given rectangle in the given text container.","dec":"- (NSRange)glyphRangeForBoundingRectWithoutAdditionalLayout:(CGRect)bounds inTextContainer:(NSTextContainer *)container"},"glyphRangeForCharacterRange:actualCharacterRange:":{"abs":"Returns the range of glyphs that are generated from the characters in the given character range.","dec":"- (NSRange)glyphRangeForCharacterRange:(NSRange)charRange actualCharacterRange:(NSRangePointer)actualCharRange"},"glyphRangeForTextContainer:":{"abs":"Returns the range of glyphs laid out in the given text container.","dec":"- (NSRange)glyphRangeForTextContainer:(NSTextContainer *)container"},"insertTextContainer:atIndex:":{"abs":"Inserts the given text container into the series of text containers at the given index.","dec":"- (void)insertTextContainer:(NSTextContainer *)container atIndex:(NSUInteger)index"},"invalidateDisplayForCharacterRange:":{"abs":"Invalidates display for the given character range.","dec":"- (void)invalidateDisplayForCharacterRange:(NSRange)charRange"},"invalidateDisplayForGlyphRange:":{"abs":"Marks the glyphs in the given glyph range as needing display, as well as the appropriate regions of the NSTextView objects that display those glyphs (using the NSView method setNeedsDisplayInRect:).","dec":"- (void)invalidateDisplayForGlyphRange:(NSRange)glyphRange"},"invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:":{"abs":"Invalidates the cached glyphs for the characters in the given character range, adjusts the character indices of all the subsequent glyphs by the change in length, and invalidates the new character range.","dec":"- (void)invalidateGlyphsForCharacterRange:(NSRange)charRange changeInLength:(NSInteger)delta actualCharacterRange:(NSRangePointer)actualCharRange"},"invalidateLayoutForCharacterRange:actualCharacterRange:":{"abs":"Invalidates the layout information for the glyphs mapped to the given range of characters.","dec":"- (void)invalidateLayoutForCharacterRange:(NSRange)charRange actualCharacterRange:(NSRangePointer)actualCharRange"},"isValidGlyphIndex:":{"abs":"Indicates whether the specified index refers to a valid glyph.","dec":"- (BOOL)isValidGlyphIndex:(NSUInteger)glyphIndex"},"lineFragmentRectForGlyphAtIndex:effectiveRange:":{"abs":"Returns the rectangle for the line fragment in which the given glyph is laid out and (optionally), by reference, the whole range of glyphs that are in that fragment.","dec":"- (CGRect)lineFragmentRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer)effectiveGlyphRange"},"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:":{"abs":"Returns the usage rectangle for the line fragment in which the given glyph is laid and (optionally) by reference the whole range of glyphs that are in that fragment.","dec":"- (CGRect)lineFragmentUsedRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer)effectiveGlyphRange"},"locationForGlyphAtIndex:":{"abs":"Returns the location for the given glyph within its line fragment.","dec":"- (CGPoint)locationForGlyphAtIndex:(NSUInteger)glyphIndex"},"notShownAttributeForGlyphAtIndex:":{"abs":"Indicates whether the glyph at the given index is one that isn’t shown.","dec":"- (BOOL)notShownAttributeForGlyphAtIndex:(NSUInteger)glyphIndex"},"processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:":{"abs":"Sent from the NSTextStorage method processEditing to notify the layout manager of an edit action.","dec":"- (void)processEditingForTextStorage:(NSTextStorage *)textStorage edited:(NSTextStorageEditActions)editMask range:(NSRange)newCharRange changeInLength:(NSInteger)delta invalidatedRange:(NSRange)invalidatedCharRange"},"propertyForGlyphAtIndex:":{"abs":"Returns the glyph property associated with the glyph at the specified index.","dec":"- (NSGlyphProperty)propertyForGlyphAtIndex:(NSUInteger)glyphIndex"},"rangeOfNominallySpacedGlyphsContainingIndex:":{"abs":"Returns the range for the glyphs around the given glyph that can be displayed using only their advancements from the font, without pairwise kerning or other adjustments to spacing.","dec":"- (NSRange)rangeOfNominallySpacedGlyphsContainingIndex:(NSUInteger)glyphIndex"},"removeTextContainerAtIndex:":{"abs":"Removes the text container at the given index and invalidates the layout as needed.","dec":"- (void)removeTextContainerAtIndex:(NSUInteger)index"},"setAttachmentSize:forGlyphRange:":{"abs":"Sets the size at which the given glyph (assumed to be an attachment) is asked to draw in the given glyph range.","dec":"- (void)setAttachmentSize:(CGSize)attachmentSize forGlyphRange:(NSRange)glyphRange"},"setDrawsOutsideLineFragment:forGlyphAtIndex:":{"abs":"Specifies whether the given glyph exceeds the bounds of the line fragment where it’s laid out.","dec":"- (void)setDrawsOutsideLineFragment:(BOOL)flag forGlyphAtIndex:(NSUInteger)glyphIndex"},"setExtraLineFragmentRect:usedRect:textContainer:":{"abs":"Sets the bounds and container for the extra line fragment.","dec":"- (void)setExtraLineFragmentRect:(CGRect)fragmentRect usedRect:(CGRect)usedRect textContainer:(NSTextContainer *)container"},"setGlyphs:properties:characterIndexes:font:forGlyphRange:":{"abs":"Stores the initial glyphs and glyph properties for a character range.","dec":"- (void)setGlyphs:(const CGGlyph *)glyphs properties:(const NSGlyphProperty *)props characterIndexes:(const NSUInteger *)charIndexes font:(UIFont *)aFont forGlyphRange:(NSRange)glyphRange"},"setLineFragmentRect:forGlyphRange:usedRect:":{"abs":"Associates the given line fragment bounds with the given range of glyphs.","dec":"- (void)setLineFragmentRect:(CGRect)fragmentRect forGlyphRange:(NSRange)glyphRange usedRect:(CGRect)usedRect"},"setLocation:forStartOfGlyphRange:":{"abs":"Sets the location for the first glyph of the given range.","dec":"- (void)setLocation:(CGPoint)location forStartOfGlyphRange:(NSRange)glyphRange"},"setNotShownAttribute:forGlyphAtIndex:":{"abs":"Sets the glyph at the given index to be one that isn’t shown.","dec":"- (void)setNotShownAttribute:(BOOL)flag forGlyphAtIndex:(NSUInteger)glyphIndex"},"setTextContainer:forGlyphRange:":{"abs":"Sets text container where the glyphs in the given range are laid out.","dec":"- (void)setTextContainer:(NSTextContainer *)container forGlyphRange:(NSRange)glyphRange"},"showCGGlyphs:positions:count:font:matrix:attributes:inContext:":{"abs":"Renders the glyphs at the specified positions and attributes into the given graphics context.","dec":"- (void)showCGGlyphs:(const CGGlyph *)glyphs positions:(const CGPoint *)positions count:(NSUInteger)glyphCount font:(UIFont *)font matrix:(CGAffineTransform)textMatrix attributes:(NSDictionary *)attributes inContext:(CGContextRef)graphicsContext"},"strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:":{"abs":"Calculates and draws strikethrough for the glyphs in the given range.","dec":"- (void)strikethroughGlyphRange:(NSRange)glyphRange strikethroughType:(NSUnderlineStyle)strikethroughVal lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin"},"textContainerChangedGeometry:":{"abs":"Invalidates the layout information, and possibly glyphs, for the given text container and all subsequent NSTextContainer objects.","dec":"- (void)textContainerChangedGeometry:(NSTextContainer *)container"},"textContainerForGlyphAtIndex:effectiveRange:":{"abs":"Returns the container in which the given glyph is laid out and (optionally) by reference the whole range of glyphs that are in that container.","dec":"- (NSTextContainer *)textContainerForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer)effectiveGlyphRange"},"truncatedGlyphRangeInLineFragmentForGlyphAtIndex:":{"abs":"Returns the range of truncated glyphs for a line fragment containing the specified index.","dec":"- (NSRange)truncatedGlyphRangeInLineFragmentForGlyphAtIndex:(NSUInteger)glyphIndex"},"underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:":{"abs":"Calculates subranges to be underlined for the glyphs in a given range and draws the underlining as appropriate.","dec":"- (void)underlineGlyphRange:(NSRange)glyphRange underlineType:(NSUnderlineStyle)underlineVal lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin"},"usedRectForTextContainer:":{"abs":"Returns the bounding rectangle for the glyphs laid out in the given text container.","dec":"- (CGRect)usedRectForTextContainer:(NSTextContainer *)container"}},"[=]":{"NSTextLayoutOrientationHorizontal":"","NSTextLayoutOrientationVertical":"","NSGlyphPropertyNull":"","NSGlyphPropertyControlCharacter":"","NSGlyphPropertyElastic":"","NSGlyphPropertyNonBaseCharacter":"","NSControlCharacterZeroAdvancementAction":"","NSControlCharacterWhitespaceAction":"","NSControlCharacterHorizontalTabAction":"","NSControlCharacterLineBreakAction":"","NSControlCharacterParagraphBreakAction":"","NSControlCharacterContainerBreakAction":""}};

ClassRef["NSLinguisticTagger"] = {"[:]":"NSObject","[+]":{"availableTagSchemesForLanguage:":{"abs":"Returns the tag schemes supported by the linguistic tagger for a particular language.","dec":"+ (NSArray *)availableTagSchemesForLanguage:(NSString *)language"}},"[-]":{"enumerateTagsInRange:scheme:options:usingBlock:":{"abs":"Enumerates the specific range of the string, providing the Block with the located tags.","dec":"- (void)enumerateTagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts usingBlock:(void (^)(NSString *tag, NSRange tokenRange, NSRange sentenceRange, BOOL *stop))block"},"initWithTagSchemes:options:":{"abs":"Creates a linguistic tagger instance using the specified tag schemes and options.","dec":"- (id)initWithTagSchemes:(NSArray *)tagSchemes options:(NSUInteger)opts"},"orthographyAtIndex:effectiveRange:":{"abs":"Returns the orthography at the index and also returns the effective range.","dec":"- (NSOrthography *)orthographyAtIndex:(NSUInteger)charIndex effectiveRange:(NSRangePointer)effectiveRange"},"possibleTagsAtIndex:scheme:tokenRange:sentenceRange:scores:":{"abs":"Returns an array of possible tags for the given scheme at the specified range, supplying matching scores.","dec":"- (NSArray *)possibleTagsAtIndex:(NSUInteger)charIndex scheme:(NSString *)tagScheme tokenRange:(NSRangePointer)tokenRange sentenceRange:(NSRangePointer)sentenceRange scores:(NSArray **)scores"},"sentenceRangeForRange:":{"abs":"Returns the range of a sentence boundary containing the specified range.","dec":"- (NSRange)sentenceRangeForRange:(NSRange)charRange"},"setOrthography:range:":{"abs":"Sets the orthography for the specified range.","dec":"- (void)setOrthography:(NSOrthography *)orthography range:(NSRange)charRange"},"setString:":{"abs":"Sets the string to be analyzed by the linguistic tagger.","dec":"- (void)setString:(NSString *)string"},"string":{"abs":"Returns the string being analyzed by the linguistic tagger.","dec":"- (NSString *)string"},"stringEditedInRange:changeInLength:":{"abs":"Notifies the linguistic tagger that the string (if mutable) has changed as specified by the parameters.","dec":"- (void)stringEditedInRange:(NSRange)newCharRange changeInLength:(NSInteger)delta"},"tagAtIndex:scheme:tokenRange:sentenceRange:":{"abs":"Returns a tag for a single scheme at the specified index.","dec":"- (NSString *)tagAtIndex:(NSUInteger)charIndex scheme:(NSString *)tagScheme tokenRange:(NSRangePointer)tokenRange sentenceRange:(NSRangePointer)sentenceRange"},"tagSchemes":{"abs":"Returns the tag schemes supported by the linguistic tagger for a particular language.","dec":"- (NSArray *)tagSchemes"},"tagsInRange:scheme:options:tokenRanges:":{"abs":"Returns an array of linguistic tags and token ranges.","dec":"- (NSArray *)tagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts tokenRanges:(NSArray **)tokenRanges"}},"[=]":{"NSLinguisticTaggerOmitWords":"","NSLinguisticTaggerOmitPunctuation":"","NSLinguisticTaggerOmitWhitespace":"","NSLinguisticTaggerOmitOther":"","NSLinguisticTaggerJoinNames":"","NSLinguisticTagSchemeTokenType":"","NSLinguisticTagSchemeLexicalClass":"","NSLinguisticTagSchemeNameType":"","NSLinguisticTagSchemeNameTypeOrLexicalClass":"","NSLinguisticTagSchemeLemma":"","NSLinguisticTagSchemeLanguage":"","NSLinguisticTagSchemeScript":"","NSLinguisticTagWord":"","NSLinguisticTagPunctuation":"","NSLinguisticTagWhitespace":"","NSLinguisticTagOther":"","NSLinguisticTagNoun":"","NSLinguisticTagVerb":"","NSLinguisticTagAdjective":"","NSLinguisticTagAdverb":"","NSLinguisticTagPronoun":"","NSLinguisticTagDeterminer":"","NSLinguisticTagParticle":"","NSLinguisticTagPreposition":"","NSLinguisticTagNumber":"","NSLinguisticTagConjunction":"","NSLinguisticTagInterjection":"","NSLinguisticTagClassifier":"","NSLinguisticTagIdiom":"","NSLinguisticTagOtherWord":"","NSLinguisticTagSentenceTerminator":"","NSLinguisticTagOpenQuote":"","NSLinguisticTagCloseQuote":"","NSLinguisticTagOpenParenthesis":"","NSLinguisticTagCloseParenthesis":"","NSLinguisticTagWordJoiner":"","NSLinguisticTagDash":"","NSLinguisticTagOtherPunctuation":"","NSLinguisticTagParagraphBreak":"","NSLinguisticTagOtherWhitespace":"","NSLinguisticTagPersonalName":"","NSLinguisticTagPlaceName":"","NSLinguisticTagOrganizationName":""}};

ClassRef["NSLocale"] = {"[:]":"NSObject","[+]":{"autoupdatingCurrentLocale":{"abs":"Returns the current logical locale for the current user.","dec":"+ (id)autoupdatingCurrentLocale"},"availableLocaleIdentifiers":{"abs":"Returns an array of NSString objects, each of which identifies a locale available on the system.","dec":"+ (NSArray *)availableLocaleIdentifiers"},"canonicalLanguageIdentifierFromString:":{"abs":"Returns a canonical language identifier by mapping an arbitrary locale identification string to the canonical identifier.","dec":"+ (NSString *)canonicalLanguageIdentifierFromString:(NSString *)string"},"canonicalLocaleIdentifierFromString:":{"abs":"Returns the canonical identifier for a given locale identification string.","dec":"+ (NSString *)canonicalLocaleIdentifierFromString:(NSString *)string"},"characterDirectionForLanguage:":{"abs":"Returns the character direction for the specified ISO language code.","dec":"+ (NSLocaleLanguageDirection)characterDirectionForLanguage:(NSString *)isoLangCode"},"commonISOCurrencyCodes":{"abs":"Returns an array of common ISO currency codes","dec":"+ (NSArray *)commonISOCurrencyCodes"},"componentsFromLocaleIdentifier:":{"abs":"Returns a dictionary that is the result of parsing a locale ID.","dec":"+ (NSDictionary *)componentsFromLocaleIdentifier:(NSString *)string"},"currentLocale":{"abs":"Returns the logical locale for the current user.","dec":"+ (id)currentLocale"},"ISOCountryCodes":{"abs":"Returns an array of NSString objects that represents all known legal country codes.","dec":"+ (NSArray *)ISOCountryCodes"},"ISOCurrencyCodes":{"abs":"Returns an array of NSString objects that represents all known legal ISO currency codes.","dec":"+ (NSArray *)ISOCurrencyCodes"},"ISOLanguageCodes":{"abs":"Returns an array of NSString objects that represents all known legal ISO language codes.","dec":"+ (NSArray *)ISOLanguageCodes"},"lineDirectionForLanguage:":{"abs":"Returns the line direction for the specified ISO language code.","dec":"+ (NSLocaleLanguageDirection)lineDirectionForLanguage:(NSString *)isoLangCode"},"localeIdentifierFromComponents:":{"abs":"Returns a locale identifier from the components specified in a given dictionary.","dec":"+ (NSString *)localeIdentifierFromComponents:(NSDictionary *)dict"},"localeIdentifierFromWindowsLocaleCode:":{"abs":"Returns a locale identifier from a Windows locale code.","dec":"+ (NSString *)localeIdentifierFromWindowsLocaleCode:(uint32_t)lcid"},"localeWithLocaleIdentifier:":{"abs":"Returns a locale initialized using the given locale identifier.","dec":"+ (instancetype)localeWithLocaleIdentifier:(NSString *)string"},"preferredLanguages":{"abs":"Returns the user's language preference order as an array of strings.","dec":"+ (NSArray *)preferredLanguages"},"systemLocale":{"abs":"Returns the “root”, canonical locale, that contains fixed “backstop” settings that provide values for otherwise undefined keys.","dec":"+ (id)systemLocale"},"windowsLocaleCodeFromLocaleIdentifier:":{"abs":"Returns a Window locale code from the locale identifier.","dec":"+ (uint32_t)windowsLocaleCodeFromLocaleIdentifier:(NSString *)localeIdentifier"}},"[-]":{"displayNameForKey:value:":{"abs":"Returns the display name for the given value.","dec":"- (NSString *)displayNameForKey:(id)key value:(id)value"},"initWithLocaleIdentifier:":{"abs":"Initializes the receiver using a given locale identifier.","dec":"- (instancetype)initWithLocaleIdentifier:(NSString *)string"},"localeIdentifier":{"abs":"Returns the identifier for the receiver.","dec":"- (NSString *)localeIdentifier"},"objectForKey:":{"abs":"Returns the object corresponding to the specified key.","dec":"- (id)objectForKey:(id)key"}},"[=]":{"NSLocaleLanguageDirectionUnknown":"","NSLocaleLanguageDirectionLeftToRight":"","NSLocaleLanguageDirectionRightToLeft":"","NSLocaleLanguageDirectionTopToBottom":"","NSLocaleLanguageDirectionBottomToTop":"","NSLocaleIdentifier":"","NSLocaleLanguageCode":"","NSLocaleCountryCode":"","NSLocaleScriptCode":"","NSLocaleVariantCode":"","NSLocaleExemplarCharacterSet":"","NSLocaleCalendar":"","NSLocaleCollationIdentifier":"","NSLocaleUsesMetricSystem":"","NSLocaleMeasurementSystem":"","NSLocaleDecimalSeparator":"","NSLocaleGroupingSeparator":"","NSLocaleCurrencySymbol":"","NSLocaleCurrencyCode":"","NSLocaleCollatorIdentifier":"","NSLocaleQuotationBeginDelimiterKey":"","NSLocaleQuotationEndDelimiterKey":"","NSLocaleAlternateQuotationBeginDelimiterKey":"","NSLocaleAlternateQuotationEndDelimiterKey":"","NSGregorianCalendar":"","NSBuddhistCalendar":"","NSChineseCalendar":"","NSHebrewCalendar":"","NSIslamicCalendar":"","NSIslamicCivilCalendar":"","NSJapaneseCalendar":"","NSRepublicOfChinaCalendar":"","NSPersianCalendar":"","NSIndianCalendar":"","NSISO8601Calendar":""}};

ClassRef["NSLock"] = {"[:]":"NSObject","[-]":{"lockBeforeDate:":{"abs":"Attempts to acquire a lock before a given time and returns a Boolean value indicating whether the attempt was successful.","dec":"- (BOOL)lockBeforeDate:(NSDate *)limit"},"name":{"abs":"Returns the name associated with the receiver.","dec":"- (NSString *)name"},"setName:":{"abs":"Assigns a name to the receiver.","dec":"- (void)setName:(NSString *)newName"},"tryLock":{"abs":"Attempts to acquire a lock and immediately returns a Boolean value that indicates whether the attempt was successful.","dec":"- (BOOL)tryLock"}}};

ClassRef["NSMachPort"] = {"[:]":"NSPort : NSObject","[+]":{"portWithMachPort:":{"abs":"Creates and returns a port object configured with the given Mach port.","dec":"+ (NSPort *)portWithMachPort:(uint32_t)machPort"},"portWithMachPort:options:":{"abs":"Creates and returns a port object configured with the specified options and the given Mach port.","dec":"+ (NSPort *)portWithMachPort:(uint32_t)machPort options:(NSUInteger)options"}},"[-]":{"delegate":{"abs":"Returns the receiver’s delegate.","dec":"- (id < NSMachPortDelegate >)delegate"},"initWithMachPort:":{"abs":"Initializes a newly allocated NSMachPort object with a given Mach port.","dec":"- (id)initWithMachPort:(uint32_t)machPort"},"initWithMachPort:options:":{"abs":"Initializes a newly allocated NSMachPort object with a given Mach port and the specified options.","dec":"- (id)initWithMachPort:(uint32_t)machPort options:(NSUInteger)options"},"machPort":{"abs":"Returns as an int the Mach port used by the receiver.","dec":"- (uint32_t)machPort"},"removeFromRunLoop:forMode:":{"abs":"Removes the receiver from the run loop mode mode of runLoop.","dec":"- (void)removeFromRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode"},"scheduleInRunLoop:forMode:":{"abs":"Schedules the receiver into the run loop mode mode of runLoop.","dec":"- (void)scheduleInRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode"},"setDelegate:":{"abs":"Sets the receiver’s delegate to a given object.","dec":"- (void)setDelegate:(id < NSMachPortDelegate >)anObject"}},"[=]":{"NSMachPortDeallocateNone":"","NSMachPortDeallocateSendRight":"","NSMachPortDeallocateReceiveRight":""}};

ClassRef["NSMapTable"] = {"[:]":"NSObject","[+]":{"mapTableWithKeyOptions:valueOptions:":{"abs":"Returns a new map table, initialized with the given options","dec":"+ (id)mapTableWithKeyOptions:(NSPointerFunctionsOptions)keyOptions valueOptions:(NSPointerFunctionsOptions)valueOptions"},"strongToStrongObjectsMapTable":{"abs":"Returns a new map table object which has strong references to the keys and values.","dec":"+ (id)strongToStrongObjectsMapTable"},"strongToWeakObjectsMapTable":{"abs":"Returns a new map table object which has strong references to the keys and weak references to the values.","dec":"+ (id)strongToWeakObjectsMapTable"},"weakToStrongObjectsMapTable":{"abs":"Returns a new map table object which has weak references to the keys and strong references to the values.","dec":"+ (id)weakToStrongObjectsMapTable"},"weakToWeakObjectsMapTable":{"abs":"Returns a new map table object which has weak references to the keys and values.","dec":"+ (id)weakToWeakObjectsMapTable"}},"[-]":{"count":{"abs":"Returns the number of key-value pairs in the map table.","dec":"- (NSUInteger)count"},"dictionaryRepresentation":{"abs":"Returns a dictionary representation of the map table.","dec":"- (NSDictionary *)dictionaryRepresentation"},"initWithKeyOptions:valueOptions:capacity:":{"abs":"Returns a map table, initialized with the given options.","dec":"- (id)initWithKeyOptions:(NSPointerFunctionsOptions)keys valueOptions:(NSPointerFunctionsOptions)values capacity:(NSUInteger)capacity"},"initWithKeyPointerFunctions:valuePointerFunctions:capacity:":{"abs":"Returns a map table, initialized with the given functions.","dec":"- (id)initWithKeyPointerFunctions:(NSPointerFunctions *)keyFunctions valuePointerFunctions:(NSPointerFunctions *)valueFunctions capacity:(NSUInteger)initialCapacity"},"keyEnumerator":{"abs":"Returns an enumerator object that lets you access each key in the map table.","dec":"- (NSEnumerator *)keyEnumerator"},"keyPointerFunctions":{"abs":"Returns the pointer functions the map table uses to manage keys.","dec":"- (NSPointerFunctions *)keyPointerFunctions"},"objectEnumerator":{"abs":"Returns an enumerator object that lets you access each value in the map table.","dec":"- (NSEnumerator *)objectEnumerator"},"objectForKey:":{"abs":"Returns a the value associated with a given key.","dec":"- (id)objectForKey:(id)aKey"},"removeAllObjects":{"abs":"Empties the map table of its entries.","dec":"- (void)removeAllObjects"},"removeObjectForKey:":{"abs":"Removes a given key and its associated value from the map table.","dec":"- (void)removeObjectForKey:(id)aKey"},"setObject:forKey:":{"abs":"Adds a given key-value pair to the map table.","dec":"- (void)setObject:(id)anObject forKey:(id)aKey"},"valuePointerFunctions":{"abs":"Returns the pointer functions the map table uses to manage values.","dec":"- (NSPointerFunctions *)valuePointerFunctions"}},"[=]":{"NSMapTableStrongMemory":"","NSMapTableCopyIn":"","NSMapTableObjectPointerPersonality":"","NSMapTableWeakMemory":""}};

ClassRef["NSMessagePort"] = {"[:]":"NSPort : NSObject"};

ClassRef["NSMetadataItem"] = {"[:]":"NSObject","[-]":{"attributes":{"abs":"Returns an array containing the attribute names of the receiver’s values.","dec":"- (NSArray *)attributes"},"valueForAttribute:":{"abs":"Returns the receiver’s metadata attribute name specified by a given key.","dec":"- (id)valueForAttribute:(NSString *)key"},"valuesForAttributes:":{"abs":"Returns a dictionary containing the key-value pairs for the attribute names specified by a given array of keys.","dec":"- (NSDictionary *)valuesForAttributes:(NSArray *)keys"}},"[=]":{"NSMetadataItemFSNameKey":"","NSMetadataItemDisplayNameKey":"","NSMetadataItemURLKey":"","NSMetadataItemPathKey":"","NSMetadataItemFSSizeKey":"","NSMetadataItemFSCreationDateKey":"","NSMetadataItemFSContentChangeDateKey":"","NSMetadataItemIsUbiquitousKey":"","NSMetadataUbiquitousItemHasUnresolvedConflictsKey":"","NSMetadataUbiquitousItemIsDownloadedKey":"","NSMetadataUbiquitousItemIsDownloadingKey":"","NSMetadataUbiquitousItemIsUploadedKey":"","NSMetadataUbiquitousItemIsUploadingKey":"","NSMetadataUbiquitousItemPercentDownloadedKey":"","NSMetadataUbiquitousItemPercentUploadedKey":"","NSMetadataUbiquitousItemDownloadingStatusKey":"","NSMetadataUbiquitousItemDownloadingErrorKey":"","NSMetadataUbiquitousItemUploadingErrorKey":"","NSMetadataUbiquitousItemDownloadingStatusCurrent":"","NSMetadataUbiquitousItemDownloadingStatusDownloaded":"","NSMetadataUbiquitousItemDownloadingStatusNotDownloaded":""}};

ClassRef["NSMetadataQuery"] = {"[:]":"NSObject","[-]":{"delegate":{"abs":"Returns the receiver’s delegate.","dec":"- (id<NSMetadataQueryDelegate>)delegate"},"disableUpdates":{"abs":"Disables updates to the query results.","dec":"- (void)disableUpdates"},"enableUpdates":{"abs":"Enables updates to the query results.","dec":"- (void)enableUpdates"},"enumerateResultsUsingBlock:":{"abs":"Enumerates the current set of results using the given block.","dec":"- (void)enumerateResultsUsingBlock:(void (^)(id result, NSUInteger idx, BOOL *stop))block"},"enumerateResultsWithOptions:usingBlock:":{"abs":"Enumerates the current set of results using the given options and block.","dec":"- (void)enumerateResultsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id result, NSUInteger idx, BOOL *stop))block"},"groupedResults":{"abs":"Returns an array containing hierarchical groups of query results based on the receiver’s grouping attributes.","dec":"- (NSArray *)groupedResults"},"groupingAttributes":{"abs":"Returns the receiver’s grouping attributes.","dec":"- (NSArray *)groupingAttributes"},"indexOfResult:":{"abs":"Returns the index of a query result object in the receiver’s results array.","dec":"- (NSUInteger)indexOfResult:(id)result"},"init":{"abs":"Initializes an allocated NSMetadataQuery object.","dec":"- (id)init"},"isGathering":{"abs":"Returns a Boolean value that indicates whether the receiver is in the initial gathering phase of the query.","dec":"- (BOOL)isGathering"},"isStarted":{"abs":"Returns a Boolean value that indicates whether the receiver has started the query.","dec":"- (BOOL)isStarted"},"isStopped":{"abs":"Returns a Boolean value that indicates whether the receiver has stopped the query.","dec":"- (BOOL)isStopped"},"notificationBatchingInterval":{"abs":"Returns the interval that the receiver provides notification of updated query results.","dec":"- (NSTimeInterval)notificationBatchingInterval"},"operationQueue":{"abs":"The queue on which query result notifications will be posted.","dec":"- (NSOperationQueue *)operationQueue"},"predicate":{"abs":"Returns the predicate the receiver uses to filter query results.","dec":"- (NSPredicate *)predicate"},"resultAtIndex:":{"abs":"Returns the query result at a specific index.","dec":"- (id)resultAtIndex:(NSUInteger)index"},"resultCount":{"abs":"Returns the number of results returned by the receiver.","dec":"- (NSUInteger)resultCount"},"results":{"abs":"Returns an array containing the result objects for the receiver.","dec":"- (NSArray *)results"},"searchItems":{"abs":"The array of items to which a search is scoped.","dec":"- (NSArray *)searchItems"},"searchScopes":{"abs":"Returns an array containing the receiver’s search scopes.","dec":"- (NSArray *)searchScopes"},"setDelegate:":{"abs":"Sets the receiver’s delegate","dec":"- (void)setDelegate:(id<NSMetadataQueryDelegate>)delegate"},"setGroupingAttributes:":{"abs":"Sets the receiver’s grouping attributes to specific attribute names.","dec":"- (void)setGroupingAttributes:(NSArray *)attributes"},"setNotificationBatchingInterval:":{"abs":"Sets the interval between update notifications sent by the receiver.","dec":"- (void)setNotificationBatchingInterval:(NSTimeInterval)timeInterval"},"setOperationQueue:":{"abs":"Sets the queue on which query result notifications will be posted to the given queue.","dec":"- (void)setOperationQueue:(NSOperationQueue *)operationQueue"},"setPredicate:":{"abs":"Sets the predicate used by the receiver to filter the query results.","dec":"- (void)setPredicate:(NSPredicate *)predicate"},"setSearchItems:":{"abs":"Scopes the search to the given array of items.","dec":"- (void)setSearchItems:(NSArray *)items"},"setSearchScopes:":{"abs":"Restrict the search scope of the receiver.","dec":"- (void)setSearchScopes:(NSArray *)scopes"},"setSortDescriptors:":{"abs":"Sets the sort descriptors to be used by the receiver.","dec":"- (void)setSortDescriptors:(NSArray *)descriptors"},"setValueListAttributes:":{"abs":"Sets the value list attributes for the receiver to the specific attribute names.","dec":"- (void)setValueListAttributes:(NSArray *)attributes"},"sortDescriptors":{"abs":"Returns an array containing the receiver’s sort descriptors.","dec":"- (NSArray *)sortDescriptors"},"startQuery":{"abs":"Attempts to start the query.","dec":"- (BOOL)startQuery"},"stopQuery":{"abs":"Stops the receiver’s current query from gathering any further results.","dec":"- (void)stopQuery"},"valueListAttributes":{"abs":"Returns an array containing the value list attributes the receiver generates.","dec":"- (NSArray *)valueListAttributes"},"valueLists":{"abs":"Returns a dictionary containing the value lists generated by the receiver.","dec":"- (NSDictionary *)valueLists"},"valueOfAttribute:forResultAtIndex:":{"abs":"Returns the value for the attribute name attrName at the index in the results specified by idx.","dec":"- (id)valueOfAttribute:(NSString *)attributeName forResultAtIndex:(NSUInteger)index"}},"[=]":{"NSMetadataQueryUbiquitousDocumentsScope":"","NSMetadataQueryUbiquitousDataScope":"","NSMetadataQueryResultContentRelevanceAttribute":"","NSMetadataQueryUpdateAddedItemsKey":"","NSMetadataQueryUpdateChangedItemsKey":"","NSMetadataQueryUpdateRemovedItemsKey":""}};

ClassRef["NSMetadataQueryAttributeValueTuple"] = {"[:]":"NSObject","[-]":{"attribute":{"abs":"Returns the receiver’s attribute name.","dec":"- (NSString *)attribute"},"count":{"abs":"Returns the number of instances of the value that exist for the attribute name of the receiver.","dec":"- (NSUInteger)count"},"value":{"abs":"Returns the receiver’s attribute value.","dec":"- (id)value"}}};

ClassRef["NSMetadataQueryResultGroup"] = {"[:]":"NSObject","[-]":{"attribute":{"abs":"Returns the attribute name for the receiver’s result group.","dec":"- (NSString *)attribute"},"resultAtIndex:":{"abs":"Returns the query result at a specific index.","dec":"- (id)resultAtIndex:(NSUInteger)index"},"resultCount":{"abs":"Returns the number of results returned by the receiver.","dec":"- (NSUInteger)resultCount"},"results":{"abs":"Returns an array containing the result objects for the receiver.","dec":"- (NSArray *)results"},"subgroups":{"abs":"Returns an array containing the subgroups of the receiver.","dec":"- (NSArray *)subgroups"},"value":{"abs":"Returns the value of the attribute name for the receiver.","dec":"- (id)value"}}};

ClassRef["NSMethodSignature"] = {"[:]":"NSObject","[+]":{"signatureWithObjCTypes:":{"abs":"Returns an NSMethodSignature object for the given Objective C method type string.","dec":"+ (NSMethodSignature *)signatureWithObjCTypes:(const char *)types"}},"[-]":{"frameLength":{"abs":"Returns the number of bytes that the arguments, taken together, occupy on the stack.","dec":"- (NSUInteger)frameLength"},"getArgumentTypeAtIndex:":{"abs":"Returns the type encoding for the argument at a given index.","dec":"- (const char *)getArgumentTypeAtIndex:(NSUInteger)index"},"isOneway":{"abs":"Returns a Boolean value that indicates whether the receiver is asynchronous when invoked through distributed objects.","dec":"- (BOOL)isOneway"},"methodReturnLength":{"abs":"Returns the number of bytes required for the return value.","dec":"- (NSUInteger)methodReturnLength"},"methodReturnType":{"abs":"Returns a C string encoding the return type of the method in Objective-C type encoding.","dec":"- (const char *)methodReturnType"},"numberOfArguments":{"abs":"Returns the number of arguments recorded in the receiver.","dec":"- (NSUInteger)numberOfArguments"}}};

ClassRef["NSMutableArray"] = {"[:]":"NSArray : NSObject","[+]":{"arrayWithCapacity:":{"abs":"Creates and returns an NSMutableArray object with enough allocated memory to initially hold a given number of objects.","dec":"+ (instancetype)arrayWithCapacity:(NSUInteger)numItems"}},"[-]":{"addObject:":{"abs":"Inserts a given object at the end of the array.","dec":"- (void)addObject:(id)anObject"},"addObjectsFromArray:":{"abs":"Adds the objects contained in another given array to the end of the receiving array’s content.","dec":"- (void)addObjectsFromArray:(NSArray *)otherArray"},"exchangeObjectAtIndex:withObjectAtIndex:":{"abs":"Exchanges the objects in the array at given indices.","dec":"- (void)exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2"},"filterUsingPredicate:":{"abs":"Evaluates a given predicate against the array’s content and leaves only objects that match","dec":"- (void)filterUsingPredicate:(NSPredicate *)predicate"},"init":{"abs":"Initializes a newly allocated array.","dec":"- (instancetype)init"},"initWithCapacity:":{"abs":"Returns an array, initialized with enough memory to initially hold a given number of objects.","dec":"- (instancetype)initWithCapacity:(NSUInteger)numItems"},"insertObject:atIndex:":{"abs":"Inserts a given object into the array's contents at a given index.","dec":"- (void)insertObject:(id)anObject atIndex:(NSUInteger)index"},"insertObjects:atIndexes:":{"abs":"Inserts the objects in the provided array into the receiving array at the specified indexes.","dec":"- (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes"},"removeAllObjects":{"abs":"Empties the array of all its elements.","dec":"- (void)removeAllObjects"},"removeLastObject":{"abs":"Removes the object with the highest-valued index in the array","dec":"- (void)removeLastObject"},"removeObject:":{"abs":"Removes all occurrences in the array of a given object.","dec":"- (void)removeObject:(id)anObject"},"removeObject:inRange:":{"abs":"Removes all occurrences within a specified range in the array of a given object.","dec":"- (void)removeObject:(id)anObject inRange:(NSRange)aRange"},"removeObjectAtIndex:":{"abs":"Removes the object at index .","dec":"- (void)removeObjectAtIndex:(NSUInteger)index"},"removeObjectIdenticalTo:":{"abs":"Removes all occurrences of a given object in the array.","dec":"- (void)removeObjectIdenticalTo:(id)anObject"},"removeObjectIdenticalTo:inRange:":{"abs":"Removes all occurrences of anObject within the specified range in the array.","dec":"- (void)removeObjectIdenticalTo:(id)anObject inRange:(NSRange)aRange"},"removeObjectsAtIndexes:":{"abs":"Removes the objects at the specified indexes from the array.","dec":"- (void)removeObjectsAtIndexes:(NSIndexSet *)indexes"},"removeObjectsInArray:":{"abs":"Removes from the receiving array the objects in another given array.","dec":"- (void)removeObjectsInArray:(NSArray *)otherArray"},"removeObjectsInRange:":{"abs":"Removes from the array each of the objects within a given range.","dec":"- (void)removeObjectsInRange:(NSRange)aRange"},"replaceObjectAtIndex:withObject:":{"abs":"Replaces the object at index with anObject.","dec":"- (void)replaceObjectAtIndex:(NSUInteger)index withObject:(id)anObject"},"replaceObjectsAtIndexes:withObjects:":{"abs":"Replaces the objects in the receiving array at specified locations specified with the objects from a given array.","dec":"- (void)replaceObjectsAtIndexes:(NSIndexSet *)indexes withObjects:(NSArray *)objects"},"replaceObjectsInRange:withObjectsFromArray:":{"abs":"Replaces the objects in the receiving array specified by a given range with all of the objects from a given array.","dec":"- (void)replaceObjectsInRange:(NSRange)aRange withObjectsFromArray:(NSArray *)otherArray"},"replaceObjectsInRange:withObjectsFromArray:range:":{"abs":"Replaces the objects in the receiving array specified by one given range with the objects in another array specified by another range.","dec":"- (void)replaceObjectsInRange:(NSRange)aRange withObjectsFromArray:(NSArray *)otherArray range:(NSRange)otherRange"},"setArray:":{"abs":"Sets the receiving array’s elements to those in another given array.","dec":"- (void)setArray:(NSArray *)otherArray"},"setObject:atIndexedSubscript:":{"abs":"Replaces the object at the index with the new object, possibly adding the object.","dec":"- (void)setObject:(id)anObject atIndexedSubscript:(NSUInteger)index"},"sortUsingComparator:":{"abs":"Sorts the array using the comparison method specified by a given NSComparator Block.","dec":"- (void)sortUsingComparator:(NSComparator)cmptr"},"sortUsingDescriptors:":{"abs":"Sorts the receiving array using a given array of sort descriptors.","dec":"- (void)sortUsingDescriptors:(NSArray *)sortDescriptors"},"sortUsingFunction:context:":{"abs":"Sorts the array’s elements in ascending order as defined by the comparison function compare.","dec":"- (void)sortUsingFunction:(NSInteger (*)(id, id, void *))compare context:(void *)context"},"sortUsingSelector:":{"abs":"Sorts the array’s elements in ascending order, as determined by the comparison method specified by a given selector.","dec":"- (void)sortUsingSelector:(SEL)comparator"},"sortWithOptions:usingComparator:":{"abs":"Sorts the array using the specified options and the comparison method specified by a given NSComparator Block.","dec":"- (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr"}}};

ClassRef["NSMutableAttributedString UIKit Additions"] = {"[:]":"NSAttributedString : NSObject","[-]":{"fixAttributesInRange:":{"abs":"Cleans up font, paragraph style, and attachment attributes within the given range.","dec":"- (void)fixAttributesInRange:(NSRange)range"},"readFromData:options:documentAttributes:error:":{"abs":"Sets the contents of the receiver from the stream of the given data object.","dec":"- (BOOL)readFromData:(NSData *)data options:(NSDictionary *)opts documentAttributes:(NSDictionary **)dict error:(NSError **)error"},"readFromFileURL:options:documentAttributes:error:":{"abs":"Sets the contents of the receiver from the file at the given URL.","dec":"- (BOOL)readFromFileURL:(NSURL *)url options:(NSDictionary *)opts documentAttributes:(NSDictionary **)dict error:(NSError **)error"}}};

ClassRef["NSMutableAttributedString"] = {"[:]":"NSAttributedString : NSObject","[-]":{"addAttribute:value:range:":{"abs":"Adds an attribute with the given name and value to the characters in the specified range.","dec":"- (void)addAttribute:(NSString *)name value:(id)value range:(NSRange)aRange"},"addAttributes:range:":{"abs":"Adds the given collection of attributes to the characters in the specified range.","dec":"- (void)addAttributes:(NSDictionary *)attributes range:(NSRange)aRange"},"appendAttributedString:":{"abs":"Adds the characters and attributes of a given attributed string to the end of the receiver.","dec":"- (void)appendAttributedString:(NSAttributedString *)attributedString"},"beginEditing":{"abs":"Overridden by subclasses to buffer or optimize a series of changes to the receiver’s characters or attributes, until it receives a matching endEditing message, upon which it can consolidate changes and notify any observers that it has changed.","dec":"- (void)beginEditing"},"deleteCharactersInRange:":{"abs":"Deletes the characters in the given range along with their associated attributes.","dec":"- (void)deleteCharactersInRange:(NSRange)aRange"},"endEditing":{"abs":"Overridden by subclasses to consolidate changes made since a previous beginEditing message and to notify any observers of the changes.","dec":"- (void)endEditing"},"insertAttributedString:atIndex:":{"abs":"Inserts the characters and attributes of the given attributed string into the receiver at the given index.","dec":"- (void)insertAttributedString:(NSAttributedString *)attributedString atIndex:(NSUInteger)index"},"mutableString":{"abs":"Returns the character contents of the receiver as an NSMutableString object.","dec":"- (NSMutableString *)mutableString"},"removeAttribute:range:":{"abs":"Removes the named attribute from the characters in the specified range.","dec":"- (void)removeAttribute:(NSString *)name range:(NSRange)aRange"},"replaceCharactersInRange:withAttributedString:":{"abs":"Replaces the characters and attributes in a given range with the characters and attributes of the given attributed string.","dec":"- (void)replaceCharactersInRange:(NSRange)aRange withAttributedString:(NSAttributedString *)attributedString"},"replaceCharactersInRange:withString:":{"abs":"Replaces the characters in the given range with the characters of the given string.","dec":"- (void)replaceCharactersInRange:(NSRange)aRange withString:(NSString *)aString"},"setAttributedString:":{"abs":"Replaces the receiver’s entire contents with the characters and attributes of the given attributed string.","dec":"- (void)setAttributedString:(NSAttributedString *)attributedString"},"setAttributes:range:":{"abs":"Sets the attributes for the characters in the specified range to the specified attributes.","dec":"- (void)setAttributes:(NSDictionary *)attributes range:(NSRange)aRange"}}};

ClassRef["NSMutableCharacterSet"] = {"[:]":"NSCharacterSet : NSObject","[-]":{"addCharactersInRange:":{"abs":"Adds to the receiver the characters whose Unicode values are in a given range.","dec":"- (void)addCharactersInRange:(NSRange)aRange"},"addCharactersInString:":{"abs":"Adds to the receiver the characters in a given string.","dec":"- (void)addCharactersInString:(NSString *)aString"},"formIntersectionWithCharacterSet:":{"abs":"Modifies the receiver so it contains only characters that exist in both the receiver and otherSet.","dec":"- (void)formIntersectionWithCharacterSet:(NSCharacterSet *)otherSet"},"formUnionWithCharacterSet:":{"abs":"Modifies the receiver so it contains all characters that exist in either the receiver or otherSet.","dec":"- (void)formUnionWithCharacterSet:(NSCharacterSet *)otherSet"},"invert":{"abs":"Replaces all the characters in the receiver with all the characters it didn’t previously contain.","dec":"- (void)invert"},"removeCharactersInRange:":{"abs":"Removes from the receiver the characters whose Unicode values are in a given range.","dec":"- (void)removeCharactersInRange:(NSRange)aRange"},"removeCharactersInString:":{"abs":"Removes from the receiver the characters in a given string.","dec":"- (void)removeCharactersInString:(NSString *)aString"}}};

ClassRef["NSMutableData"] = {"[:]":"NSData : NSObject","[+]":{"dataWithCapacity:":{"abs":"Creates and returns an NSMutableData object capable of holding the specified number of bytes.","dec":"+ (id)dataWithCapacity:(NSUInteger)aNumItems"},"dataWithLength:":{"abs":"Creates and returns an NSMutableData object containing a given number of zeroed bytes.","dec":"+ (id)dataWithLength:(NSUInteger)length"}},"[-]":{"appendBytes:length:":{"abs":"Appends to the receiver a given number of bytes from a given buffer.","dec":"- (void)appendBytes:(const void *)bytes length:(NSUInteger)length"},"appendData:":{"abs":"Appends the content of another NSData object to the receiver.","dec":"- (void)appendData:(NSData *)otherData"},"increaseLengthBy:":{"abs":"Increases the length of the receiver by a given number of bytes.","dec":"- (void)increaseLengthBy:(NSUInteger)extraLength"},"initWithCapacity:":{"abs":"Returns an initialized NSMutableData object capable of holding the specified number of bytes.","dec":"- (id)initWithCapacity:(NSUInteger)capacity"},"initWithLength:":{"abs":"Initializes and returns an NSMutableData object containing a given number of zeroed bytes.","dec":"- (id)initWithLength:(NSUInteger)length"},"mutableBytes":{"abs":"Returns a pointer to the receiver’s data.","dec":"- (void *)mutableBytes"},"replaceBytesInRange:withBytes:":{"abs":"Replaces with a given set of bytes a given range within the contents of the receiver.","dec":"- (void)replaceBytesInRange:(NSRange)range withBytes:(const void *)bytes"},"replaceBytesInRange:withBytes:length:":{"abs":"Replaces with a given set of bytes a given range within the contents of the receiver.","dec":"- (void)replaceBytesInRange:(NSRange)range withBytes:(const void *)replacementBytes length:(NSUInteger)replacementLength"},"resetBytesInRange:":{"abs":"Replaces with zeroes the contents of the receiver in a given range.","dec":"- (void)resetBytesInRange:(NSRange)range"},"setData:":{"abs":"Replaces the entire contents of the receiver with the contents of another data object.","dec":"- (void)setData:(NSData *)aData"},"setLength:":{"abs":"Extends or truncates a mutable data object to a given length.","dec":"- (void)setLength:(NSUInteger)length"}}};

ClassRef["NSMutableDictionary"] = {"[:]":"NSDictionary : NSObject","[+]":{"dictionaryWithCapacity:":{"abs":"Creates and returns a mutable dictionary, initially giving it enough allocated memory to hold a given number of entries.","dec":"+ (instancetype)dictionaryWithCapacity:(NSUInteger)numItems"},"dictionaryWithSharedKeySet:":{"abs":"Creates a mutable dictionary which is optimized for dealing with a known set of keys.","dec":"+ (id)dictionaryWithSharedKeySet:(id)keyset"}},"[-]":{"addEntriesFromDictionary:":{"abs":"Adds to the receiving dictionary the entries from another dictionary.","dec":"- (void)addEntriesFromDictionary:(NSDictionary *)otherDictionary"},"init":{"abs":"Initializes a newly allocated mutable dictionary.","dec":"- (instancetype)init"},"initWithCapacity:":{"abs":"Initializes a newly allocated mutable dictionary, allocating enough memory to hold numItems entries.","dec":"- (instancetype)initWithCapacity:(NSUInteger)numItems"},"removeAllObjects":{"abs":"Empties the dictionary of its entries.","dec":"- (void)removeAllObjects"},"removeObjectForKey:":{"abs":"Removes a given key and its associated value from the dictionary.","dec":"- (void)removeObjectForKey:(id)aKey"},"removeObjectsForKeys:":{"abs":"Removes from the dictionary entries specified by elements in a given array.","dec":"- (void)removeObjectsForKeys:(NSArray *)keyArray"},"setDictionary:":{"abs":"Sets the contents of the receiving dictionary to entries in a given dictionary.","dec":"- (void)setDictionary:(NSDictionary *)otherDictionary"},"setObject:forKey:":{"abs":"Adds a given key-value pair to the dictionary.","dec":"- (void)setObject:(id)anObject forKey:(id < NSCopying >)aKey"},"setObject:forKeyedSubscript:":{"abs":"Adds a given key-value pair to the dictionary.","dec":"- (void)setObject:(id)object forKeyedSubscript:(id < NSCopying >)aKey"},"setValue:forKey:":{"abs":"Adds a given key-value pair to the dictionary.","dec":"- (void)setValue:(id)value forKey:(NSString *)key"}}};

ClassRef["NSMutableIndexSet"] = {"[:]":"NSIndexSet : NSObject","[-]":{"addIndex:":{"abs":"Adds an index to the receiver.","dec":"- (void)addIndex:(NSUInteger)index"},"addIndexes:":{"abs":"Adds the indexes in an index set to the receiver.","dec":"- (void)addIndexes:(NSIndexSet *)indexSet"},"addIndexesInRange:":{"abs":"Adds the indexes in an index range to the receiver.","dec":"- (void)addIndexesInRange:(NSRange)indexRange"},"removeAllIndexes":{"abs":"Removes the receiver’s indexes.","dec":"- (void)removeAllIndexes"},"removeIndex:":{"abs":"Removes an index from the receiver.","dec":"- (void)removeIndex:(NSUInteger)index"},"removeIndexes:":{"abs":"Removes the indexes in an index set from the receiver.","dec":"- (void)removeIndexes:(NSIndexSet *)indexSet"},"removeIndexesInRange:":{"abs":"Removes the indexes in an index range from the receiver.","dec":"- (void)removeIndexesInRange:(NSRange)indexRange"},"shiftIndexesStartingAtIndex:by:":{"abs":"Shifts a group of indexes to the left or the right within the receiver.","dec":"- (void)shiftIndexesStartingAtIndex:(NSUInteger)startIndex by:(NSInteger)delta"}}};

ClassRef["NSMutableOrderedSet"] = {"[:]":"NSOrderedSet : NSObject","[+]":{"orderedSetWithCapacity:":{"abs":"Creates and returns an mutable ordered set with a given initial capacity.","dec":"+ (instancetype)orderedSetWithCapacity:(NSUInteger)numItems"}},"[-]":{"addObject:":{"abs":"Appends a given object to the mutable ordered set, if it is not already a member.","dec":"- (void)addObject:(id)object"},"addObjects:count:":{"abs":"Appends the given number of objects from a given C array.","dec":"- (void)addObjects:(const id [])objects count:(NSUInteger)count"},"addObjectsFromArray:":{"abs":"Appends to the mutable ordered set each object contained in a given array that is not already a member.","dec":"- (void)addObjectsFromArray:(NSArray *)array"},"exchangeObjectAtIndex:withObjectAtIndex:":{"abs":"Exchanges the object at the specified index with the object at the other index.","dec":"- (void)exchangeObjectAtIndex:(NSUInteger)idx1 withObjectAtIndex:(NSUInteger)idx2"},"filterUsingPredicate:":{"abs":"Evaluates a given predicate against the mutable ordered set’s content and leaves only objects that match.","dec":"- (void)filterUsingPredicate:(NSPredicate *)predicate"},"init":{"abs":"Initializes a newly allocated mutable ordered set.","dec":"- (instancetype)init"},"initWithCapacity:":{"abs":"Returns an initialized mutable ordered set with a given initial capacity.","dec":"- (instancetype)initWithCapacity:(NSUInteger)numItems"},"insertObject:atIndex:":{"abs":"Inserts the given object at the specified index of the mutable ordered set.","dec":"- (void)insertObject:(id)object atIndex:(NSUInteger)idx"},"insertObjects:atIndexes:":{"abs":"Inserts the objects in the array at the specified indexes.","dec":"- (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes"},"intersectOrderedSet:":{"abs":"Removes from the receiving ordered set each object that isn’t a member of another ordered set.","dec":"- (void)intersectOrderedSet:(NSOrderedSet *)other"},"intersectSet:":{"abs":"Removes from the receiving ordered set each object that isn’t a member of another set.","dec":"- (void)intersectSet:(NSSet *)other"},"minusOrderedSet:":{"abs":"Removes each object in another given ordered set from the receiving mutable ordered set, if present.","dec":"- (void)minusOrderedSet:(NSOrderedSet *)other"},"minusSet:":{"abs":"Removes each object in another given set from the receiving mutable ordered set, if present.","dec":"- (void)minusSet:(NSSet *)other"},"moveObjectsAtIndexes:toIndex:":{"abs":"Moves the objects at the specified indexes to the new location.","dec":"- (void)moveObjectsAtIndexes:(NSIndexSet *)indexes toIndex:(NSUInteger)idx"},"removeAllObjects":{"abs":"Removes all the objects from the mutable ordered set.","dec":"- (void)removeAllObjects"},"removeObject:":{"abs":"Removes a given object from the mutable ordered set.","dec":"- (void)removeObject:(id)object"},"removeObjectAtIndex:":{"abs":"Removes a the object at the specified index from the mutable ordered set.","dec":"- (void)removeObjectAtIndex:(NSUInteger)idx"},"removeObjectsAtIndexes:":{"abs":"Removes the objects at the specified indexes from the mutable ordered set.","dec":"- (void)removeObjectsAtIndexes:(NSIndexSet *)indexes"},"removeObjectsInArray:":{"abs":"Removes the objects in the array from the mutable ordered set.","dec":"- (void)removeObjectsInArray:(NSArray *)array"},"removeObjectsInRange:":{"abs":"Removes from the mutable ordered set each of the objects within a given range.","dec":"- (void)removeObjectsInRange:(NSRange)range"},"replaceObjectAtIndex:withObject:":{"abs":"Replaces the object at the specified index with the new object.","dec":"- (void)replaceObjectAtIndex:(NSUInteger)idx withObject:(id)object"},"replaceObjectsAtIndexes:withObjects:":{"abs":"Replaces the objects at the specified indexes with the new objects.","dec":"- (void)replaceObjectsAtIndexes:(NSIndexSet *)indexes withObjects:(NSArray *)objects"},"replaceObjectsInRange:withObjects:count:":{"abs":"Replaces the objects in the receiving mutable ordered set at the range with the specified number of objects from a given C array.","dec":"- (void)replaceObjectsInRange:(NSRange)range withObjects:(const id [])objects count:(NSUInteger)count"},"setObject:atIndex:":{"abs":"Appends or replaces the object at the specified index.","dec":"- (void)setObject:(id)obj atIndex:(NSUInteger)idx"},"setObject:atIndexedSubscript:":{"abs":"Inserts the given object at the specified index of the mutable ordered set.","dec":"- (void)setObject:(id)obj atIndexedSubscript:(NSUInteger)idx"},"sortRange:options:usingComparator:":{"abs":"Sorts the specified range of the mutable ordered set using the specified options and the comparison method specified by a given comparator block.","dec":"- (void)sortRange:(NSRange)range options:(NSSortOptions)opts usingComparator:(NSComparator)cmptr"},"sortUsingComparator:":{"abs":"Sorts the mutable ordered set using the comparison method specified by the comparator block.","dec":"- (void)sortUsingComparator:(NSComparator)cmptr"},"sortUsingDescriptors:":{"abs":"Sorts the receiving ordered set using a given array of sort descriptors.","dec":"- (void)sortUsingDescriptors:(NSArray *)sortDescriptors"},"sortWithOptions:usingComparator:":{"abs":"Sorts the mutable ordered set using the specified options and the comparison method specified by a given comparator block.","dec":"- (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr"},"unionOrderedSet:":{"abs":"Adds each object in another given ordered set to the receiving mutable ordered set, if not present.","dec":"- (void)unionOrderedSet:(NSOrderedSet *)other"},"unionSet:":{"abs":"Adds each object in another given set to the receiving mutable ordered set, if not present.","dec":"- (void)unionSet:(NSSet *)other"}}};

ClassRef.NSMutableParagraphStyle = {"[:]":"NSParagraphStyle : NSObject","[.]":{"alignment":{"abs":"The text alignment of the receiver.","dec":"@property(readwrite) NSTextAlignment alignment"},"baseWritingDirection":{"abs":"The base writing direction for the receiver.","dec":"@property(readwrite) NSWritingDirection baseWritingDirection"},"defaultTabInterval":{"abs":"The document-wide default tab interval.","dec":"@property(readonly,nonatomic) CGFloat defaultTabInterval"},"firstLineHeadIndent":{"abs":"The indentation of the first line of the receiver.","dec":"@property(readwrite) CGFloat firstLineHeadIndent"},"headIndent":{"abs":"The indentation of the receiver’s lines other than the first.","dec":"@property(readwrite) CGFloat headIndent"},"hyphenationFactor":{"abs":"The paragraph’s threshold for hyphenation.","dec":"@property(readwrite) float hyphenationFactor"},"lineBreakMode":{"abs":"The mode that should be used to break lines in the receiver.","dec":"@property(readwrite) NSLineBreakMode lineBreakMode"},"lineHeightMultiple":{"abs":"The line height multiple.","dec":"@property(readwrite) CGFloat lineHeightMultiple"},"lineSpacing":{"abs":"The distance in points between the bottom of one line fragment and the top of the next.","dec":"@property(readwrite) CGFloat lineSpacing"},"maximumLineHeight":{"abs":"The receiver’s maximum line height.","dec":"@property(readwrite) CGFloat maximumLineHeight"},"minimumLineHeight":{"abs":"The receiver’s minimum height.","dec":"@property(readwrite) CGFloat minimumLineHeight"},"paragraphSpacing":{"abs":"The space after the end of the paragraph.","dec":"@property(readwrite) CGFloat paragraphSpacing"},"paragraphSpacingBefore":{"abs":"The distance between the paragraph’s top and the beginning of its text content.","dec":"@property(readwrite) CGFloat paragraphSpacingBefore"},"tabStops":{"abs":"An array of NSTextTab objects representing the receiver’s tab stops.","dec":"@property(readonly,copy,nonatomic) NSArray *tabStops"},"tailIndent":{"abs":"The trailing indentation of the receiver.","dec":"@property(readwrite) CGFloat tailIndent"}}};

ClassRef["NSMutableSet"] = {"[:]":"NSSet : NSObject","[+]":{"setWithCapacity:":{"abs":"Creates and returns a mutable set with a given initial capacity.","dec":"+ (instancetype)setWithCapacity:(NSUInteger)numItems"}},"[-]":{"addObject:":{"abs":"Adds a given object to the set, if it is not already a member.","dec":"- (void)addObject:(id)object"},"addObjectsFromArray:":{"abs":"Adds to the set each object contained in a given array that is not already a member.","dec":"- (void)addObjectsFromArray:(NSArray *)array"},"filterUsingPredicate:":{"abs":"Evaluates a given predicate against the set’s content and removes from the set those objects for which the predicate returns false.","dec":"- (void)filterUsingPredicate:(NSPredicate *)predicate"},"init":{"abs":"Initializes a newly allocated set.","dec":"- (instancetype)init"},"initWithCapacity:":{"abs":"Returns an initialized mutable set with a given initial capacity.","dec":"- (instancetype)initWithCapacity:(NSUInteger)numItems"},"intersectSet:":{"abs":"Removes from the receiving set each object that isn’t a member of another given set.","dec":"- (void)intersectSet:(NSSet *)otherSet"},"minusSet:":{"abs":"Removes each object in another given set from the receiving set, if present.","dec":"- (void)minusSet:(NSSet *)otherSet"},"removeAllObjects":{"abs":"Empties the set of all of its members.","dec":"- (void)removeAllObjects"},"removeObject:":{"abs":"Removes a given object from the set.","dec":"- (void)removeObject:(id)object"},"setSet:":{"abs":"Empties the receiving set, then adds each object contained in another given set.","dec":"- (void)setSet:(NSSet *)otherSet"},"unionSet:":{"abs":"Adds each object in another given set to the receiving set, if not present.","dec":"- (void)unionSet:(NSSet *)otherSet"}}};

ClassRef["NSMutableString"] = {"[:]":"NSString : NSObject","[+]":{"stringWithCapacity:":{"abs":"Returns an empty NSMutableString object with initial storage for a given number of characters.","dec":"+ (id)stringWithCapacity:(NSUInteger)capacity"}},"[-]":{"appendFormat:":{"abs":"Adds a constructed string to the receiver.","dec":"- (void)appendFormat:(NSString *)format ..."},"appendString:":{"abs":"Adds to the end of the receiver the characters of a given string.","dec":"- (void)appendString:(NSString *)aString"},"deleteCharactersInRange:":{"abs":"Removes from the receiver the characters in a given range.","dec":"- (void)deleteCharactersInRange:(NSRange)aRange"},"initWithCapacity:":{"abs":"Returns an NSMutableString object initialized with initial storage for a given number of characters,","dec":"- (id)initWithCapacity:(NSUInteger)capacity"},"insertString:atIndex:":{"abs":"Inserts into the receiver the characters of a given string at a given location.","dec":"- (void)insertString:(NSString *)aString atIndex:(NSUInteger)anIndex"},"replaceCharactersInRange:withString:":{"abs":"Replaces the characters from aRange with those in aString.","dec":"- (void)replaceCharactersInRange:(NSRange)aRange withString:(NSString *)aString"},"replaceOccurrencesOfString:withString:options:range:":{"abs":"Replaces all occurrences of a given string in a given range with another given string, returning the number of replacements.","dec":"- (NSUInteger)replaceOccurrencesOfString:(NSString *)target withString:(NSString *)replacement options:(NSStringCompareOptions)opts range:(NSRange)searchRange"},"setString:":{"abs":"Replaces the characters of the receiver with those in a given string.","dec":"- (void)setString:(NSString *)aString"}}};

ClassRef["NSMutableURLRequest"] = {"[:]":"NSURLRequest : NSObject","[-]":{"addValue:forHTTPHeaderField:":{"abs":"Adds an HTTP header to the receiver’s HTTP header dictionary.","dec":"- (void)addValue:(NSString *)value forHTTPHeaderField:(NSString *)field"},"setAllHTTPHeaderFields:":{"abs":"Replaces the receiver's header fields with the passed values.","dec":"- (void)setAllHTTPHeaderFields:(NSDictionary *)headerFields"},"setAllowsCellularAccess:":{"abs":"Sets whether the connection can use the device’s cellular radio (if present).","dec":"- (void)setAllowsCellularAccess:(BOOL)allow"},"setCachePolicy:":{"abs":"Sets the cache policy of the receiver.","dec":"- (void)setCachePolicy:(NSURLRequestCachePolicy)policy"},"setHTTPBody:":{"abs":"Sets the request body of the receiver to the specified data.","dec":"- (void)setHTTPBody:(NSData *)data"},"setHTTPBodyStream:":{"abs":"Sets the request body of the receiver to the contents of a specified input stream.","dec":"- (void)setHTTPBodyStream:(NSInputStream *)inputStream"},"setHTTPMethod:":{"abs":"Sets the receiver’s HTTP request method.","dec":"- (void)setHTTPMethod:(NSString *)method"},"setHTTPShouldHandleCookies:":{"abs":"Sets whether the receiver should use the default cookie handling for the request.","dec":"- (void)setHTTPShouldHandleCookies:(BOOL)handleCookies"},"setHTTPShouldUsePipelining:":{"abs":"Sets whether the request can continue transmitting data before receiving a response from an earlier transmission.","dec":"- (void)setHTTPShouldUsePipelining:(BOOL)shouldUsePipelining"},"setMainDocumentURL:":{"abs":"Sets the main document URL for the receiver.","dec":"- (void)setMainDocumentURL:(NSURL *)theURL"},"setNetworkServiceType:":{"abs":"Sets the network service type of the connection.","dec":"- (void)setNetworkServiceType:(NSURLRequestNetworkServiceType)networkServiceType"},"setTimeoutInterval:":{"abs":"Sets the receiver’s timeout interval, in seconds.","dec":"- (void)setTimeoutInterval:(NSTimeInterval)timeoutInterval"},"setURL:":{"abs":"Sets the URL of the receiver","dec":"- (void)setURL:(NSURL *)theURL"},"setValue:forHTTPHeaderField:":{"abs":"Sets the specified HTTP header field.","dec":"- (void)setValue:(NSString *)value forHTTPHeaderField:(NSString *)field"}}};

ClassRef["NSNetService"] = {"[:]":"NSObject","[.]":{"addresses":{"abs":"A read-only array containing NSData objects, each of which contains a socket address for the service. (read-only)","dec":"@property(readonly, copy) NSArray *addresses"},"delegate":{"abs":"The delegate for the receiver.","dec":"@property(assign) id<NSNetServiceDelegate> delegate"},"domain":{"abs":"A string containing the domain for this service. (read-only)","dec":"@property(readonly, copy) NSString *domain"},"hostName":{"abs":"A string containing the DNS hostname for this service. (read-only)","dec":"@property(readonly, copy) NSString *hostName"},"name":{"abs":"A string containing the name of this service. (read-only)","dec":"@property(readonly, copy) NSString *name"},"port":{"abs":"The port on which the service is listening for connections. (read-only)","dec":"@property(readonly) NSInteger port"},"type":{"abs":"The type of the published service. (read-only)","dec":"@property(readonly, copy) NSString *type"}},"[+]":{"dataFromTXTRecordDictionary:":{"abs":"Returns an NSData object representing a TXT record formed from a given dictionary.","dec":"+ (NSData *)dataFromTXTRecordDictionary:(NSDictionary *)txtDictionary"},"dictionaryFromTXTRecordData:":{"abs":"Returns a dictionary representing a TXT record given as an NSData object.","dec":"+ (NSDictionary *)dictionaryFromTXTRecordData:(NSData *)txtData"}},"[-]":{"getInputStream:outputStream:":{"abs":"Creates a pair of input and output streams for the receiver and returns a Boolean value that indicates whether they were retrieved successfully.","dec":"- (BOOL)getInputStream:(out NSInputStream **)inputStream outputStream:(out NSOutputStream **)outputStream"},"initWithDomain:type:name:":{"abs":"Returns the receiver, initialized as a network service of a given type and sets the initial host information.","dec":"- (id)initWithDomain:(NSString *)domain type:(NSString *)type name:(NSString *)name"},"initWithDomain:type:name:port:":{"abs":"Initializes the receiver for publishing a network service of type type at the socket location specified by domain, name, and port.","dec":"- (id)initWithDomain:(NSString *)domain type:(NSString *)type name:(NSString *)name port:(int)port"},"publish":{"abs":"Attempts to advertise the receiver’s on the network.","dec":"- (void)publish"},"publishWithOptions:":{"abs":"Attempts to advertise the receiver on the network, with the given options.","dec":"- (void)publishWithOptions:(NSNetServiceOptions)serviceOptions"},"removeFromRunLoop:forMode:":{"abs":"Removes the service from the given run loop for a given mode.","dec":"- (void)removeFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode"},"resolveWithTimeout:":{"abs":"Starts a resolve process of a finite duration for the receiver.","dec":"- (void)resolveWithTimeout:(NSTimeInterval)timeout"},"scheduleInRunLoop:forMode:":{"abs":"Adds the service to the specified run loop.","dec":"- (void)scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode"},"setTXTRecordData:":{"abs":"Sets the TXT record for the receiver, and returns a Boolean value that indicates whether the operation was successful.","dec":"- (BOOL)setTXTRecordData:(NSData *)recordData"},"startMonitoring":{"abs":"Starts the monitoring of TXT-record updates for the receiver.","dec":"- (void)startMonitoring"},"stop":{"abs":"Halts a currently running attempt to publish or resolve a service.","dec":"- (void)stop"},"stopMonitoring":{"abs":"Stops the monitoring of TXT-record updates for the receiver.","dec":"- (void)stopMonitoring"},"TXTRecordData":{"abs":"Returns the TXT record for the receiver.","dec":"- (NSData *)TXTRecordData"}},"[=]":{"NSNetServicesErrorCode":"","NSNetServicesErrorDomain":"","NSNetServicesUnknownError":"","NSNetServicesCollisionError":"","NSNetServicesNotFoundError":"","NSNetServicesActivityInProgress":"","NSNetServicesBadArgumentError":"","NSNetServicesCancelledError":"","NSNetServicesInvalidError":"","NSNetServicesTimeoutError":"","NSNetServiceNoAutoRename":"","NSNetServiceListenForConnections":""}};

ClassRef["NSNetServiceBrowser"] = {"[:]":"NSObject","[.]":{"delegate":{"abs":"The delegate object for this instance.","dec":"@property (assign) id <NSNetServiceBrowserDelegate> delegate;"}},"[-]":{"init":{"abs":"Initializes an allocated NSNetServiceBrowser object.","dec":"- (id)init"},"removeFromRunLoop:forMode:":{"abs":"Removes the receiver from the specified run loop.","dec":"- (void)removeFromRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)runLoopMode"},"scheduleInRunLoop:forMode:":{"abs":"Adds the receiver to the specified run loop.","dec":"- (void)scheduleInRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)runLoopMode"},"searchForBrowsableDomains":{"abs":"Initiates a search for domains visible to the host. This method returns immediately.","dec":"- (void)searchForBrowsableDomains"},"searchForRegistrationDomains":{"abs":"Initiates a search for domains in which the host may register services.","dec":"- (void)searchForRegistrationDomains"},"searchForServicesOfType:inDomain:":{"abs":"Starts a search for services of a particular type within a specific domain.","dec":"- (void)searchForServicesOfType:(NSString *)serviceType inDomain:(NSString *)domainName"},"stop":{"abs":"Halts a currently running search or resolution.","dec":"- (void)stop"}}};

ClassRef["NSNotification"] = {"[:]":"NSObject","[+]":{"notificationWithName:object:":{"abs":"Returns a new notification object with a specified name and object.","dec":"+ (instancetype)notificationWithName:(NSString *)aName object:(id)anObject"},"notificationWithName:object:userInfo:":{"abs":"Returns a notification object with a specified name, object, and user information.","dec":"+ (instancetype)notificationWithName:(NSString *)aName object:(id)anObject userInfo:(NSDictionary *)userInfo"}},"[-]":{"initWithName:object:userInfo:":{"abs":"Initializes a notification with a specified name, object, and user information.","dec":"- (instancetype)initWithName:(NSString *)aName object:(id)object userInfo:(NSDictionary *)userInfo"},"name":{"abs":"Returns the name of the notification.","dec":"- (NSString *)name"},"object":{"abs":"Returns the object associated with the notification.","dec":"- (id)object"},"userInfo":{"abs":"Returns the user information dictionary associated with the receiver.","dec":"- (NSDictionary *)userInfo"}}};

ClassRef["NSNotificationCenter"] = {"[:]":"NSObject","[+]":{"defaultCenter":{"abs":"Returns the process’s default notification center.","dec":"+ (id)defaultCenter"}},"[-]":{"addObserver:selector:name:object:":{"abs":"Adds an entry to the receiver’s dispatch table with an observer, a notification selector and optional criteria: notification name and sender.","dec":"- (void)addObserver:(id)notificationObserver selector:(SEL)notificationSelector name:(NSString *)notificationName object:(id)notificationSender"},"addObserverForName:object:queue:usingBlock:":{"abs":"Adds an entry to the receiver’s dispatch table with a notification queue and a block to add to the queue, and optional criteria: notification name and sender.","dec":"- (id)addObserverForName:(NSString *)name object:(id)obj queue:(NSOperationQueue *)queue usingBlock:(void (^)(NSNotification *))block"},"postNotification:":{"abs":"Posts a given notification to the receiver.","dec":"- (void)postNotification:(NSNotification *)notification"},"postNotificationName:object:":{"abs":"Creates a notification with a given name and sender and posts it to the receiver.","dec":"- (void)postNotificationName:(NSString *)notificationName object:(id)notificationSender"},"postNotificationName:object:userInfo:":{"abs":"Creates a notification with a given name, sender, and information and posts it to the receiver.","dec":"- (void)postNotificationName:(NSString *)notificationName object:(id)notificationSender userInfo:(NSDictionary *)userInfo"},"removeObserver:":{"abs":"Removes all the entries specifying a given observer from the receiver’s dispatch table.","dec":"- (void)removeObserver:(id)notificationObserver"},"removeObserver:name:object:":{"abs":"Removes matching entries from the receiver’s dispatch table.","dec":"- (void)removeObserver:(id)notificationObserver name:(NSString *)notificationName object:(id)notificationSender"}}};

ClassRef["NSNotificationQueue"] = {"[:]":"NSObject","[+]":{"defaultQueue":{"abs":"Returns the default notification queue for the current thread.","dec":"+ (id)defaultQueue"}},"[-]":{"dequeueNotificationsMatching:coalesceMask:":{"abs":"Removes all notifications from the queue that match a provided notification using provided matching criteria.","dec":"- (void)dequeueNotificationsMatching:(NSNotification *)notification coalesceMask:(NSUInteger)coalesceMask"},"enqueueNotification:postingStyle:":{"abs":"Adds a notification to the notification queue with a specified posting style.","dec":"- (void)enqueueNotification:(NSNotification *)notification postingStyle:(NSPostingStyle)postingStyle"},"enqueueNotification:postingStyle:coalesceMask:forModes:":{"abs":"Adds a notification to the notification queue with a specified posting style, criteria for coalescing, and runloop mode.","dec":"- (void)enqueueNotification:(NSNotification *)notification postingStyle:(NSPostingStyle)postingStyle coalesceMask:(NSUInteger)coalesceMask forModes:(NSArray *)modes"},"initWithNotificationCenter:":{"abs":"Initializes and returns a notification queue for the specified notification center.","dec":"- (id)initWithNotificationCenter:(NSNotificationCenter *)notificationCenter"}},"[=]":{"NSNotificationNoCoalescing":"","NSNotificationCoalescingOnName":"","NSNotificationCoalescingOnSender":"","NSPostASAP":"","NSPostWhenIdle":"","NSPostNow":""}};

ClassRef["NSNull"] = {"[:]":"NSObject","[+]":{"null":{"abs":"Returns the singleton instance of NSNull.","dec":"+ (NSNull *)null"}}};

ClassRef["NSNumber"] = {"[:]":"NSValue : NSObject","[+]":{"numberWithBool:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as a BOOL.","dec":"+ (NSNumber *)numberWithBool:(BOOL)value"},"numberWithChar:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as a signed char.","dec":"+ (NSNumber *)numberWithChar:(char)value"},"numberWithDouble:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as a double.","dec":"+ (NSNumber *)numberWithDouble:(double)value"},"numberWithFloat:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as a float.","dec":"+ (NSNumber *)numberWithFloat:(float)value"},"numberWithInt:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as a signed int.","dec":"+ (NSNumber *)numberWithInt:(int)value"},"numberWithInteger:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as an NSInteger.","dec":"+ (NSNumber *)numberWithInteger:(NSInteger)value"},"numberWithLong:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as a signed long.","dec":"+ (NSNumber *)numberWithLong:(long)value"},"numberWithLongLong:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as a signed long long.","dec":"+ (NSNumber *)numberWithLongLong:(long long)value"},"numberWithShort:":{"abs":"Creates and returns an NSNumber object containing value, treating it as a signed short.","dec":"+ (NSNumber *)numberWithShort:(short)value"},"numberWithUnsignedChar:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as an unsigned char.","dec":"+ (NSNumber *)numberWithUnsignedChar:(unsigned char)value"},"numberWithUnsignedInt:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as an unsigned int.","dec":"+ (NSNumber *)numberWithUnsignedInt:(unsigned int)value"},"numberWithUnsignedInteger:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as an NSUInteger.","dec":"+ (NSNumber *)numberWithUnsignedInteger:(NSUInteger)value"},"numberWithUnsignedLong:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as an unsigned long.","dec":"+ (NSNumber *)numberWithUnsignedLong:(unsigned long)value"},"numberWithUnsignedLongLong:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as an unsigned long long.","dec":"+ (NSNumber *)numberWithUnsignedLongLong:(unsigned long long)value"},"numberWithUnsignedShort:":{"abs":"Creates and returns an NSNumber object containing a given value, treating it as an unsigned short.","dec":"+ (NSNumber *)numberWithUnsignedShort:(unsigned short)value"}},"[-]":{"boolValue":{"abs":"Returns the receiver’s value as a BOOL.","dec":"- (BOOL)boolValue"},"charValue":{"abs":"Returns the receiver’s value as a char.","dec":"- (char)charValue"},"compare:":{"abs":"Returns an NSComparisonResult value that indicates whether the receiver is greater than, equal to, or less than a given number.","dec":"- (NSComparisonResult)compare:(NSNumber *)aNumber"},"decimalValue":{"abs":"Returns the receiver’s value, expressed as an NSDecimal structure.","dec":"- (NSDecimal)decimalValue"},"descriptionWithLocale:":{"abs":"Returns a string that represents the contents of the receiver for a given locale.","dec":"- (NSString *)descriptionWithLocale:(id)aLocale"},"doubleValue":{"abs":"Returns the receiver’s value as a double.","dec":"- (double)doubleValue"},"floatValue":{"abs":"Returns the receiver’s value as a float.","dec":"- (float)floatValue"},"initWithBool:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as a BOOL.","dec":"- (id)initWithBool:(BOOL)value"},"initWithChar:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as a signed char.","dec":"- (id)initWithChar:(char)value"},"initWithDouble:":{"abs":"Returns an NSNumber object initialized to contain value, treated as a double.","dec":"- (id)initWithDouble:(double)value"},"initWithFloat:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as a float.","dec":"- (id)initWithFloat:(float)value"},"initWithInt:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as a signed int.","dec":"- (id)initWithInt:(int)value"},"initWithInteger:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as an NSInteger.","dec":"- (id)initWithInteger:(NSInteger)value"},"initWithLong:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as a signed long.","dec":"- (id)initWithLong:(long)value"},"initWithLongLong:":{"abs":"Returns an NSNumber object initialized to contain value, treated as a signed long long.","dec":"- (id)initWithLongLong:(long long)value"},"initWithShort:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as a signed short.","dec":"- (id)initWithShort:(short)value"},"initWithUnsignedChar:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as an unsigned char.","dec":"- (id)initWithUnsignedChar:(unsigned char)value"},"initWithUnsignedInt:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as an unsigned int.","dec":"- (id)initWithUnsignedInt:(unsigned int)value"},"initWithUnsignedInteger:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as an NSUInteger.","dec":"- (id)initWithUnsignedInteger:(NSUInteger)value"},"initWithUnsignedLong:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as an unsigned long.","dec":"- (id)initWithUnsignedLong:(unsigned long)value"},"initWithUnsignedLongLong:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as an unsigned long long.","dec":"- (id)initWithUnsignedLongLong:(unsigned long long)value"},"initWithUnsignedShort:":{"abs":"Returns an NSNumber object initialized to contain a given value, treated as an unsigned short.","dec":"- (id)initWithUnsignedShort:(unsigned short)value"},"integerValue":{"abs":"Returns the receiver’s value as an NSInteger.","dec":"- (NSInteger)integerValue"},"intValue":{"abs":"Returns the receiver’s value as an int.","dec":"- (int)intValue"},"isEqualToNumber:":{"abs":"Returns a Boolean value that indicates whether the receiver and a given number are equal.","dec":"- (BOOL)isEqualToNumber:(NSNumber *)aNumber"},"longLongValue":{"abs":"Returns the receiver’s value as a long long.","dec":"- (long long)longLongValue"},"longValue":{"abs":"Returns the receiver’s value as a long.","dec":"- (long)longValue"},"objCType":{"abs":"Returns a C string containing the Objective-C type of the data contained in the receiver.","dec":"- (const char *)objCType"},"shortValue":{"abs":"Returns the receiver’s value as a short.","dec":"- (short)shortValue"},"stringValue":{"abs":"Returns the receiver’s value as a human-readable string.","dec":"- (NSString *)stringValue"},"unsignedCharValue":{"abs":"Returns the receiver’s value as an unsigned char.","dec":"- (unsigned char)unsignedCharValue"},"unsignedIntegerValue":{"abs":"Returns the receiver’s value as an NSUInteger.","dec":"- (NSUInteger)unsignedIntegerValue"},"unsignedIntValue":{"abs":"Returns the receiver’s value as an unsigned int.","dec":"- (unsigned int)unsignedIntValue"},"unsignedLongLongValue":{"abs":"Returns the receiver’s value as an unsigned long long.","dec":"- (unsigned long long)unsignedLongLongValue"},"unsignedLongValue":{"abs":"Returns the receiver’s value as an unsigned long.","dec":"- (unsigned long)unsignedLongValue"},"unsignedShortValue":{"abs":"Returns the receiver’s value as an unsigned short.","dec":"- (unsigned short)unsignedShortValue"}}};

ClassRef["NSNumberFormatter"] = {"[:]":"NSFormatter : NSObject","[+]":{"defaultFormatterBehavior":{"abs":"Returns an NSNumberFormatterBehavior constant that indicates default formatter behavior for new instances of NSNumberFormatter.","dec":"+ (NSNumberFormatterBehavior)defaultFormatterBehavior"},"localizedStringFromNumber:numberStyle:":{"abs":"Returns a localized number string with the specified style.","dec":"+ (NSString *)localizedStringFromNumber:(NSNumber *)num numberStyle:(NSNumberFormatterStyle)localizationStyle"},"setDefaultFormatterBehavior:":{"abs":"Sets the default formatter behavior for new instances of NSNumberFormatter .","dec":"+ (void)setDefaultFormatterBehavior:(NSNumberFormatterBehavior)behavior"}},"[-]":{"allowsFloats":{"abs":"Returns a Boolean value that indicates whether the receiver allows floating-point values as input.","dec":"- (BOOL)allowsFloats"},"alwaysShowsDecimalSeparator":{"abs":"Returns a Boolean value that indicates whether the receiver always shows a decimal separator, even if the number is an integer.","dec":"- (BOOL)alwaysShowsDecimalSeparator"},"currencyCode":{"abs":"Returns the receiver’s currency code as a string.","dec":"- (NSString *)currencyCode"},"currencyDecimalSeparator":{"abs":"Returns the receiver’s currency decimal separator as a string.","dec":"- (NSString *)currencyDecimalSeparator"},"currencyGroupingSeparator":{"abs":"Returns the currency grouping separator for the receiver.","dec":"- (NSString *)currencyGroupingSeparator"},"currencySymbol":{"abs":"Returns the receiver’s local currency symbol.","dec":"- (NSString *)currencySymbol"},"decimalSeparator":{"abs":"Returns a string containing the character the receiver uses to represent decimal separators.","dec":"- (NSString *)decimalSeparator"},"exponentSymbol":{"abs":"Returns the string the receiver uses as an exponent symbol.","dec":"- (NSString *)exponentSymbol"},"formatterBehavior":{"abs":"Returns an NSNumberFormatterBehavior constant that indicates the formatter behavior of the receiver.","dec":"- (NSNumberFormatterBehavior)formatterBehavior"},"formatWidth":{"abs":"Returns the format width of the receiver.","dec":"- (NSUInteger)formatWidth"},"generatesDecimalNumbers":{"abs":"Returns a Boolean value that indicates whether the receiver creates instances of NSDecimalNumber when it converts strings to number objects.","dec":"- (BOOL)generatesDecimalNumbers"},"getObjectValue:forString:range:error:":{"abs":"Returns by reference a cell-content object after creating it from a range of characters in a given string.","dec":"- (BOOL)getObjectValue:(out id *)anObject forString:(NSString *)aString range:(inout NSRange *)rangep error:(out NSError **)error"},"groupingSeparator":{"abs":"Returns a string containing the receiver’s grouping separator.","dec":"- (NSString *)groupingSeparator"},"groupingSize":{"abs":"Returns the receiver’s primary grouping size.","dec":"- (NSUInteger)groupingSize"},"internationalCurrencySymbol":{"abs":"Returns the international currency symbol used by the receiver.","dec":"- (NSString *)internationalCurrencySymbol"},"isLenient":{"abs":"Returns a Boolean value that indicates whether the receiver uses heuristics to guess at the number which is intended by a string.","dec":"- (BOOL)isLenient"},"isPartialStringValidationEnabled":{"abs":"Returns a Boolean value that indicates whether partial string validation is enabled.","dec":"- (BOOL)isPartialStringValidationEnabled"},"locale":{"abs":"Returns the locale of the receiver.","dec":"- (NSLocale *)locale"},"maximum":{"abs":"Returns the highest number allowed as input by the receiver.","dec":"- (NSNumber *)maximum"},"maximumFractionDigits":{"abs":"Returns the maximum number of digits after the decimal separator allowed as input and output by the receiver.","dec":"- (NSUInteger)maximumFractionDigits"},"maximumIntegerDigits":{"abs":"Returns the maximum number of integer digits allowed as input and output by the receiver.","dec":"- (NSUInteger)maximumIntegerDigits"},"maximumSignificantDigits":{"abs":"Returns the maximum number of significant digits for the receiver.","dec":"- (NSUInteger)maximumSignificantDigits"},"minimum":{"abs":"Returns the lowest number allowed as input by the receiver.","dec":"- (NSNumber *)minimum"},"minimumFractionDigits":{"abs":"Returns the minimum number of digits after the decimal separator allowed as input and output by the receiver.","dec":"- (NSUInteger)minimumFractionDigits"},"minimumIntegerDigits":{"abs":"Returns the minimum number of integer digits allowed as input and output by the receiver.","dec":"- (NSUInteger)minimumIntegerDigits"},"minimumSignificantDigits":{"abs":"Returns the minimum number of significant digits for the receiver.","dec":"- (NSUInteger)minimumSignificantDigits"},"minusSign":{"abs":"Returns the string the receiver uses to represent the minus sign.","dec":"- (NSString *)minusSign"},"multiplier":{"abs":"Returns the multiplier used by the receiver as an NSNumber object.","dec":"- (NSNumber *)multiplier"},"negativeFormat":{"abs":"Returns the format used by the receiver to display negative numbers.","dec":"- (NSString *)negativeFormat"},"negativeInfinitySymbol":{"abs":"Returns the symbol the receiver uses to represent negative infinity.","dec":"- (NSString *)negativeInfinitySymbol"},"negativePrefix":{"abs":"Returns the string the receiver inserts as a prefix to negative values.","dec":"- (NSString *)negativePrefix"},"negativeSuffix":{"abs":"Returns the string the receiver adds as a suffix to negative values.","dec":"- (NSString *)negativeSuffix"},"nilSymbol":{"abs":"Returns the string the receiver uses to represent a nil value.","dec":"- (NSString *)nilSymbol"},"notANumberSymbol":{"abs":"Returns the symbol the receiver uses to represent NaN (“not a number”) when it converts values.","dec":"- (NSString *)notANumberSymbol"},"numberFromString:":{"abs":"Returns an NSNumber object created by parsing a given string.","dec":"- (NSNumber *)numberFromString:(NSString *)string"},"numberStyle":{"abs":"Returns the number-formatter style of the receiver.","dec":"- (NSNumberFormatterStyle)numberStyle"},"paddingCharacter":{"abs":"Returns a string containing the padding character for the receiver.","dec":"- (NSString *)paddingCharacter"},"paddingPosition":{"abs":"Returns the padding position of the receiver.","dec":"- (NSNumberFormatterPadPosition)paddingPosition"},"percentSymbol":{"abs":"Returns the string that the receiver uses to represent the percent symbol.","dec":"- (NSString *)percentSymbol"},"perMillSymbol":{"abs":"Returns the string that the receiver uses for the per-thousands symbol.","dec":"- (NSString *)perMillSymbol"},"plusSign":{"abs":"Returns the string the receiver uses for the plus sign.","dec":"- (NSString *)plusSign"},"positiveFormat":{"abs":"Returns the format used by the receiver to display positive numbers.","dec":"- (NSString *)positiveFormat"},"positiveInfinitySymbol":{"abs":"Returns the string the receiver uses for the positive infinity symbol.","dec":"- (NSString *)positiveInfinitySymbol"},"positivePrefix":{"abs":"Returns the string the receiver uses as the prefix for positive values.","dec":"- (NSString *)positivePrefix"},"positiveSuffix":{"abs":"Returns the string the receiver uses as the suffix for positive values.","dec":"- (NSString *)positiveSuffix"},"roundingIncrement":{"abs":"Returns the rounding increment used by the receiver.","dec":"- (NSNumber *)roundingIncrement"},"roundingMode":{"abs":"Returns the rounding mode used by the receiver.","dec":"- (NSNumberFormatterRoundingMode)roundingMode"},"secondaryGroupingSize":{"abs":"Returns the size of secondary groupings for the receiver.","dec":"- (NSUInteger)secondaryGroupingSize"},"setAllowsFloats:":{"abs":"Sets whether the receiver allows as input floating-point values (that is, values that include the period character [.]).","dec":"- (void)setAllowsFloats:(BOOL)flag"},"setAlwaysShowsDecimalSeparator:":{"abs":"Controls whether the receiver always shows the decimal separator, even for integer numbers.","dec":"- (void)setAlwaysShowsDecimalSeparator:(BOOL)flag"},"setCurrencyCode:":{"abs":"Sets the receiver’s currency code.","dec":"- (void)setCurrencyCode:(NSString *)string"},"setCurrencyDecimalSeparator:":{"abs":"Sets the string used by the receiver as a decimal separator.","dec":"- (void)setCurrencyDecimalSeparator:(NSString *)string"},"setCurrencyGroupingSeparator:":{"abs":"Sets the currency grouping separator for the receiver.","dec":"- (void)setCurrencyGroupingSeparator:(NSString *)string"},"setCurrencySymbol:":{"abs":"Sets the string used by the receiver as a local currency symbol.","dec":"- (void)setCurrencySymbol:(NSString *)string"},"setDecimalSeparator:":{"abs":"Sets the character the receiver uses as a decimal separator.","dec":"- (void)setDecimalSeparator:(NSString *)newSeparator"},"setExponentSymbol:":{"abs":"Sets the string used by the receiver to represent the exponent symbol.","dec":"- (void)setExponentSymbol:(NSString *)string"},"setFormatterBehavior:":{"abs":"Sets the formatter behavior of the receiver.","dec":"- (void)setFormatterBehavior:(NSNumberFormatterBehavior)behavior"},"setFormatWidth:":{"abs":"Sets the format width used by the receiver.","dec":"- (void)setFormatWidth:(NSUInteger)number"},"setGeneratesDecimalNumbers:":{"abs":"Controls whether the receiver creates instances of NSDecimalNumber when it converts strings to number objects.","dec":"- (void)setGeneratesDecimalNumbers:(BOOL)flag"},"setGroupingSeparator:":{"abs":"Specifies the string used by the receiver for a grouping separator.","dec":"- (void)setGroupingSeparator:(NSString *)string"},"setGroupingSize:":{"abs":"Sets the grouping size of the receiver.","dec":"- (void)setGroupingSize:(NSUInteger)numDigits"},"setInternationalCurrencySymbol:":{"abs":"Sets the string used by the receiver for the international currency symbol.","dec":"- (void)setInternationalCurrencySymbol:(NSString *)string"},"setLenient:":{"abs":"Sets whether the receiver will use heuristics to guess at the number which is intended by a string.","dec":"- (void)setLenient:(BOOL)b"},"setLocale:":{"abs":"Sets the locale of the receiver.","dec":"- (void)setLocale:(NSLocale *)theLocale"},"setMaximum:":{"abs":"Sets the highest number the receiver allows as input.","dec":"- (void)setMaximum:(NSNumber *)aMaximum"},"setMaximumFractionDigits:":{"abs":"Sets the maximum number of digits after the decimal separator allowed as input and output by the receiver.","dec":"- (void)setMaximumFractionDigits:(NSUInteger)number"},"setMaximumIntegerDigits:":{"abs":"Sets the maximum number of integer digits allowed as input and output by the receiver.","dec":"- (void)setMaximumIntegerDigits:(NSUInteger)number"},"setMaximumSignificantDigits:":{"abs":"Sets the maximum number of significant digits for the receiver.","dec":"- (void)setMaximumSignificantDigits:(NSUInteger)number"},"setMinimum:":{"abs":"Sets the lowest number the receiver allows as input.","dec":"- (void)setMinimum:(NSNumber *)aMinimum"},"setMinimumFractionDigits:":{"abs":"Sets the minimum number of digits after the decimal separator allowed as input and output by the receiver.","dec":"- (void)setMinimumFractionDigits:(NSUInteger)number"},"setMinimumIntegerDigits:":{"abs":"Sets the minimum number of integer digits allowed as input and output by the receiver.","dec":"- (void)setMinimumIntegerDigits:(NSUInteger)number"},"setMinimumSignificantDigits:":{"abs":"Sets the minimum number of significant digits for the receiver.","dec":"- (void)setMinimumSignificantDigits:(NSUInteger)number"},"setMinusSign:":{"abs":"Sets the string used by the receiver for the minus sign.","dec":"- (void)setMinusSign:(NSString *)string"},"setMultiplier:":{"abs":"Sets the multiplier of the receiver.","dec":"- (void)setMultiplier:(NSNumber *)number"},"setNegativeFormat:":{"abs":"Sets the format the receiver uses to display negative values.","dec":"- (void)setNegativeFormat:(NSString *)aFormat"},"setNegativeInfinitySymbol:":{"abs":"Sets the string used by the receiver for the negative infinity symbol.","dec":"- (void)setNegativeInfinitySymbol:(NSString *)string"},"setNegativePrefix:":{"abs":"Sets the string the receiver uses as a prefix for negative values.","dec":"- (void)setNegativePrefix:(NSString *)string"},"setNegativeSuffix:":{"abs":"Sets the string the receiver uses as a suffix for negative values.","dec":"- (void)setNegativeSuffix:(NSString *)string"},"setNilSymbol:":{"abs":"Sets the string the receiver uses to represent nil values.","dec":"- (void)setNilSymbol:(NSString *)string"},"setNotANumberSymbol:":{"abs":"Sets the string the receiver uses to represent NaN (“not a number”).","dec":"- (void)setNotANumberSymbol:(NSString *)string"},"setNumberStyle:":{"abs":"Sets the number style used by the receiver.","dec":"- (void)setNumberStyle:(NSNumberFormatterStyle)style"},"setPaddingCharacter:":{"abs":"Sets the string that the receiver uses to pad numbers in the formatted string representation.","dec":"- (void)setPaddingCharacter:(NSString *)string"},"setPaddingPosition:":{"abs":"Sets the padding position used by the receiver.","dec":"- (void)setPaddingPosition:(NSNumberFormatterPadPosition)position"},"setPartialStringValidationEnabled:":{"abs":"Sets whether partial string validation is enabled for the receiver.","dec":"- (void)setPartialStringValidationEnabled:(BOOL)enabled"},"setPercentSymbol:":{"abs":"Sets the string used by the receiver to represent the percent symbol.","dec":"- (void)setPercentSymbol:(NSString *)string"},"setPerMillSymbol:":{"abs":"Sets the string used by the receiver to represent the per-mill (per-thousand) symbol.","dec":"- (void)setPerMillSymbol:(NSString *)string"},"setPlusSign:":{"abs":"Sets the string used by the receiver to represent the plus sign.","dec":"- (void)setPlusSign:(NSString *)string"},"setPositiveFormat:":{"abs":"Sets the format the receiver uses to display positive values.","dec":"- (void)setPositiveFormat:(NSString *)aFormat"},"setPositiveInfinitySymbol:":{"abs":"Sets the string used by the receiver for the positive infinity symbol.","dec":"- (void)setPositiveInfinitySymbol:(NSString *)string"},"setPositivePrefix:":{"abs":"Sets the string the receiver uses as the prefix for positive values.","dec":"- (void)setPositivePrefix:(NSString *)string"},"setPositiveSuffix:":{"abs":"Sets the string the receiver uses as the suffix for positive values.","dec":"- (void)setPositiveSuffix:(NSString *)string"},"setRoundingIncrement:":{"abs":"Sets the rounding increment used by the receiver.","dec":"- (void)setRoundingIncrement:(NSNumber *)number"},"setRoundingMode:":{"abs":"Sets the rounding mode used by the receiver.","dec":"- (void)setRoundingMode:(NSNumberFormatterRoundingMode)mode"},"setSecondaryGroupingSize:":{"abs":"Sets the secondary grouping size of the receiver.","dec":"- (void)setSecondaryGroupingSize:(NSUInteger)number"},"setTextAttributesForNegativeInfinity:":{"abs":"Sets the text attributes used to display the negative infinity symbol.","dec":"- (void)setTextAttributesForNegativeInfinity:(NSDictionary *)newAttributes"},"setTextAttributesForNegativeValues:":{"abs":"Sets the text attributes to be used in displaying negative values .","dec":"- (void)setTextAttributesForNegativeValues:(NSDictionary *)newAttributes"},"setTextAttributesForNil:":{"abs":"Sets the text attributes used to display the nil symbol.","dec":"- (void)setTextAttributesForNil:(NSDictionary *)newAttributes"},"setTextAttributesForNotANumber:":{"abs":"Sets the text attributes used to display the NaN (\"not a number\") string.","dec":"- (void)setTextAttributesForNotANumber:(NSDictionary *)newAttributes"},"setTextAttributesForPositiveInfinity:":{"abs":"Sets the text attributes used to display the positive infinity symbol.","dec":"- (void)setTextAttributesForPositiveInfinity:(NSDictionary *)newAttributes"},"setTextAttributesForPositiveValues:":{"abs":"Sets the text attributes to be used in displaying positive values.","dec":"- (void)setTextAttributesForPositiveValues:(NSDictionary *)newAttributes"},"setTextAttributesForZero:":{"abs":"Sets the text attributes used to display a zero value.","dec":"- (void)setTextAttributesForZero:(NSDictionary *)newAttributes"},"setUsesGroupingSeparator:":{"abs":"Controls whether the receiver displays the grouping separator.","dec":"- (void)setUsesGroupingSeparator:(BOOL)flag"},"setUsesSignificantDigits:":{"abs":"Sets whether the receiver uses significant digits.","dec":"- (void)setUsesSignificantDigits:(BOOL)b"},"setZeroSymbol:":{"abs":"Sets the string the receiver uses as the symbol to show the value zero.","dec":"- (void)setZeroSymbol:(NSString *)string"},"stringFromNumber:":{"abs":"Returns a string containing the formatted value of the provided number object.","dec":"- (NSString *)stringFromNumber:(NSNumber *)number"},"textAttributesForNegativeInfinity":{"abs":"Returns a dictionary containing the text attributes used to display the negative infinity string.","dec":"- (NSDictionary *)textAttributesForNegativeInfinity"},"textAttributesForNegativeValues":{"abs":"Returns a dictionary containing the text attributes that have been set for negative values.","dec":"- (NSDictionary *)textAttributesForNegativeValues"},"textAttributesForNil":{"abs":"Returns a dictionary containing the text attributes used to display the nil symbol.","dec":"- (NSDictionary *)textAttributesForNil"},"textAttributesForNotANumber":{"abs":"Returns a dictionary containing the text attributes used to display the NaN (\"not a number\") symbol.","dec":"- (NSDictionary *)textAttributesForNotANumber"},"textAttributesForPositiveInfinity":{"abs":"Returns a dictionary containing the text attributes used to display the positive infinity symbol.","dec":"- (NSDictionary *)textAttributesForPositiveInfinity"},"textAttributesForPositiveValues":{"abs":"Returns a dictionary containing the text attributes that have been set for positive values.","dec":"- (NSDictionary *)textAttributesForPositiveValues"},"textAttributesForZero":{"abs":"Returns a dictionary containing the text attributes used to display a value of zero.","dec":"- (NSDictionary *)textAttributesForZero"},"usesGroupingSeparator":{"abs":"Returns a Boolean value that indicates whether the receiver uses the grouping separator.","dec":"- (BOOL)usesGroupingSeparator"},"usesSignificantDigits":{"abs":"Returns a Boolean value that indicates whether the receiver uses significant digits.","dec":"- (BOOL)usesSignificantDigits"},"zeroSymbol":{"abs":"Returns the string the receiver uses as the symbol to show the value zero.","dec":"- (NSString *)zeroSymbol"}},"[=]":{"NSNumberFormatterNoStyle":"","NSNumberFormatterDecimalStyle":"","NSNumberFormatterCurrencyStyle":"","NSNumberFormatterPercentStyle":"","NSNumberFormatterScientificStyle":"","NSNumberFormatterSpellOutStyle":"","NSNumberFormatterBehaviorDefault":"","NSNumberFormatterBehavior10_0":"","NSNumberFormatterBehavior10_4":"","NSNumberFormatterPadBeforePrefix":"","NSNumberFormatterPadAfterPrefix":"","NSNumberFormatterPadBeforeSuffix":"","NSNumberFormatterPadAfterSuffix":"","NSNumberFormatterRoundCeiling":"","NSNumberFormatterRoundFloor":"","NSNumberFormatterRoundDown":"","NSNumberFormatterRoundUp":"","NSNumberFormatterRoundHalfEven":"","NSNumberFormatterRoundHalfDown":"","NSNumberFormatterRoundHalfUp":""}};

ClassRef["NSObject UIKit Additions"] = {"[:]":"none","[-]":{"awakeFromNib":{"abs":"Prepares the receiver for service after it has been loaded from an Interface Builder archive, or nib file.","dec":"- (void)awakeFromNib"},"decreaseSize:":{"abs":"Asks the object to decrease the size of an item.","dec":"- (void)decreaseSize:(id)sender"},"increaseSize:":{"abs":"Asks the object to increase the size of an item.","dec":"- (void)increaseSize:(id)sender"}}};

ClassRef["NSObject"] = {"[+]":{"alloc":{"abs":"Returns a new instance of the receiving class.","dec":"+ (id)alloc"},"allocWithZone:":{"abs":"Returns a new instance of the receiving class.","dec":"+ (id)allocWithZone:(NSZone *)zone"},"cancelPreviousPerformRequestsWithTarget:":{"abs":"Cancels perform requests previously registered with the performSelector:withObject:afterDelay: instance method.","dec":"+ (void)cancelPreviousPerformRequestsWithTarget:(id)aTarget"},"cancelPreviousPerformRequestsWithTarget:selector:object:":{"abs":"Cancels perform requests previously registered with performSelector:withObject:afterDelay:.","dec":"+ (void)cancelPreviousPerformRequestsWithTarget:(id)aTarget selector:(SEL)aSelector object:(id)anArgument"},"class":{"abs":"Returns the class object.","dec":"+ (Class)class"},"classFallbacksForKeyedArchiver":{"abs":"Overridden to return the names of classes that can be used to decode objects if their class is unavailable.","dec":"+ (NSArray *)classFallbacksForKeyedArchiver"},"classForKeyedUnarchiver":{"abs":"Overridden by subclasses to substitute a new class during keyed unarchiving.","dec":"+ (Class)classForKeyedUnarchiver"},"conformsToProtocol:":{"abs":"Returns a Boolean value that indicates whether the receiver conforms to a given protocol.","dec":"+ (BOOL)conformsToProtocol:(Protocol *)aProtocol"},"copyWithZone:":{"abs":"Returns the receiver.","dec":"+ (id)copyWithZone:(NSZone *)zone"},"description":{"abs":"Returns a string that represents the contents of the receiving class.","dec":"+ (NSString *)description"},"initialize":{"abs":"Initializes the class before it receives its first message.","dec":"+ (void)initialize"},"instanceMethodForSelector:":{"abs":"Locates and returns the address of the implementation of the instance method identified by a given selector.","dec":"+ (IMP)instanceMethodForSelector:(SEL)aSelector"},"instanceMethodSignatureForSelector:":{"abs":"Returns an NSMethodSignature object that contains a description of the instance method identified by a given selector.","dec":"+ (NSMethodSignature *)instanceMethodSignatureForSelector:(SEL)aSelector"},"instancesRespondToSelector:":{"abs":"Returns a Boolean value that indicates whether instances of the receiver are capable of responding to a given selector.","dec":"+ (BOOL)instancesRespondToSelector:(SEL)aSelector"},"isSubclassOfClass:":{"abs":"Returns a Boolean value that indicates whether the receiving class is a subclass of, or identical to, a given class.","dec":"+ (BOOL)isSubclassOfClass:(Class)aClass"},"load":{"abs":"Invoked whenever a class or category is added to the Objective-C runtime; implement this method to perform class-specific behavior upon loading.","dec":"+ (void)load"},"mutableCopyWithZone:":{"abs":"Returns the receiver.","dec":"+ (id)mutableCopyWithZone:(NSZone *)zone"},"new":{"abs":"Allocates a new instance of the receiving class, sends it an init message, and returns the initialized object.","dec":"+ (id)new"},"resolveClassMethod:":{"abs":"Dynamically provides an implementation for a given selector for a class method.","dec":"+ (BOOL)resolveClassMethod:(SEL)name"},"resolveInstanceMethod:":{"abs":"Dynamically provides an implementation for a given selector for an instance method.","dec":"+ (BOOL)resolveInstanceMethod:(SEL)name"},"setVersion:":{"abs":"Sets the receiver's version number.","dec":"+ (void)setVersion:(NSInteger)aVersion"},"superclass":{"abs":"Returns the class object for the receiver’s superclass.","dec":"+ (Class)superclass"},"version":{"abs":"Returns the version number assigned to the class.","dec":"+ (NSInteger)version"}},"[-]":{"autoContentAccessingProxy":{"abs":"Creates and returns a proxy for the receiving object","dec":"- (id)autoContentAccessingProxy"},"awakeAfterUsingCoder:":{"abs":"Overridden by subclasses to substitute another object in place of the object that was decoded and subsequently received this message.","dec":"- (id)awakeAfterUsingCoder:(NSCoder *)aDecoder"},"classForCoder":{"abs":"Overridden by subclasses to substitute a class other than its own during coding.","dec":"- (Class)classForCoder"},"classForKeyedArchiver":{"abs":"Overridden by subclasses to substitute a new class for instances during keyed archiving.","dec":"- (Class)classForKeyedArchiver"},"copy":{"abs":"Returns the object returned by copyWithZone:.","dec":"- (id)copy"},"dealloc":{"abs":"Deallocates the memory occupied by the receiver.","dec":"- (void)dealloc"},"doesNotRecognizeSelector:":{"abs":"Handles messages the receiver doesn’t recognize.","dec":"- (void)doesNotRecognizeSelector:(SEL)aSelector"},"finalize":{"abs":"The garbage collector invokes this method on the receiver before disposing of the memory it uses. (Deprecated. Garbage collection is deprecated in OS X v10.8; instead, you should use Automatic Reference Counting—see Transitioning to ARC Release Notes.)","dec":"- (void)finalize"},"forwardingTargetForSelector:":{"abs":"Returns the object to which unrecognized messages should first be directed.","dec":"- (id)forwardingTargetForSelector:(SEL)aSelector"},"forwardInvocation:":{"abs":"Overridden by subclasses to forward messages to other objects.","dec":"- (void)forwardInvocation:(NSInvocation *)anInvocation"},"init":{"abs":"Implemented by subclasses to initialize a new object (the receiver) immediately after memory for it has been allocated.","dec":"- (id)init"},"methodForSelector:":{"abs":"Locates and returns the address of the receiver’s implementation of a method so it can be called as a function.","dec":"- (IMP)methodForSelector:(SEL)aSelector"},"methodSignatureForSelector:":{"abs":"Returns an NSMethodSignature object that contains a description of the method identified by a given selector.","dec":"- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector"},"mutableCopy":{"abs":"Returns the object returned by mutableCopyWithZone: where the zone is nil.","dec":"- (id)mutableCopy"},"performSelector:onThread:withObject:waitUntilDone:":{"abs":"Invokes a method of the receiver on the specified thread using the default mode.","dec":"- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thread withObject:(id)arg waitUntilDone:(BOOL)wait"},"performSelector:onThread:withObject:waitUntilDone:modes:":{"abs":"Invokes a method of the receiver on the specified thread using the specified modes.","dec":"- (void)performSelector:(SEL)aSelector onThread:(NSThread *)thread withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array"},"performSelector:withObject:afterDelay:":{"abs":"Invokes a method of the receiver on the current thread using the default mode after a delay.","dec":"- (void)performSelector:(SEL)aSelector withObject:(id)anArgument afterDelay:(NSTimeInterval)delay"},"performSelector:withObject:afterDelay:inModes:":{"abs":"Invokes a method of the receiver on the current thread using the specified modes after a delay.","dec":"- (void)performSelector:(SEL)aSelector withObject:(id)anArgument afterDelay:(NSTimeInterval)delay inModes:(NSArray *)modes"},"performSelectorInBackground:withObject:":{"abs":"Invokes a method of the receiver on a new background thread.","dec":"- (void)performSelectorInBackground:(SEL)aSelector withObject:(id)arg"},"performSelectorOnMainThread:withObject:waitUntilDone:":{"abs":"Invokes a method of the receiver on the main thread using the default mode.","dec":"- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait"},"performSelectorOnMainThread:withObject:waitUntilDone:modes:":{"abs":"Invokes a method of the receiver on the main thread using the specified modes.","dec":"- (void)performSelectorOnMainThread:(SEL)aSelector withObject:(id)arg waitUntilDone:(BOOL)wait modes:(NSArray *)array"},"replacementObjectForCoder:":{"abs":"Overridden by subclasses to substitute another object for itself during encoding.","dec":"- (id)replacementObjectForCoder:(NSCoder *)aCoder"},"replacementObjectForKeyedArchiver:":{"abs":"Overridden by subclasses to substitute another object for itself during keyed archiving.","dec":"- (id)replacementObjectForKeyedArchiver:(NSKeyedArchiver *)archiver"}}};

ClassRef["NSOperation"] = {"[:]":"NSObject","[-]":{"addDependency:":{"abs":"Makes the receiver dependent on the completion of the specified operation.","dec":"- (void)addDependency:(NSOperation *)operation"},"cancel":{"abs":"Advises the operation object that it should stop executing its task.","dec":"- (void)cancel"},"completionBlock":{"abs":"Returns the block to execute when the operation’s main task is complete.","dec":"- (void (^)(void))completionBlock"},"dependencies":{"abs":"Returns a new array object containing the operations on which the receiver is dependent.","dec":"- (NSArray *)dependencies"},"init":{"abs":"Returns an initialized NSOperation object.","dec":"- (id)init"},"isCancelled":{"abs":"Returns a Boolean value indicating whether the operation has been cancelled.","dec":"- (BOOL)isCancelled"},"isConcurrent":{"abs":"Returns a Boolean value indicating whether the operation runs asynchronously.","dec":"- (BOOL)isConcurrent"},"isExecuting":{"abs":"Returns a Boolean value indicating whether the operation is currently executing.","dec":"- (BOOL)isExecuting"},"isFinished":{"abs":"Returns a Boolean value indicating whether the operation is done executing.","dec":"- (BOOL)isFinished"},"isReady":{"abs":"Returns a Boolean value indicating whether the receiver’s operation can be performed now.","dec":"- (BOOL)isReady"},"main":{"abs":"Performs the receiver’s non-concurrent task.","dec":"- (void)main"},"queuePriority":{"abs":"Returns the priority of the operation in an operation queue.","dec":"- (NSOperationQueuePriority)queuePriority"},"removeDependency:":{"abs":"Removes the receiver’s dependence on the specified operation.","dec":"- (void)removeDependency:(NSOperation *)operation"},"setCompletionBlock:":{"abs":"Sets the block to execute when the operation has finished executing.","dec":"- (void)setCompletionBlock:(void (^)(void))block"},"setQueuePriority:":{"abs":"Sets the priority of the operation when used in an operation queue.","dec":"- (void)setQueuePriority:(NSOperationQueuePriority)priority"},"setThreadPriority:":{"abs":"Sets the thread priority to use when executing the operation.","dec":"- (void)setThreadPriority:(double)priority"},"start":{"abs":"Begins the execution of the operation.","dec":"- (void)start"},"threadPriority":{"abs":"Returns the thread priority to use when executing the operation.","dec":"- (double)threadPriority"},"waitUntilFinished":{"abs":"Blocks execution of the current thread until the receiver finishes.","dec":"- (void)waitUntilFinished"}},"[=]":{"NSOperationQueuePriorityVeryLow":"","NSOperationQueuePriorityLow":"","NSOperationQueuePriorityNormal":"","NSOperationQueuePriorityHigh":"","NSOperationQueuePriorityVeryHigh":""}};

ClassRef["NSOperationQueue"] = {"[:]":"NSObject","[+]":{"currentQueue":{"abs":"Returns the operation queue that launched the current operation.","dec":"+ (id)currentQueue"},"mainQueue":{"abs":"Returns the operation queue associated with the main thread.","dec":"+ (id)mainQueue"}},"[-]":{"addOperation:":{"abs":"Adds the specified operation object to the receiver.","dec":"- (void)addOperation:(NSOperation *)operation"},"addOperations:waitUntilFinished:":{"abs":"Adds the specified array of operations to the queue.","dec":"- (void)addOperations:(NSArray *)ops waitUntilFinished:(BOOL)wait"},"addOperationWithBlock:":{"abs":"Wraps the specified block in an operation object and adds it to the receiver.","dec":"- (void)addOperationWithBlock:(void (^)(void))block"},"cancelAllOperations":{"abs":"Cancels all queued and executing operations.","dec":"- (void)cancelAllOperations"},"isSuspended":{"abs":"Returns a Boolean value indicating whether the receiver is scheduling queued operations for execution.","dec":"- (BOOL)isSuspended"},"maxConcurrentOperationCount":{"abs":"Returns the maximum number of concurrent operations that the receiver can execute.","dec":"- (NSInteger)maxConcurrentOperationCount"},"name":{"abs":"Returns the name of the receiver.","dec":"- (NSString *)name"},"operationCount":{"abs":"Returns the number of operations currently in the queue.","dec":"- (NSUInteger)operationCount"},"operations":{"abs":"Returns a new array containing the operations currently in the queue.","dec":"- (NSArray *)operations"},"setMaxConcurrentOperationCount:":{"abs":"Sets the maximum number of concurrent operations that the receiver can execute.","dec":"- (void)setMaxConcurrentOperationCount:(NSInteger)count"},"setName:":{"abs":"Assigns the specified name to the receiver.","dec":"- (void)setName:(NSString *)newName"},"setSuspended:":{"abs":"Modifies the execution of pending operations","dec":"- (void)setSuspended:(BOOL)suspend"},"waitUntilAllOperationsAreFinished":{"abs":"Blocks the current thread until all of the receiver’s queued and executing operations finish executing.","dec":"- (void)waitUntilAllOperationsAreFinished"}},"[=]":{"NSOperationQueueDefaultMaxConcurrentOperationCount":""}};

ClassRef["NSOrderedSet"] = {"[:]":"NSObject","[+]":{"orderedSet":{"abs":"Creates and returns an empty ordered set","dec":"+ (instancetype)orderedSet"},"orderedSetWithArray:":{"abs":"Creates and returns a set containing a uniqued collection of the objects contained in a given array.","dec":"+ (instancetype)orderedSetWithArray:(NSArray *)array"},"orderedSetWithArray:range:copyItems:":{"abs":"Creates and returns a new ordered set for a specified range of objects in an array.","dec":"+ (instancetype)orderedSetWithArray:(NSArray *)array range:(NSRange)range copyItems:(BOOL)flag"},"orderedSetWithObject:":{"abs":"Creates and returns a ordered set that contains a single given object.","dec":"+ (instancetype)orderedSetWithObject:(id)object"},"orderedSetWithObjects:":{"abs":"Creates and returns a ordered set containing the objects in a given argument list.","dec":"+ (instancetype)orderedSetWithObjects:(id)firstObj,, ..."},"orderedSetWithObjects:count:":{"abs":"Creates and returns a set containing a specified number of objects from a given C array of objects.","dec":"+ (instancetype)orderedSetWithObjects:(const id [])objects count:(NSUInteger)cnt"},"orderedSetWithOrderedSet:":{"abs":"Creates and returns an ordered set containing the objects from another ordered set.","dec":"+ (instancetype)orderedSetWithOrderedSet:(NSOrderedSet *)set"},"orderedSetWithOrderedSet:range:copyItems:":{"abs":"Creates and returns a new ordered set for a specified range of objects in an ordered set.","dec":"+ (instancetype)orderedSetWithOrderedSet:(NSOrderedSet *)set range:(NSRange)range copyItems:(BOOL)flag"},"orderedSetWithSet:":{"abs":"Creates and returns an ordered set with the contents of a set.","dec":"+ (instancetype)orderedSetWithSet:(NSSet *)set"},"orderedSetWithSet:copyItems:":{"abs":"Creates and returns an ordered set with the contents of a set, optionally copying the items.","dec":"+ (instancetype)orderedSetWithSet:(NSSet *)set copyItems:(BOOL)flag"}},"[-]":{"addObserver:forKeyPath:options:context:":{"abs":"Raises an exception.","dec":"- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context"},"array":{"abs":"Returns a representation of the ordered set as an array.","dec":"- (NSArray *)array"},"containsObject:":{"abs":"Returns a Boolean value that indicates whether a given object is present in the ordered set.","dec":"- (BOOL)containsObject:(id)object"},"count":{"abs":"Returns the number of members in the set.","dec":"- (NSUInteger)count"},"description":{"abs":"Returns a string that represents the contents of the ordered set, formatted as a property list.","dec":"- (NSString *)description"},"descriptionWithLocale:":{"abs":"Returns a string that represents the contents of the ordered set, formatted as a property list.","dec":"- (NSString *)descriptionWithLocale:(id)locale"},"descriptionWithLocale:indent:":{"abs":"Returns a string that represents the contents of the ordered set, formatted as a property list.","dec":"- (NSString *)descriptionWithLocale:(id)locale indent:(NSUInteger)level"},"enumerateObjectsAtIndexes:options:usingBlock:":{"abs":"Executes a given block using the objects in the ordered set at the specified indexes.","dec":"- (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block"},"enumerateObjectsUsingBlock:":{"abs":"Executes a given block using each object in the ordered set.","dec":"- (void)enumerateObjectsUsingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block"},"enumerateObjectsWithOptions:usingBlock:":{"abs":"Executes a given block using each object in the set, using the specified enumeration options.","dec":"- (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, NSUInteger idx, BOOL *stop))block"},"filteredOrderedSetUsingPredicate:":{"abs":"Evaluates a given predicate against each object in the receiving ordered set and returns a new ordered set containing the objects for which the predicate returns true.","dec":"- (NSOrderedSet *)filteredOrderedSetUsingPredicate:(NSPredicate *)predicate"},"firstObject":{"abs":"Returns the first object in the ordered set.","dec":"- (id)firstObject"},"getObjects:range:":{"abs":"Copies the objects contained in the ordered set that fall within the specified range to objects.","dec":"- (void)getObjects:(id [])objects range:(NSRange)range"},"indexesOfObjectsAtIndexes:options:passingTest:":{"abs":"Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options.","dec":"- (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexesOfObjectsPassingTest:":{"abs":"Returns the index of the object in the ordered set that passes a test in a given block.","dec":"- (NSIndexSet *)indexesOfObjectsPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexesOfObjectsWithOptions:passingTest:":{"abs":"Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options.","dec":"- (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexOfObject:":{"abs":"Returns the index of the specified object.","dec":"- (NSUInteger)indexOfObject:(id)object"},"indexOfObject:inSortedRange:options:usingComparator:":{"abs":"Returns the index, within a specified range, of an object compared with elements in the ordered set using a given NSComparator block.","dec":"- (NSUInteger)indexOfObject:(id)object inSortedRange:(NSRange)range options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp"},"indexOfObjectAtIndexes:options:passingTest:":{"abs":"Returns the index, from a given set of indexes, of the object in the ordered set that passes a test in a given block for a given set of enumeration options.","dec":"- (NSUInteger)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexOfObjectPassingTest:":{"abs":"Returns the index of the object in the ordered set that passes a test in a given block.","dec":"- (NSUInteger)indexOfObjectPassingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"indexOfObjectWithOptions:passingTest:":{"abs":"Returns the index of an object in the ordered set that passes a test in a given block for a given set of enumeration options.","dec":"- (NSUInteger)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, NSUInteger idx, BOOL *stop))predicate"},"init":{"abs":"Initializes a newly allocated ordered set.","dec":"- (instancetype)init"},"initWithArray:":{"abs":"Initializes a newly allocated set with the objects that are contained in a given array.","dec":"- (instancetype)initWithArray:(NSArray *)array"},"initWithArray:copyItems:":{"abs":"Initializes a newly allocated set with the objects that are contained in a given array, optionally copying the items.","dec":"- (instancetype)initWithArray:(NSArray *)array copyItems:(BOOL)flag"},"initWithArray:range:copyItems:":{"abs":"Initializes a newly allocated set with the objects that are contained in the specified range of an array, optionally copying the items.","dec":"- (instancetype)initWithArray:(NSArray *)array range:(NSRange)range copyItems:(BOOL)flag"},"initWithObject:":{"abs":"Initializes a new ordered set with the object.","dec":"- (instancetype)initWithObject:(id)object"},"initWithObjects:":{"abs":"Initializes a newly allocated set with members taken from the specified list of objects.","dec":"- (instancetype)initWithObjects:(id)firstObj,, ..."},"initWithObjects:count:":{"abs":"Initializes a newly allocated set with a specified number of objects from a given C array of objects.","dec":"- (instancetype)initWithObjects:(const id [])objects count:(NSUInteger)cnt"},"initWithOrderedSet:":{"abs":"Initializes a new ordered set with the contents of a set.","dec":"- (instancetype)initWithOrderedSet:(NSOrderedSet *)set"},"initWithOrderedSet:copyItems:":{"abs":"Initializes a new ordered set with the contents of a set, optionally copying the items.","dec":"- (instancetype)initWithOrderedSet:(NSOrderedSet *)set copyItems:(BOOL)flag"},"initWithOrderedSet:range:copyItems:":{"abs":"Initializes a new ordered set with the contents of an ordered set, optionally copying the items.","dec":"- (instancetype)initWithOrderedSet:(NSOrderedSet *)orderedSet range:(NSRange)range copyItems:(BOOL)flag"},"initWithSet:":{"abs":"Initializes a new ordered set with the contents of a set.","dec":"- (instancetype)initWithSet:(NSSet *)set"},"initWithSet:copyItems:":{"abs":"Initializes a new ordered set with the contents of a set, optionally copying the objects in the set.","dec":"- (instancetype)initWithSet:(NSSet *)set copyItems:(BOOL)flag"},"intersectsOrderedSet:":{"abs":"Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given ordered set.","dec":"- (BOOL)intersectsOrderedSet:(NSOrderedSet *)other"},"intersectsSet:":{"abs":"Returns a Boolean value that indicates whether at least one object in the receiving ordered set is also present in another given set.","dec":"- (BOOL)intersectsSet:(NSSet *)set"},"isEqualToOrderedSet:":{"abs":"Compares the receiving ordered set to another ordered set.","dec":"- (BOOL)isEqualToOrderedSet:(NSOrderedSet *)other"},"isSubsetOfOrderedSet:":{"abs":"Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given ordered set.","dec":"- (BOOL)isSubsetOfOrderedSet:(NSOrderedSet *)other"},"isSubsetOfSet:":{"abs":"Returns a Boolean value that indicates whether every object in the receiving ordered set is also present in another given set.","dec":"- (BOOL)isSubsetOfSet:(NSSet *)set"},"lastObject":{"abs":"Returns the last object in the ordered set.","dec":"- (id)lastObject"},"objectAtIndex:":{"abs":"Returns the object at the specified index of the set.","dec":"- (id)objectAtIndex:(NSUInteger)index"},"objectAtIndexedSubscript:":{"abs":"Returns the object at the specified index of the set.","dec":"- (id)objectAtIndexedSubscript:(NSUInteger)index"},"objectEnumerator":{"abs":"Returns an enumerator object that lets you access each object in the ordered set.","dec":"- (NSEnumerator *)objectEnumerator"},"objectsAtIndexes:":{"abs":"Returns the objects in the ordered set at the specified indexes.","dec":"- (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes"},"removeObserver:forKeyPath:":{"abs":"Raises an exception.","dec":"- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath"},"removeObserver:forKeyPath:context:":{"abs":"Raises an exception.","dec":"- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context"},"reversedOrderedSet":{"abs":"Returns an ordered set in the reverse order.","dec":"- (NSOrderedSet *)reversedOrderedSet"},"reverseObjectEnumerator":{"abs":"Returns an enumerator object that lets you access each object in the ordered set.","dec":"- (NSEnumerator *)reverseObjectEnumerator"},"set":{"abs":"Returns a representation of the set containing the contents of the ordered set.","dec":"- (NSSet *)set"},"setValue:forKey:":{"abs":"Invokes setValue:forKey: on each of the receiver's members using the specified value and key","dec":"- (void)setValue:(id)value forKey:(NSString *)key"},"sortedArrayUsingComparator:":{"abs":"Returns an array that lists the receiving ordered set’s elements in ascending order, as determined by the comparison method specified by a given NSComparator block","dec":"- (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr"},"sortedArrayUsingDescriptors:":{"abs":"Returns an array of the ordered set’s elements sorted as specified by a given array of sort descriptors.","dec":"- (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors"},"sortedArrayWithOptions:usingComparator:":{"abs":"Returns an array that lists the receiving ordered set’s elements in ascending order, as determined by the comparison method specified by a given NSComparator block.","dec":"- (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr"},"valueForKey:":{"abs":"Returns an ordered set containing the results of invoking valueForKey: using key on each of the ordered set’s objects.","dec":"- (id)valueForKey:(NSString *)key"}}};

ClassRef["NSOrthography"] = {"[:]":"NSObject","[.]":{"allLanguages":{"abs":"Returns an array containing all the languages appearing in the values of the language map. (read-only)","dec":"@property(readonly) NSArray *allLanguages"},"allScripts":{"abs":"Returns an array containing all the scripts appearing as keys in the language map. (read-only)","dec":"@property(readonly) NSArray *allScripts"},"dominantLanguage":{"abs":"Returns the first language in the list of languages for the dominant script. (read-only)","dec":"@property(readonly) NSString *dominantLanguage"},"dominantScript":{"abs":"The dominant script for the text. (read-only)","dec":"@property(readonly) NSString *dominantScript"},"languageMap":{"abs":"A dictionary that map script tags to arrays of language tags. (read-only)","dec":"@property(readonly) NSDictionary *languageMap"}},"[+]":{"orthographyWithDominantScript:languageMap:":{"abs":"Creates and returns an orthography instance with the specified dominant script and language map.","dec":"+ (id)orthographyWithDominantScript:(NSString *)script languageMap:(NSDictionary *)map"}},"[-]":{"dominantLanguageForScript:":{"abs":"Returns the dominant language for the specified script.","dec":"- (NSString *)dominantLanguageForScript:(NSString *)script"},"initWithDominantScript:languageMap:":{"abs":"Creates and returns an orthography instance with the specified dominant script and language map.","dec":"- (id)initWithDominantScript:(NSString *)script languageMap:(NSDictionary *)map"},"languagesForScript:":{"abs":"Returns the list of languages for the specified script.","dec":"- (NSArray *)languagesForScript:(NSString *)script"}}};

ClassRef["NSOutputStream"] = {"[:]":"NSStream : NSObject","[+]":{"outputStreamToBuffer:capacity:":{"abs":"Creates and returns an initialized output stream that can write to a provided buffer.","dec":"+ (id)outputStreamToBuffer:(uint8_t *)buffer capacity:(NSUInteger)capacity"},"outputStreamToFileAtPath:append:":{"abs":"Creates and returns an initialized output stream for writing to a specified file.","dec":"+ (id)outputStreamToFileAtPath:(NSString *)path append:(BOOL)shouldAppend"},"outputStreamToMemory":{"abs":"Creates and returns an initialized output stream that will write stream data to memory.","dec":"+ (id)outputStreamToMemory"},"outputStreamWithURL:append:":{"abs":"Creates and returns an initialized output stream for writing to a specified URL.","dec":"+ (id)outputStreamWithURL:(NSURL *)url append:(BOOL)shouldAppend"}},"[-]":{"hasSpaceAvailable":{"abs":"Returns whether the receiver can be written to.","dec":"- (BOOL)hasSpaceAvailable"},"initToBuffer:capacity:":{"abs":"Returns an initialized output stream that can write to a provided buffer.","dec":"- (id)initToBuffer:(uint8_t *)buffer capacity:(NSUInteger)capacity"},"initToFileAtPath:append:":{"abs":"Returns an initialized output stream for writing to a specified file.","dec":"- (id)initToFileAtPath:(NSString *)path append:(BOOL)shouldAppend"},"initToMemory":{"abs":"Returns an initialized output stream that will write to memory.","dec":"- (id)initToMemory"},"initWithURL:append:":{"abs":"Returns an initialized output stream for writing to a specified URL.","dec":"- (id)initWithURL:(NSURL *)url append:(BOOL)shouldAppend"},"write:maxLength:":{"abs":"Writes the contents of a provided data buffer to the receiver.","dec":"- (NSInteger)write:(const uint8_t *)buffer maxLength:(NSUInteger)length"}}};

ClassRef.NSParagraphStyle = {"[:]":"NSObject","[.]":{"alignment":{"abs":"The text alignment of the receiver. (read-only)","dec":"@property(readonly) NSTextAlignment alignment"},"baseWritingDirection":{"abs":"The base writing direction for the receiver. (read-only)","dec":"@property(readonly) NSWritingDirection baseWritingDirection"},"defaultTabInterval":{"abs":"The document-wide default tab interval.","dec":"@property(readonly,nonatomic) CGFloat defaultTabInterval"},"firstLineHeadIndent":{"abs":"The indentation of the first line of the receiver. (read-only)","dec":"@property(readonly) CGFloat firstLineHeadIndent"},"headIndent":{"abs":"The indentation of the receiver’s lines other than the first. (read-only)","dec":"@property(readonly) CGFloat headIndent"},"hyphenationFactor":{"abs":"The paragraph’s threshold for hyphenation. (read-only)","dec":"@property(readonly) float hyphenationFactor"},"lineBreakMode":{"abs":"The mode that should be used to break lines in the receiver. (read-only)","dec":"@property(readonly) NSLineBreakMode lineBreakMode"},"lineHeightMultiple":{"abs":"The line height multiple. (read-only)","dec":"@property(readonly) CGFloat lineHeightMultiple"},"lineSpacing":{"abs":"The distance in points between the bottom of one line fragment and the top of the next. (read-only)","dec":"@property(readonly) CGFloat lineSpacing"},"maximumLineHeight":{"abs":"The receiver’s maximum line height. (read-only)","dec":"@property(readonly) CGFloat maximumLineHeight"},"minimumLineHeight":{"abs":"The receiver’s minimum height. (read-only)","dec":"@property(readonly) CGFloat minimumLineHeight"},"paragraphSpacing":{"abs":"The space after the end of the paragraph. (read-only)","dec":"@property(readonly) CGFloat paragraphSpacing"},"paragraphSpacingBefore":{"abs":"The distance between the paragraph’s top and the beginning of its text content. (read-only)","dec":"@property(readonly) CGFloat paragraphSpacingBefore"},"tabStops":{"abs":"An array of NSTextTab objects representing the receiver’s tab stops.","dec":"@property(readonly,copy,nonatomic) NSArray *tabStops"},"tailIndent":{"abs":"The trailing indentation of the receiver. (read-only)","dec":"@property(readonly) CGFloat tailIndent"}},"[+]":{"defaultParagraphStyle":{"abs":"Returns the default paragraph style.","dec":"+ (NSParagraphStyle *)defaultParagraphStyle"},"defaultWritingDirectionForLanguage:":{"abs":"Returns the default writing direction for the specified language.","dec":"+ (NSWritingDirection)defaultWritingDirectionForLanguage:(NSString *)languageName"}},"[=]":{"NSLineBreakByWordWrapping":"","NSLineBreakByCharWrapping":"","NSLineBreakByClipping":"","NSLineBreakByTruncatingHead":"","NSLineBreakByTruncatingTail":"","NSLineBreakByTruncatingMiddle":""}};

ClassRef["NSPipe"] = {"[:]":"NSObject","[+]":{"pipe":{"abs":"Returns an NSPipe object.","dec":"+ (id)pipe"}},"[-]":{"fileHandleForReading":{"abs":"Returns the receiver's read file handle.","dec":"- (NSFileHandle *)fileHandleForReading"},"fileHandleForWriting":{"abs":"Returns the receiver's write file handle.","dec":"- (NSFileHandle *)fileHandleForWriting"},"init":{"abs":"Returns an initialized NSPipe object.","dec":"- (id)init"}}};

ClassRef["NSPointerArray"] = {"[:]":"NSObject","[+]":{"pointerArrayWithOptions:":{"abs":"Returns a new pointer array initialized to use the given options.","dec":"+ (id)pointerArrayWithOptions:(NSPointerFunctionsOptions)options"},"pointerArrayWithPointerFunctions:":{"abs":"A new pointer array initialized to use the given functions.","dec":"+ (id)pointerArrayWithPointerFunctions:(NSPointerFunctions *)functions"},"strongObjectsPointerArray":{"abs":"Returns a new pointer array that maintains strong references to its elements.","dec":"+ (id)strongObjectsPointerArray"},"weakObjectsPointerArray":{"abs":"Returns a new pointer array that maintains weak references to its elements.","dec":"+ (id)weakObjectsPointerArray"}},"[-]":{"addPointer:":{"abs":"Adds a given pointer to the receiver.","dec":"- (void)addPointer:(void *)pointer"},"allObjects":{"abs":"Returns an array containing all the objects in the receiver.","dec":"- (NSArray *)allObjects"},"compact":{"abs":"Removes NULL values from the receiver.","dec":"- (void)compact"},"count":{"abs":"Returns the number of elements in the receiver.","dec":"- (NSUInteger)count"},"initWithOptions:":{"abs":"Initializes the receiver to use the given options.","dec":"- (id)initWithOptions:(NSPointerFunctionsOptions)options"},"initWithPointerFunctions:":{"abs":"Initializes the receiver to use the given functions.","dec":"- (id)initWithPointerFunctions:(NSPointerFunctions *)functions"},"insertPointer:atIndex:":{"abs":"Inserts a pointer at a given index.","dec":"- (void)insertPointer:(void *)item atIndex:(NSUInteger)index"},"pointerAtIndex:":{"abs":"Returns the pointer at a given index.","dec":"- (void *)pointerAtIndex:(NSUInteger)index"},"pointerFunctions":{"abs":"Returns a new NSPointerFunctions object reflecting the functions in use by the receiver.","dec":"- (NSPointerFunctions *)pointerFunctions"},"removePointerAtIndex:":{"abs":"Removes the pointer at a given index.","dec":"- (void)removePointerAtIndex:(NSUInteger)index"},"replacePointerAtIndex:withPointer:":{"abs":"Replaces the pointer at a given index.","dec":"- (void)replacePointerAtIndex:(NSUInteger)index withPointer:(void *)item"},"setCount:":{"abs":"Sets the count for the receiver.","dec":"- (void)setCount:(NSUInteger)count"}}};

ClassRef["NSPointerFunctions"] = {"[:]":"NSObject","[.]":{"acquireFunction":{"abs":"The function used to acquire memory.","dec":"@property void *(*acquireFunction)(const void *src, NSUInteger (*size)(const void *item), BOOL shouldCopy)"},"descriptionFunction":{"abs":"The function used to describe elements.","dec":"@property NSString *(*descriptionFunction)(const void *item)"},"hashFunction":{"abs":"The hash function.","dec":"@property NSUInteger (*hashFunction)(const void *item, NSUInteger (*size)(const void *item))"},"isEqualFunction":{"abs":"The function used to compare pointers.","dec":"@property BOOL (*isEqualFunction)(const void *item1, const void*item2, NSUInteger (*size)(const void *item))"},"relinquishFunction":{"abs":"The function used to relinquish memory.","dec":"@property void (*relinquishFunction)(const void *item, NSUInteger (*size)(const void *item))"},"sizeFunction":{"abs":"The function used to determine the size of pointers.","dec":"@property NSUInteger (*sizeFunction)(const void *item)"},"usesStrongWriteBarrier":{"abs":"Specifies whether, in a garbage collected environment, pointers should be assigned using a strong write barrier.","dec":"@property BOOL usesStrongWriteBarrier"},"usesWeakReadAndWriteBarriers":{"abs":"Specifies whether, in a garbage collected environment, pointers should use weak read and write barriers.","dec":"@property BOOL usesWeakReadAndWriteBarriers"}},"[+]":{"pointerFunctionsWithOptions:":{"abs":"Returns a new NSPointerFunctions object initialized with the given options.","dec":"+ (id)pointerFunctionsWithOptions:(NSPointerFunctionsOptions)options"}},"[-]":{"initWithOptions:":{"abs":"Returns an NSPointerFunctions object initialized with the given options.","dec":"- (id)initWithOptions:(NSPointerFunctionsOptions)options"}},"[=]":{"NSPointerFunctionsStrongMemory":"","NSPointerFunctionsOpaqueMemory":"","NSPointerFunctionsMallocMemory":"","NSPointerFunctionsMachVirtualMemory":"","NSPointerFunctionsWeakMemory":"","NSPointerFunctionsObjectPersonality":"","NSPointerFunctionsOpaquePersonality":"","NSPointerFunctionsObjectPointerPersonality":"","NSPointerFunctionsCStringPersonality":"","NSPointerFunctionsStructPersonality":"","NSPointerFunctionsIntegerPersonality":"","NSPointerFunctionsCopyIn":""}};

ClassRef["NSPort"] = {"[:]":"NSObject","[+]":{"port":{"abs":"Creates and returns a new NSPort object capable of both sending and receiving messages.","dec":"+ (NSPort *)port"}},"[-]":{"delegate":{"abs":"Returns the receiver’s delegate.","dec":"- (id < NSPortDelegate >)delegate"},"invalidate":{"abs":"Marks the receiver as invalid and posts an NSPortDidBecomeInvalidNotification to the default notification center.","dec":"- (void)invalidate"},"isValid":{"abs":"Returns a Boolean value that indicates whether the receiver is valid.","dec":"- (BOOL)isValid"},"removeFromRunLoop:forMode:":{"abs":"This method should be implemented by a subclass to stop monitoring of a port when removed from a give run loop in a given input mode.","dec":"- (void)removeFromRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode"},"reservedSpaceLength":{"abs":"Returns the number of bytes of space reserved by the receiver for sending data.","dec":"- (NSUInteger)reservedSpaceLength"},"scheduleInRunLoop:forMode:":{"abs":"This method should be implemented by a subclass to set up monitoring of a port when added to a given run loop in a given input mode.","dec":"- (void)scheduleInRunLoop:(NSRunLoop *)runLoop forMode:(NSString *)mode"},"sendBeforeDate:components:from:reserved:":{"abs":"This method is provided for subclasses that have custom types of NSPort.","dec":"- (BOOL)sendBeforeDate:(NSDate *)limitDate components:(NSMutableArray *)components from:(NSPort *)receivePort reserved:(NSUInteger)headerSpaceReserved"},"sendBeforeDate:msgid:components:from:reserved:":{"abs":"This method is provided for subclasses that have custom types of NSPort.","dec":"- (BOOL)sendBeforeDate:(NSDate *)limitDate msgid:(NSUInteger)msgID components:(NSMutableArray *)components from:(NSPort *)receivePort reserved:(NSUInteger)headerSpaceReserved"},"setDelegate:":{"abs":"Sets the receiver’s delegate to a given object.","dec":"- (void)setDelegate:(id < NSPortDelegate >)anObject"}}};

ClassRef["NSPredicate"] = {"[:]":"NSObject","[+]":{"predicateWithBlock:":{"abs":"Creates and returns a predicate that evaluates using a specified block object and bindings dictionary.","dec":"+ (NSPredicate *)predicateWithBlock:(BOOL (^)(id evaluatedObject, NSDictionary *bindings))block"},"predicateWithFormat:":{"abs":"Creates and returns a new predicate formed by creating a new string with a given format and parsing the result.","dec":"+ (NSPredicate *)predicateWithFormat:(NSString *)format,, ..."},"predicateWithFormat:argumentArray:":{"abs":"Creates and returns a new predicate by substituting the values in a given array into a format string and parsing the result.","dec":"+ (NSPredicate *)predicateWithFormat:(NSString *)predicateFormat argumentArray:(NSArray *)arguments"},"predicateWithFormat:arguments:":{"abs":"Creates and returns a new predicate by substituting the values in an argument list into a format string and parsing the result.","dec":"+ (NSPredicate *)predicateWithFormat:(NSString *)format arguments:(va_list)argList"},"predicateWithValue:":{"abs":"Creates and returns a predicate that always evaluates to a given value.","dec":"+ (NSPredicate *)predicateWithValue:(BOOL)value"}},"[-]":{"allowEvaluation":{"abs":"Force a predicate that was securely decoded to allow evaluation.","dec":"- (void)allowEvaluation"},"evaluateWithObject:":{"abs":"Returns a Boolean value that indicates whether a given object matches the conditions specified by the receiver.","dec":"- (BOOL)evaluateWithObject:(id)object"},"evaluateWithObject:substitutionVariables:":{"abs":"Returns a Boolean value that indicates whether a given object matches the conditions specified by the receiver after substituting in the values in a given variables dictionary.","dec":"- (BOOL)evaluateWithObject:(id)object substitutionVariables:(NSDictionary *)variables"},"predicateFormat":{"abs":"Returns the receiver’s format string.","dec":"- (NSString *)predicateFormat"},"predicateWithSubstitutionVariables:":{"abs":"Returns a copy of the receiver with the receiver’s variables substituted by values specified in a given substitution variables dictionary.","dec":"- (NSPredicate *)predicateWithSubstitutionVariables:(NSDictionary *)variables"}}};

ClassRef["NSProcessInfo"] = {"[:]":"NSObject","[+]":{"processInfo":{"abs":"Returns the process information agent for the process.","dec":"+ (NSProcessInfo *)processInfo"}},"[-]":{"activeProcessorCount":{"abs":"Provides the number of active processing cores available on the computer.","dec":"- (NSUInteger)activeProcessorCount"},"arguments":{"abs":"Returns the command-line arguments for the process.","dec":"- (NSArray *)arguments"},"beginActivityWithOptions:reason:":{"abs":"Begin an activity using the given options and reason.","dec":"- (id<NSObject>)beginActivityWithOptions:(NSActivityOptions)options reason:(NSString *)reason"},"endActivity:":{"abs":"Ends the given activity.","dec":"- (void)endActivity:(id<NSObject>)activity"},"environment":{"abs":"Returns the variable names and their values in the environment from which the process was launched.","dec":"- (NSDictionary *)environment"},"globallyUniqueString":{"abs":"Returns a global unique identifier for the process.","dec":"- (NSString *)globallyUniqueString"},"hostName":{"abs":"Returns the name of the host computer.","dec":"- (NSString *)hostName"},"operatingSystem":{"abs":"Returns a constant to indicate the operating system on which the process is executing.","dec":"- (NSUInteger)operatingSystem"},"operatingSystemName":{"abs":"Returns a string containing the name of the operating system on which the process is executing.","dec":"- (NSString *)operatingSystemName"},"operatingSystemVersionString":{"abs":"Returns a string containing the version of the operating system on which the process is executing.","dec":"- (NSString *)operatingSystemVersionString"},"performActivityWithOptions:reason:usingBlock:":{"abs":"Synchronously perform an activity defined by a given block using the given options.","dec":"- (void)performActivityWithOptions:(NSActivityOptions)options reason:(NSString *)reason usingBlock:(void (^)(void))block"},"physicalMemory":{"abs":"Provides the amount of physical memory on the computer.","dec":"- (unsigned long long)physicalMemory"},"processIdentifier":{"abs":"Returns the identifier of the process.","dec":"- (int)processIdentifier"},"processName":{"abs":"Returns the name of the process.","dec":"- (NSString *)processName"},"processorCount":{"abs":"Provides the number of processing cores available on the computer.","dec":"- (NSUInteger)processorCount"},"setProcessName:":{"abs":"Sets the name of the process.","dec":"- (void)setProcessName:(NSString *)name"},"systemUptime":{"abs":"Returns how long it has been since the computer has been restarted.","dec":"- (NSTimeInterval)systemUptime"}},"[=]":{"NSActivityIdleDisplaySleepDisabled":"","NSActivityIdleSystemSleepDisabled":"","NSActivitySuddenTerminationDisabled":"","NSActivityAutomaticTerminationDisabled":"","NSActivityUserInitiated":"","NSActivityUserInitiatedAllowingIdleSystemSleep":"","NSActivityBackground":"","NSActivityLatencyCritical":"","NSHPUXOperatingSystem":"","NSMACHOperatingSystem":"","NSOSF1OperatingSystem":"","NSSolarisOperatingSystem":"","NSSunOSOperatingSystem":"","NSWindows95OperatingSystem":"","NSWindowsNTOperatingSystem":""}};

ClassRef["NSPropertyListSerialization"] = {"[:]":"NSObject","[+]":{"dataFromPropertyList:format:errorDescription:":{"abs":"This method is obsolete and will be deprecated soon. (Deprecated. Use dataWithPropertyList:format:options:error: instead.)","dec":"+ (NSData *)dataFromPropertyList:(id)plist format:(NSPropertyListFormat)format errorDescription:(NSString **)errorString"},"dataWithPropertyList:format:options:error:":{"abs":"Returns an NSData object containing a given property list in a specified format.","dec":"+ (NSData *)dataWithPropertyList:(id)plist format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(NSError **)error"},"propertyList:isValidForFormat:":{"abs":"Returns a Boolean value that indicates whether a given property list is valid for a given format.","dec":"+ (BOOL)propertyList:(id)plist isValidForFormat:(NSPropertyListFormat)format"},"propertyListFromData:mutabilityOption:format:errorDescription:":{"abs":"This method is obsolete and will be deprecated soon. (Deprecated. Use propertyListWithData:options:format:error: instead.)","dec":"+ (id)propertyListFromData:(NSData *)data mutabilityOption:(NSPropertyListMutabilityOptions)opt format:(NSPropertyListFormat *)format errorDescription:(NSString **)errorString"},"propertyListWithData:options:format:error:":{"abs":"Creates and returns a property list from the specified data.","dec":"+ (id)propertyListWithData:(NSData *)data options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat *)format error:(NSError **)error"},"propertyListWithStream:options:format:error:":{"abs":"Creates and returns a property list by reading from the specified stream.","dec":"+ (id)propertyListWithStream:(NSInputStream *)stream options:(NSPropertyListReadOptions)opt format:(NSPropertyListFormat *)format error:(NSError **)error"},"writePropertyList:toStream:format:options:error:":{"abs":"Writes the specified property list to the specified stream.","dec":"+ (NSInteger)writePropertyList:(id)plist toStream:(NSOutputStream *)stream format:(NSPropertyListFormat)format options:(NSPropertyListWriteOptions)opt error:(NSError **)error"}},"[=]":{"NSPropertyListImmutable":"","NSPropertyListMutableContainers":"","NSPropertyListMutableContainersAndLeaves":"","NSPropertyListOpenStepFormat":"","NSPropertyListXMLFormat_v1_0":"","NSPropertyListBinaryFormat_v1_0":""}};

ClassRef["NSProxy"] = {"[+]":{"alloc":{"abs":"Returns a new instance of the receiving class","dec":"+ (id)alloc"},"allocWithZone:":{"abs":"Returns a new instance of the receiving class","dec":"+ (id)allocWithZone:(NSZone *)zone"},"class":{"abs":"Returns self (the class object).","dec":"+ (Class)class"},"respondsToSelector:":{"abs":"Returns a Boolean value that indicates whether the receiving class responds to a given selector.","dec":"+ (BOOL)respondsToSelector:(SEL)aSelector"}},"[-]":{"dealloc":{"abs":"Deallocates the memory occupied by the receiver.","dec":"- (void)dealloc"},"debugDescription":{"abs":"Returns an string containing the real class name and the id of the receiver as a hexadecimal number.","dec":"- (NSString *)debugDescription"},"description":{"abs":"Returns an NSString object containing the real class name and the id of the receiver as a hexadecimal number.","dec":"- (NSString *)description"},"finalize":{"abs":"The garbage collector invokes this method on the receiver before disposing of the memory it uses.","dec":"- (void)finalize"},"forwardInvocation:":{"abs":"Passes a given invocation to the real object the proxy represents.","dec":"- (void)forwardInvocation:(NSInvocation *)anInvocation"},"methodSignatureForSelector:":{"abs":"Raises NSInvalidArgumentException. Override this method in your concrete subclass to return a proper NSMethodSignature object for the given selector and the class your proxy objects stand in for.","dec":"- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector"}}};

ClassRef["NSRecursiveLock"] = {"[:]":"NSObject","[-]":{"lockBeforeDate:":{"abs":"Attempts to acquire a lock before a given date.","dec":"- (BOOL)lockBeforeDate:(NSDate *)limit"},"name":{"abs":"Returns the name associated with the receiver.","dec":"- (NSString *)name"},"setName:":{"abs":"Assigns a name to the receiver","dec":"- (void)setName:(NSString *)newName"},"tryLock":{"abs":"Attempts to acquire a lock, and immediately returns a Boolean value that indicates whether the attempt was successful.","dec":"- (BOOL)tryLock"}}};

ClassRef["NSRegularExpression"] = {"[:]":"NSObject","[.]":{"numberOfCaptureGroups":{"abs":"Returns the number of capture groups in the regular expression. (read-only)","dec":"@property(readonly) NSUInteger numberOfCaptureGroups"},"options":{"abs":"Returns the options used when the regular expression option was created. (read-only)","dec":"@property(readonly) NSRegularExpressionOptions options"},"pattern":{"abs":"Returns the regular expression pattern. (read-only)","dec":"@property(readonly) NSString *pattern"}},"[+]":{"escapedPatternForString:":{"abs":"Returns a string by adding backslash escapes as necessary to protect any characters that would match as pattern metacharacters.","dec":"+ (NSString *)escapedPatternForString:(NSString *)string"},"escapedTemplateForString:":{"abs":"Returns a template string by adding backslash escapes as necessary to protect any characters that would match as pattern metacharacters","dec":"+ (NSString *)escapedTemplateForString:(NSString *)string"},"regularExpressionWithPattern:options:error:":{"abs":"Creates an NSRegularExpression instance with the specified regular expression pattern and options.","dec":"+ (NSRegularExpression *)regularExpressionWithPattern:(NSString *)pattern options:(NSRegularExpressionOptions)options error:(NSError **)error"}},"[-]":{"enumerateMatchesInString:options:range:usingBlock:":{"abs":"Enumerates the string allowing the Block to handle each regular expression match.","dec":"- (void)enumerateMatchesInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range usingBlock:(void (^)(NSTextCheckingResult *result, NSMatchingFlags flags, BOOL *stop))block"},"firstMatchInString:options:range:":{"abs":"Returns the first match of the regular expression within the specified range of the string.","dec":"- (NSTextCheckingResult *)firstMatchInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range"},"initWithPattern:options:error:":{"abs":"Returns an initialized NSRegularExpression instance with the specified regular expression pattern and options.","dec":"- (id)initWithPattern:(NSString *)pattern options:(NSRegularExpressionOptions)options error:(NSError **)error"},"matchesInString:options:range:":{"abs":"Returns an array containing all the matches of the regular expression in the string.","dec":"- (NSArray *)matchesInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range"},"numberOfMatchesInString:options:range:":{"abs":"Returns the number of matches of the regular expression within the specified range of the string.","dec":"- (NSUInteger)numberOfMatchesInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range"},"rangeOfFirstMatchInString:options:range:":{"abs":"Returns the range of the first match of the regular expression within the specified range of the string.","dec":"- (NSRange)rangeOfFirstMatchInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range"},"replaceMatchesInString:options:range:withTemplate:":{"abs":"Replaces regular expression matches within the mutable string the using the template string.","dec":"- (NSUInteger)replaceMatchesInString:(NSMutableString *)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString *)template"},"replacementStringForResult:inString:offset:template:":{"abs":"Used to perform template substitution for a single result for clients implementing their own replace functionality.","dec":"- (NSString *)replacementStringForResult:(NSTextCheckingResult *)result inString:(NSString *)string offset:(NSInteger)offset template:(NSString *)template"},"stringByReplacingMatchesInString:options:range:withTemplate:":{"abs":"Returns a new string containing matching regular expressions replaced with the template string.","dec":"- (NSString *)stringByReplacingMatchesInString:(NSString *)string options:(NSMatchingOptions)options range:(NSRange)range withTemplate:(NSString *)template"}},"[=]":{"NSRegularExpressionCaseInsensitive":"","NSRegularExpressionAllowCommentsAndWhitespace":"","NSRegularExpressionIgnoreMetacharacters":"","NSRegularExpressionDotMatchesLineSeparators":"","NSRegularExpressionAnchorsMatchLines":"","NSRegularExpressionUseUnixLineSeparators":"","NSRegularExpressionUseUnicodeWordBoundaries":"","NSMatchingProgress":"","NSMatchingCompleted":"","NSMatchingHitEnd":"","NSMatchingRequiredEnd":"","NSMatchingInternalError":"","NSMatchingReportProgress":"","NSMatchingReportCompletion":"","NSMatchingAnchored":"","NSMatchingWithTransparentBounds":"","NSMatchingWithoutAnchoringBounds":""}};

ClassRef["NSRunLoop"] = {"[:]":"NSObject","[+]":{"currentRunLoop":{"abs":"Returns the NSRunLoop object for the current thread.","dec":"+ (NSRunLoop *)currentRunLoop"},"mainRunLoop":{"abs":"Returns the run loop of the main thread.","dec":"+ (NSRunLoop *)mainRunLoop"}},"[-]":{"acceptInputForMode:beforeDate:":{"abs":"Runs the loop once or until the specified date, accepting input only for the specified mode.","dec":"- (void)acceptInputForMode:(NSString *)mode beforeDate:(NSDate *)limitDate"},"addPort:forMode:":{"abs":"Adds a port as an input source to the specified mode of the run loop.","dec":"- (void)addPort:(NSPort *)aPort forMode:(NSString *)mode"},"addTimer:forMode:":{"abs":"Registers a given timer with a given input mode.","dec":"- (void)addTimer:(NSTimer *)aTimer forMode:(NSString *)mode"},"cancelPerformSelector:target:argument:":{"abs":"Cancels the sending of a previously scheduled message.","dec":"- (void)cancelPerformSelector:(SEL)aSelector target:(id)target argument:(id)anArgument"},"cancelPerformSelectorsWithTarget:":{"abs":"Cancels all outstanding ordered performs scheduled with a given target.","dec":"- (void)cancelPerformSelectorsWithTarget:(id)target"},"currentMode":{"abs":"Returns the receiver's current input mode.","dec":"- (NSString *)currentMode"},"getCFRunLoop":{"abs":"Returns the receiver's underlying CFRunLoop Reference object.","dec":"- (CFRunLoopRef)getCFRunLoop"},"limitDateForMode:":{"abs":"Performs one pass through the run loop in the specified mode and returns the date at which the next timer is scheduled to fire.","dec":"- (NSDate *)limitDateForMode:(NSString *)mode"},"performSelector:target:argument:order:modes:":{"abs":"Schedules the sending of a message on the current run loop.","dec":"- (void)performSelector:(SEL)aSelector target:(id)target argument:(id)anArgument order:(NSUInteger)order modes:(NSArray *)modes"},"removePort:forMode:":{"abs":"Removes a port from the specified input mode of the run loop.","dec":"- (void)removePort:(NSPort *)aPort forMode:(NSString *)mode"},"run":{"abs":"Puts the receiver into a permanent loop, during which time it processes data from all attached input sources.","dec":"- (void)run"},"runMode:beforeDate:":{"abs":"Runs the loop once, blocking for input in the specified mode until a given date.","dec":"- (BOOL)runMode:(NSString *)mode beforeDate:(NSDate *)limitDate"},"runUntilDate:":{"abs":"Runs the loop until the specified date, during which time it processes data from all attached input sources.","dec":"- (void)runUntilDate:(NSDate *)limitDate"}},"[=]":{"NSDefaultRunLoopMode":"","NSRunLoopCommonModes":""}};

ClassRef["NSScanner"] = {"[:]":"NSObject","[+]":{"localizedScannerWithString:":{"abs":"Returns an NSScanner object that scans a given string according to the user’s default locale.","dec":"+ (id)localizedScannerWithString:(NSString *)aString"},"scannerWithString:":{"abs":"Returns an NSScanner object that scans a given string.","dec":"+ (id)scannerWithString:(NSString *)aString"}},"[-]":{"caseSensitive":{"abs":"Returns a Boolean value that indicates whether the receiver distinguishes case in the characters it scans.","dec":"- (BOOL)caseSensitive"},"charactersToBeSkipped":{"abs":"Returns a character set containing the characters the receiver ignores when looking for a scannable element.","dec":"- (NSCharacterSet *)charactersToBeSkipped"},"initWithString:":{"abs":"Returns an NSScanner object initialized to scan a given string.","dec":"- (id)initWithString:(NSString *)aString"},"isAtEnd":{"abs":"Returns a Boolean value that indicates whether the receiver has exhausted all significant characters","dec":"- (BOOL)isAtEnd"},"locale":{"abs":"Returns the receiver’s locale.","dec":"- (id)locale"},"scanCharactersFromSet:intoString:":{"abs":"Scans the string as long as characters from a given character set are encountered, accumulating characters into a string that’s returned by reference.","dec":"- (BOOL)scanCharactersFromSet:(NSCharacterSet *)scanSet intoString:(NSString **)stringValue"},"scanDecimal:":{"abs":"Scans for an NSDecimal value, returning a found value by reference.","dec":"- (BOOL)scanDecimal:(NSDecimal *)decimalValue"},"scanDouble:":{"abs":"Scans for a double value, returning a found value by reference.","dec":"- (BOOL)scanDouble:(double *)doubleValue"},"scanFloat:":{"abs":"Scans for a float value, returning a found value by reference.","dec":"- (BOOL)scanFloat:(float *)floatValue"},"scanHexDouble:":{"abs":"Scans for a double value from a hexadecimal representation, returning a found value by reference.","dec":"- (BOOL)scanHexDouble:(double *)result"},"scanHexFloat:":{"abs":"Scans for a double value from a hexadecimal representation, returning a found value by reference.","dec":"- (BOOL)scanHexFloat:(float *)result"},"scanHexInt:":{"abs":"Scans for an unsigned value from a hexadecimal representation, returning a found value by reference.","dec":"- (BOOL)scanHexInt:(unsigned int *)intValue"},"scanHexLongLong:":{"abs":"Scans for a long long value from a hexadecimal representation, returning a found value by reference.","dec":"- (BOOL)scanHexLongLong:(unsigned long long *)result"},"scanInt:":{"abs":"Scans for an int value from a decimal representation, returning a found value by reference.","dec":"- (BOOL)scanInt:(int *)intValue"},"scanInteger:":{"abs":"Scans for an NSInteger value from a decimal representation, returning a found value by reference","dec":"- (BOOL)scanInteger:(NSInteger *)value"},"scanLocation":{"abs":"Returns the character position at which the receiver will begin its next scanning operation.","dec":"- (NSUInteger)scanLocation"},"scanLongLong:":{"abs":"Scans for a long long value from a decimal representation, returning a found value by reference.","dec":"- (BOOL)scanLongLong:(long long *)longLongValue"},"scanString:intoString:":{"abs":"Scans a given string, returning an equivalent string object by reference if a match is found.","dec":"- (BOOL)scanString:(NSString *)string intoString:(NSString **)stringValue"},"scanUnsignedLongLong:":{"abs":"Scans for an unsigned long long value from a decimal representation, returning a found value by reference.","dec":"- (BOOL)scanLongLong:(unsigned long long *)unsignedLongLongValue"},"scanUpToCharactersFromSet:intoString:":{"abs":"Scans the string until a character from a given character set is encountered, accumulating characters into a string that’s returned by reference.","dec":"- (BOOL)scanUpToCharactersFromSet:(NSCharacterSet *)stopSet intoString:(NSString **)stringValue"},"scanUpToString:intoString:":{"abs":"Scans the string until a given string is encountered, accumulating characters into a string that’s returned by reference.","dec":"- (BOOL)scanUpToString:(NSString *)stopString intoString:(NSString **)stringValue"},"setCaseSensitive:":{"abs":"Sets whether the receiver is case sensitive when scanning characters.","dec":"- (void)setCaseSensitive:(BOOL)flag"},"setCharactersToBeSkipped:":{"abs":"Sets the set of characters to ignore when scanning for a value representation.","dec":"- (void)setCharactersToBeSkipped:(NSCharacterSet *)skipSet"},"setLocale:":{"abs":"Sets the receiver’s locale to a given locale.","dec":"- (void)setLocale:(id)aLocale"},"setScanLocation:":{"abs":"Sets the location at which the next scan operation will begin to a given index.","dec":"- (void)setScanLocation:(NSUInteger)index"},"string":{"abs":"Returns the string with which the receiver was created or initialized.","dec":"- (NSString *)string"}}};

ClassRef["NSSet"] = {"[:]":"NSObject","[+]":{"set":{"abs":"Creates and returns an empty set.","dec":"+ (instancetype)set"},"setWithArray:":{"abs":"Creates and returns a set containing a uniqued collection of the objects contained in a given array.","dec":"+ (instancetype)setWithArray:(NSArray *)array"},"setWithObject:":{"abs":"Creates and returns a set that contains a single given object.","dec":"+ (instancetype)setWithObject:(id)object"},"setWithObjects:":{"abs":"Creates and returns a set containing the objects in a given argument list.","dec":"+ (instancetype)setWithObjects:(id)firstObj, ..."},"setWithObjects:count:":{"abs":"Creates and returns a set containing a specified number of objects from a given C array of objects.","dec":"+ (instancetype)setWithObjects:(const id [])objects count:(NSUInteger)cnt"},"setWithSet:":{"abs":"Creates and returns a set containing the objects from another set.","dec":"+ (instancetype)setWithSet:(NSSet *)set"}},"[-]":{"addObserver:forKeyPath:options:context:":{"abs":"Raises an exception.","dec":"- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context"},"allObjects":{"abs":"Returns an array containing the set’s members, or an empty array if the set has no members.","dec":"- (NSArray *)allObjects"},"anyObject":{"abs":"Returns one of the objects in the set, or nil if the set contains no objects.","dec":"- (id)anyObject"},"containsObject:":{"abs":"Returns a Boolean value that indicates whether a given object is present in the set.","dec":"- (BOOL)containsObject:(id)anObject"},"count":{"abs":"Returns the number of members in the set.","dec":"- (NSUInteger)count"},"description":{"abs":"Returns a string that represents the contents of the set, formatted as a property list.","dec":"- (NSString *)description"},"descriptionWithLocale:":{"abs":"Returns a string that represents the contents of the set, formatted as a property list.","dec":"- (NSString *)descriptionWithLocale:(id)locale"},"enumerateObjectsUsingBlock:":{"abs":"Executes a given Block using each object in the set.","dec":"- (void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block"},"enumerateObjectsWithOptions:usingBlock:":{"abs":"Executes a given Block using each object in the set, using the specified enumeration options.","dec":"- (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block"},"filteredSetUsingPredicate:":{"abs":"Evaluates a given predicate against each object in the receiving set and returns a new set containing the objects for which the predicate returns true.","dec":"- (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate"},"init":{"abs":"Initializes a newly allocated set.","dec":"- (instancetype)init"},"initWithArray:":{"abs":"Initializes a newly allocated set with the objects that are contained in a given array.","dec":"- (instancetype)initWithArray:(NSArray *)array"},"initWithObjects:":{"abs":"Initializes a newly allocated set with members taken from the specified list of objects.","dec":"- (instancetype)initWithObjects:(id)firstObj, ..."},"initWithObjects:count:":{"abs":"Initializes a newly allocated set with a specified number of objects from a given C array of objects.","dec":"- (instancetype)initWithObjects:(const id [])objects count:(NSUInteger)cnt"},"initWithSet:":{"abs":"Initializes a newly allocated set and adds to it objects from another given set.","dec":"- (instancetype)initWithSet:(NSSet *)set"},"initWithSet:copyItems:":{"abs":"Initializes a newly allocated set and adds to it members of another given set.","dec":"- (instancetype)initWithSet:(NSSet *)set copyItems:(BOOL)flag"},"intersectsSet:":{"abs":"Returns a Boolean value that indicates whether at least one object in the receiving set is also present in another given set.","dec":"- (BOOL)intersectsSet:(NSSet *)otherSet"},"isEqualToSet:":{"abs":"Compares the receiving set to another set.","dec":"- (BOOL)isEqualToSet:(NSSet *)otherSet"},"isSubsetOfSet:":{"abs":"Returns a Boolean value that indicates whether every object in the receiving set is also present in another given set.","dec":"- (BOOL)isSubsetOfSet:(NSSet *)otherSet"},"makeObjectsPerformSelector:":{"abs":"Sends a message specified by a given selector to each object in the set.","dec":"- (void)makeObjectsPerformSelector:(SEL)aSelector"},"makeObjectsPerformSelector:withObject:":{"abs":"Sends a message specified by a given selector to each object in the set.","dec":"- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument"},"member:":{"abs":"Determines whether the set contains an object equal to a given object, and returns that object if it is present.","dec":"- (id)member:(id)object"},"objectEnumerator":{"abs":"Returns an enumerator object that lets you access each object in the set.","dec":"- (NSEnumerator *)objectEnumerator"},"objectsPassingTest:":{"abs":"Returns a set of object that pass a test in a given Block.","dec":"- (NSSet *)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate"},"objectsWithOptions:passingTest:":{"abs":"Returns a set of object that pass a test in a given Block, using the specified enumeration options.","dec":"- (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate"},"removeObserver:forKeyPath:":{"abs":"Raises an exception.","dec":"- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath"},"removeObserver:forKeyPath:context:":{"abs":"Raises an exception.","dec":"- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context"},"setByAddingObject:":{"abs":"Returns a new set formed by adding a given object to the receiving set.","dec":"- (NSSet *)setByAddingObject:(id)anObject"},"setByAddingObjectsFromArray:":{"abs":"Returns a new set formed by adding the objects in a given array to the receiving set.","dec":"- (NSSet *)setByAddingObjectsFromArray:(NSArray *)other"},"setByAddingObjectsFromSet:":{"abs":"Returns a new set formed by adding the objects in a given set to the receiving set.","dec":"- (NSSet *)setByAddingObjectsFromSet:(NSSet *)other"},"setValue:forKey:":{"abs":"Invokes setValue:forKey: on each of the set’s members.","dec":"- (void)setValue:(id)value forKey:(NSString *)key"},"sortedArrayUsingDescriptors:":{"abs":"Returns an array of the set’s content sorted as specified by a given array of sort descriptors.","dec":"- (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors"},"valueForKey:":{"abs":"Return a set containing the results of invoking valueForKey: on each of the receiving set's members.","dec":"- (id)valueForKey:(NSString *)key"}}};

ClassRef.NSShadow = {"[:]":"NSObject","[.]":{"shadowBlurRadius":{"abs":"The blur radius of the shadow.","dec":"@property (nonatomic, assign) CGFloat shadowBlurRadius"},"shadowColor":{"abs":"The color of the shadow.","dec":"@property (nonatomic, retain) id shadowColor"},"shadowOffset":{"abs":"The offset values of the shadow.","dec":"@property (nonatomic, assign) CGSize shadowOffset"}}};

ClassRef["NSSortDescriptor"] = {"[:]":"NSObject","[+]":{"sortDescriptorWithKey:ascending:":{"abs":"Creates and returns an NSSortDescriptor with the specified key and ordering.","dec":"+ (id)sortDescriptorWithKey:(NSString *)key ascending:(BOOL)ascending"},"sortDescriptorWithKey:ascending:comparator:":{"abs":"Creates and returns an NSSortDescriptor object initialized to do with the given ordering and comparator block.","dec":"+ (id)sortDescriptorWithKey:(NSString *)key ascending:(BOOL)ascending comparator:(NSComparator)cmptr"},"sortDescriptorWithKey:ascending:selector:":{"abs":"Creates an NSSortDescriptor with the specified ordering and comparison selector.","dec":"+ (id)sortDescriptorWithKey:(NSString *)key ascending:(BOOL)ascending selector:(SEL)selector"}},"[-]":{"allowEvaluation":{"abs":"Force a sort descriptor that was securely decoded to allow evaluation.","dec":"- (void)allowEvaluation"},"ascending":{"abs":"Returns a Boolean value that indicates whether the receiver specifies sorting in ascending order.","dec":"- (BOOL)ascending"},"comparator":{"abs":"Creates and returns an NSComparator for the sort descriptor.","dec":"- (NSComparator)comparator"},"compareObject:toObject:":{"abs":"Returns an NSComparisonResult value that indicates the ordering of two given objects.","dec":"- (NSComparisonResult)compareObject:(id)object1 toObject:(id)object2"},"initWithKey:ascending:":{"abs":"Returns an NSSortDescriptor object initialized with a given property key path and sort order, and with the default comparison selector.","dec":"- (id)initWithKey:(NSString *)keyPath ascending:(BOOL)ascending"},"initWithKey:ascending:comparator:":{"abs":"Returns an NSSortDescriptor object initialized to do with the given ordering and comparator block.","dec":"- (id)initWithKey:(NSString *)key ascending:(BOOL)ascending comparator:(NSComparator)cmptr"},"initWithKey:ascending:selector:":{"abs":"Returns an NSSortDescriptor object initialized with a given property key path, sort order, and comparison selector.","dec":"- (id)initWithKey:(NSString *)keyPath ascending:(BOOL)ascending selector:(SEL)selector"},"key":{"abs":"Returns the receiver’s property key path.","dec":"- (NSString *)key"},"reversedSortDescriptor":{"abs":"Returns a copy of the receiver with the sort order reversed.","dec":"- (id)reversedSortDescriptor"},"selector":{"abs":"Returns the selector the receiver specifies to use when comparing objects.","dec":"- (SEL)selector"}}};

ClassRef["NSStream"] = {"[:]":"NSObject","[-]":{"close":{"abs":"Closes the receiver.","dec":"- (void)close"},"delegate":{"abs":"Returns the receiver’s delegate.","dec":"- (id < NSStreamDelegate >)delegate"},"open":{"abs":"Opens the receiving stream.","dec":"- (void)open"},"propertyForKey:":{"abs":"Returns the receiver’s property for a given key.","dec":"- (id)propertyForKey:(NSString *)key"},"removeFromRunLoop:forMode:":{"abs":"Removes the receiver from a given run loop running in a given mode.","dec":"- (void)removeFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode"},"scheduleInRunLoop:forMode:":{"abs":"Schedules the receiver on a given run loop in a given mode.","dec":"- (void)scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode"},"setDelegate:":{"abs":"Sets the receiver’s delegate.","dec":"- (void)setDelegate:(id < NSStreamDelegate >)delegate"},"setProperty:forKey:":{"abs":"Attempts to set the value of a given property of the receiver and returns a Boolean value that indicates whether the value is accepted by the receiver.","dec":"- (BOOL)setProperty:(id)property forKey:(NSString *)key"},"streamError":{"abs":"Returns an NSError object representing the stream error.","dec":"- (NSError *)streamError"},"streamStatus":{"abs":"Returns the receiver’s status.","dec":"- (NSStreamStatus)streamStatus"}},"[=]":{"NSStreamStatusNotOpen":"","NSStreamStatusOpening":"","NSStreamStatusOpen":"","NSStreamStatusReading":"","NSStreamStatusWriting":"","NSStreamStatusAtEnd":"","NSStreamStatusClosed":"","NSStreamStatusError":"","NSStreamEventNone":"","NSStreamEventOpenCompleted":"","NSStreamEventHasBytesAvailable":"","NSStreamEventHasSpaceAvailable":"","NSStreamEventErrorOccurred":"","NSStreamEventEndEncountered":"","NSStreamSocketSecurityLevelKey":"","NSStreamSOCKSProxyConfigurationKey":"","NSStreamDataWrittenToMemoryStreamKey":"","NSStreamFileCurrentOffsetKey":"","NSStreamNetworkServiceType":"","NSStreamSocketSSLErrorDomain":"","NSStreamSOCKSErrorDomain":"","NSStreamSocketSecurityLevelNone":"","NSStreamSocketSecurityLevelSSLv2":"","NSStreamSocketSecurityLevelSSLv3":"","NSStreamSocketSecurityLevelTLSv1":"","NSStreamSocketSecurityLevelNegotiatedSSL":"","NSStreamSOCKSProxyHostKey":"","NSStreamSOCKSProxyPortKey":"","NSStreamSOCKSProxyVersionKey":"","NSStreamSOCKSProxyUserKey":"","NSStreamSOCKSProxyPasswordKey":"","NSStreamSOCKSProxyVersion4":"","NSStreamSOCKSProxyVersion5":"","NSStreamNetworkServiceTypeVoIP":"","NSStreamNetworkServiceTypeVideo":"","NSStreamNetworkServiceTypeBackground":"","NSStreamNetworkServiceTypeVoice":""}};

ClassRef["NSString UIKit Additions"] = {"[:]":"NSObject","[-]":{"boundingRectWithSize:options:attributes:context:":{"abs":"Calculates and returns the bounding rect for the receiver drawn using the given options and display characteristics, within the specified rectangle in the current graphics context.","dec":"- (CGRect)boundingRectWithSize:(CGSize)size options:(NSStringDrawingOptions)options attributes:(NSDictionary *)attributes context:(NSStringDrawingContext *)context"},"drawAtPoint:withAttributes:":{"abs":"Draws the receiver with the font and other display characteristics of the given attributes, at the specified point in the current graphics context.","dec":"- (void)drawAtPoint:(CGPoint)point withAttributes:(NSDictionary *)attrs"},"drawInRect:withAttributes:":{"abs":"Draws the attributed string inside the specified bounding rectangle in the current graphics context.","dec":"- (void)drawInRect:(CGRect)rect withAttributes:(NSDictionary *)attrs"},"drawWithRect:options:attributes:context:":{"abs":"Draws the attributed string in the specified bounding rectangle using the provided options.","dec":"- (void)drawWithRect:(CGRect)rect options:(NSStringDrawingOptions)options attributes:(NSDictionary *)attributes context:(NSStringDrawingContext *)context"},"sizeWithAttributes:":{"abs":"Returns the bounding box size the receiver occupies when drawn with the given attributes.","dec":"- (CGSize)sizeWithAttributes:(NSDictionary *)attrs"}},"[=]":{"UILineBreakModeWordWrap":"","UILineBreakModeCharacterWrap":"","UILineBreakModeClip":"","UILineBreakModeHeadTruncation":"","UILineBreakModeTailTruncation":"","UILineBreakModeMiddleTruncation":"","NSTextAlignmentLeft":"","NSTextAlignmentCenter":"","NSTextAlignmentRight":"","NSTextAlignmentJustified":"","NSTextAlignmentNatural":"","UITextAlignmentLeft":"","UITextAlignmentCenter":"","UITextAlignmentRight":"","UIBaselineAdjustmentAlignBaselines":"","UIBaselineAdjustmentAlignCenters":"","UIBaselineAdjustmentNone":"","NSWritingDirectionNatural":"","NSWritingDirectionLeftToRight":"","NSWritingDirectionRightToLeft":"","UITextAttributeFont":"","UITextAttributeTextColor":"","UITextAttributeTextShadowColor":"","UITextAttributeTextShadowOffset":""}};

ClassRef["NSString"] = {"[:]":"NSObject","[+]":{"availableStringEncodings":{"abs":"Returns a zero-terminated list of the encodings string objects support in the application’s environment.","dec":"+ (const NSStringEncoding *)availableStringEncodings"},"defaultCStringEncoding":{"abs":"Returns the C-string encoding assumed for any method accepting a C string as an argument.","dec":"+ (NSStringEncoding)defaultCStringEncoding"},"localizedNameOfStringEncoding:":{"abs":"Returns a human-readable string giving the name of a given encoding.","dec":"+ (NSString *)localizedNameOfStringEncoding:(NSStringEncoding)encoding"},"localizedStringWithFormat:":{"abs":"Returns a string created by using a given format string as a template into which the remaining argument values are substituted according to the user's default locale.","dec":"+ (instancetype)localizedStringWithFormat:(NSString *)format, ..."},"pathWithComponents:":{"abs":"Returns a string built from the strings in a given array by concatenating them with a path separator between each pair.","dec":"+ (NSString *)pathWithComponents:(NSArray *)components"},"string":{"abs":"Returns an empty string.","dec":"+ (instancetype)string"},"stringWithCharacters:length:":{"abs":"Returns a string containing a given number of characters taken from a given C array of Unicode characters.","dec":"+ (instancetype)stringWithCharacters:(const unichar *)chars length:(NSUInteger)length"},"stringWithContentsOfFile:encoding:error:":{"abs":"Returns a string created by reading data from the file at a given path interpreted using a given encoding.","dec":"+ (instancetype)stringWithContentsOfFile:(NSString *)path encoding:(NSStringEncoding)enc error:(NSError **)error"},"stringWithContentsOfFile:usedEncoding:error:":{"abs":"Returns a string created by reading data from the file at a given path and returns by reference the encoding used to interpret the file.","dec":"+ (instancetype)stringWithContentsOfFile:(NSString *)path usedEncoding:(NSStringEncoding *)enc error:(NSError **)error"},"stringWithContentsOfURL:encoding:error:":{"abs":"Returns a string created by reading data from a given URL interpreted using a given encoding.","dec":"+ (instancetype)stringWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error"},"stringWithContentsOfURL:usedEncoding:error:":{"abs":"Returns a string created by reading data from a given URL and returns by reference the encoding used to interpret the data.","dec":"+ (instancetype)stringWithContentsOfURL:(NSURL *)url usedEncoding:(NSStringEncoding *)enc error:(NSError **)error"},"stringWithCString:encoding:":{"abs":"Returns a string containing the bytes in a given C array, interpreted according to a given encoding.","dec":"+ (instancetype)stringWithCString:(const char *)cString encoding:(NSStringEncoding)enc"},"stringWithFormat:":{"abs":"Returns a string created by using a given format string as a template into which the remaining argument values are substituted.","dec":"+ (instancetype)stringWithFormat:(NSString *)format,, ..."},"stringWithString:":{"abs":"Returns a string created by copying the characters from another given string.","dec":"+ (instancetype)stringWithString:(NSString *)aString"},"stringWithUTF8String:":{"abs":"Returns a string created by copying the data from a given C array of UTF8-encoded bytes.","dec":"+ (instancetype)stringWithUTF8String:(const char *)bytes"}},"[-]":{"boolValue":{"abs":"Returns the Boolean value of the receiver’s text.","dec":"- (BOOL)boolValue"},"canBeConvertedToEncoding:":{"abs":"Returns a Boolean value that indicates whether the receiver can be converted to a given encoding without loss of information.","dec":"- (BOOL)canBeConvertedToEncoding:(NSStringEncoding)encoding"},"capitalizedString":{"abs":"Returns a capitalized representation of the receiver.","dec":"- (NSString *)capitalizedString"},"capitalizedStringWithLocale:":{"abs":"Returns a capitalized representation of the receiver using the specified locale.","dec":"- (NSString *)capitalizedStringWithLocale:(NSLocale *)locale"},"caseInsensitiveCompare:":{"abs":"Returns the result of invoking compare:options: with NSCaseInsensitiveSearch as the only option.","dec":"- (NSComparisonResult)caseInsensitiveCompare:(NSString *)aString"},"characterAtIndex:":{"abs":"Returns the character at a given array position.","dec":"- (unichar)characterAtIndex:(NSUInteger)index"},"commonPrefixWithString:options:":{"abs":"Returns a string containing characters the receiver and a given string have in common, starting from the beginning of each up to the first characters that aren’t equivalent.","dec":"- (NSString *)commonPrefixWithString:(NSString *)aString options:(NSStringCompareOptions)mask"},"compare:":{"abs":"Returns the result of invoking compare:options:range: with no options and the receiver’s full extent as the range.","dec":"- (NSComparisonResult)compare:(NSString *)aString"},"compare:options:":{"abs":"Compares the string with the specified string using the given options.","dec":"- (NSComparisonResult)compare:(NSString *)aString options:(NSStringCompareOptions)mask"},"compare:options:range:":{"abs":"Returns the result of invoking compare:options:range:locale: with a nil locale.","dec":"- (NSComparisonResult)compare:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)range"},"compare:options:range:locale:":{"abs":"Compares the string using the specified options and returns the lexical ordering for the range.","dec":"- (NSComparisonResult)compare:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)range locale:(id)locale"},"completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:":{"abs":"Interprets the receiver as a path in the file system and attempts to perform filename completion, returning a numeric value that indicates whether a match was possible, and by reference the longest path that matches the receiver.","dec":"- (NSUInteger)completePathIntoString:(NSString **)outputName caseSensitive:(BOOL)flag matchesIntoArray:(NSArray **)outputArray filterTypes:(NSArray *)filterTypes"},"componentsSeparatedByCharactersInSet:":{"abs":"Returns an array containing substrings from the receiver that have been divided by characters in a given set.","dec":"- (NSArray *)componentsSeparatedByCharactersInSet:(NSCharacterSet *)separator"},"componentsSeparatedByString:":{"abs":"Returns an array containing substrings from the receiver that have been divided by a given separator.","dec":"- (NSArray *)componentsSeparatedByString:(NSString *)separator"},"cStringUsingEncoding:":{"abs":"Returns a representation of the receiver as a C string using a given encoding.","dec":"- (const char *)cStringUsingEncoding:(NSStringEncoding)encoding"},"dataUsingEncoding:":{"abs":"Returns an NSData object containing a representation of the receiver encoded using a given encoding.","dec":"- (NSData *)dataUsingEncoding:(NSStringEncoding)encoding"},"dataUsingEncoding:allowLossyConversion:":{"abs":"Returns an NSData object containing a representation of the receiver encoded using a given encoding.","dec":"- (NSData *)dataUsingEncoding:(NSStringEncoding)encoding allowLossyConversion:(BOOL)flag"},"decomposedStringWithCanonicalMapping":{"abs":"Returns a string made by normalizing the receiver’s contents using Form D.","dec":"- (NSString *)decomposedStringWithCanonicalMapping"},"decomposedStringWithCompatibilityMapping":{"abs":"Returns a string made by normalizing the receiver’s contents using Form KD.","dec":"- (NSString *)decomposedStringWithCompatibilityMapping"},"description":{"abs":"Returns the receiver.","dec":"- (NSString *)description"},"doubleValue":{"abs":"Returns the floating-point value of the receiver’s text as a double.","dec":"- (double)doubleValue"},"enumerateLinesUsingBlock:":{"abs":"Enumerates all the lines in a string.","dec":"- (void)enumerateLinesUsingBlock:(void (^)(NSString *line, BOOL *stop))block"},"enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:":{"abs":"Performs linguistic analysis on the specified string by enumerating the specific range of the string, providing the Block with the located tags.","dec":"- (void)enumerateLinguisticTagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts orthography:(NSOrthography *)orthography usingBlock:(void (^)(NSString *tag, NSRange tokenRange, NSRange sentenceRange, BOOL *stop))block"},"enumerateSubstringsInRange:options:usingBlock:":{"abs":"Enumerates the substrings of the specified type in the specified range of the string.","dec":"- (void)enumerateSubstringsInRange:(NSRange)range options:(NSStringEnumerationOptions)opts usingBlock:(void (^)(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop))block"},"fastestEncoding":{"abs":"Returns the fastest encoding to which the receiver may be converted without loss of information.","dec":"- (NSStringEncoding)fastestEncoding"},"fileSystemRepresentation":{"abs":"Returns a file system-specific representation of the receiver.","dec":"- (const char *)fileSystemRepresentation"},"floatValue":{"abs":"Returns the floating-point value of the receiver’s text as a float.","dec":"- (float)floatValue"},"getBytes:maxLength:usedLength:encoding:options:range:remainingRange:":{"abs":"Gets a given range of characters as bytes in a specified encoding.","dec":"- (BOOL)getBytes:(void *)buffer maxLength:(NSUInteger)maxBufferCount usedLength:(NSUInteger *)usedBufferCount encoding:(NSStringEncoding)encoding options:(NSStringEncodingConversionOptions)options range:(NSRange)range remainingRange:(NSRangePointer)leftover"},"getCharacters:range:":{"abs":"Copies characters from a given range in the receiver into a given buffer.","dec":"- (void)getCharacters:(unichar *)buffer range:(NSRange)aRange"},"getCString:maxLength:encoding:":{"abs":"Converts the receiver’s content to a given encoding and stores them in a buffer.","dec":"- (BOOL)getCString:(char *)buffer maxLength:(NSUInteger)maxBufferCount encoding:(NSStringEncoding)encoding"},"getFileSystemRepresentation:maxLength:":{"abs":"Interprets the receiver as a system-independent path and fills a buffer with a C-string in a format and encoding suitable for use with file-system calls.","dec":"- (BOOL)getFileSystemRepresentation:(char *)buffer maxLength:(NSUInteger)maxLength"},"getLineStart:end:contentsEnd:forRange:":{"abs":"Returns by reference the beginning of the first line and the end of the last line touched by the given range.","dec":"- (void)getLineStart:(NSUInteger *)startIndex end:(NSUInteger *)lineEndIndex contentsEnd:(NSUInteger *)contentsEndIndex forRange:(NSRange)aRange"},"getParagraphStart:end:contentsEnd:forRange:":{"abs":"Returns by reference the beginning of the first paragraph and the end of the last paragraph touched by the given range.","dec":"- (void)getParagraphStart:(NSUInteger *)startIndex end:(NSUInteger *)endIndex contentsEnd:(NSUInteger *)contentsEndIndex forRange:(NSRange)aRange"},"hash":{"abs":"Returns an unsigned integer that can be used as a hash table address.","dec":"- (NSUInteger)hash"},"hasPrefix:":{"abs":"Returns a Boolean value that indicates whether a given string matches the beginning characters of the receiver.","dec":"- (BOOL)hasPrefix:(NSString *)aString"},"hasSuffix:":{"abs":"Returns a Boolean value that indicates whether a given string matches the ending characters of the receiver.","dec":"- (BOOL)hasSuffix:(NSString *)aString"},"init":{"abs":"Returns an initialized NSString object that contains no characters.","dec":"- (instancetype)init"},"initWithBytes:length:encoding:":{"abs":"Returns an initialized NSString object containing a given number of bytes from a given buffer of bytes interpreted in a given encoding.","dec":"- (instancetype)initWithBytes:(const void *)bytes length:(NSUInteger)length encoding:(NSStringEncoding)encoding"},"initWithBytesNoCopy:length:encoding:freeWhenDone:":{"abs":"Returns an initialized NSString object that contains a given number of bytes from a given buffer of bytes interpreted in a given encoding, and optionally frees the buffer.","dec":"- (instancetype)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length encoding:(NSStringEncoding)encoding freeWhenDone:(BOOL)flag"},"initWithCharacters:length:":{"abs":"Returns an initialized NSString object that contains a given number of characters from a given C array of Unicode characters.","dec":"- (instancetype)initWithCharacters:(const unichar *)characters length:(NSUInteger)length"},"initWithCharactersNoCopy:length:freeWhenDone:":{"abs":"Returns an initialized NSString object that contains a given number of characters from a given C array of Unicode characters.","dec":"- (instancetype)initWithCharactersNoCopy:(unichar *)characters length:(NSUInteger)length freeWhenDone:(BOOL)flag"},"initWithContentsOfFile:encoding:error:":{"abs":"Returns an NSString object initialized by reading data from the file at a given path using a given encoding.","dec":"- (instancetype)initWithContentsOfFile:(NSString *)path encoding:(NSStringEncoding)enc error:(NSError **)error"},"initWithContentsOfFile:usedEncoding:error:":{"abs":"Returns an NSString object initialized by reading data from the file at a given path and returns by reference the encoding used to interpret the characters.","dec":"- (instancetype)initWithContentsOfFile:(NSString *)path usedEncoding:(NSStringEncoding *)enc error:(NSError **)error"},"initWithContentsOfURL:encoding:error:":{"abs":"Returns an NSString object initialized by reading data from a given URL interpreted using a given encoding.","dec":"- (instancetype)initWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error"},"initWithContentsOfURL:usedEncoding:error:":{"abs":"Returns an NSString object initialized by reading data from a given URL and returns by reference the encoding used to interpret the data.","dec":"- (instancetype)initWithContentsOfURL:(NSURL *)url usedEncoding:(NSStringEncoding *)enc error:(NSError **)error"},"initWithCString:encoding:":{"abs":"Returns an NSString object initialized using the characters in a given C array, interpreted according to a given encoding.","dec":"- (instancetype)initWithCString:(const char *)nullTerminatedCString encoding:(NSStringEncoding)encoding"},"initWithData:encoding:":{"abs":"Returns an NSString object initialized by converting given data into Unicode characters using a given encoding.","dec":"- (instancetype)initWithData:(NSData *)data encoding:(NSStringEncoding)encoding"},"initWithFormat:":{"abs":"Returns an NSString object initialized by using a given format string as a template into which the remaining argument values are substituted.","dec":"- (instancetype)initWithFormat:(NSString *)format, ..."},"initWithFormat:arguments:":{"abs":"Returns an NSString object initialized by using a given format string as a template into which the remaining argument values are substituted according to the user’s default locale.","dec":"- (instancetype)initWithFormat:(NSString *)format arguments:(va_list)argList"},"initWithFormat:locale:":{"abs":"Returns an NSString object initialized by using a given format string as a template into which the remaining argument values are substituted according to given locale information.","dec":"- (instancetype)initWithFormat:(NSString *)format locale:(id)locale, ..."},"initWithFormat:locale:arguments:":{"abs":"Returns an NSString object initialized by using a given format string as a template into which the remaining argument values are substituted according to given locale information.","dec":"- (instancetype)initWithFormat:(NSString *)format locale:(id)locale arguments:(va_list)argList"},"initWithString:":{"abs":"Returns an NSString object initialized by copying the characters from another given string.","dec":"- (instancetype)initWithString:(NSString *)aString"},"initWithUTF8String:":{"abs":"Returns an NSString object initialized by copying the characters from a given C array of UTF8-encoded bytes.","dec":"- (instancetype)initWithUTF8String:(const char *)bytes"},"integerValue":{"abs":"Returns the NSInteger value of the receiver’s text.","dec":"- (NSInteger)integerValue"},"intValue":{"abs":"Returns the integer value of the receiver’s text.","dec":"- (int)intValue"},"isAbsolutePath":{"abs":"Returning a Boolean value that indicates whether the receiver represents an absolute path.","dec":"- (BOOL)isAbsolutePath"},"isEqualToString:":{"abs":"Returns a Boolean value that indicates whether a given string is equal to the receiver using a literal Unicode-based comparison.","dec":"- (BOOL)isEqualToString:(NSString *)aString"},"lastPathComponent":{"abs":"Returns the last path component of the receiver.","dec":"- (NSString *)lastPathComponent"},"length":{"abs":"Returns the number of Unicode characters in the receiver.","dec":"- (NSUInteger)length"},"lengthOfBytesUsingEncoding:":{"abs":"Returns the number of bytes required to store the receiver in a given encoding.","dec":"- (NSUInteger)lengthOfBytesUsingEncoding:(NSStringEncoding)enc"},"lineRangeForRange:":{"abs":"Returns the range of characters representing the line or lines containing a given range.","dec":"- (NSRange)lineRangeForRange:(NSRange)aRange"},"linguisticTagsInRange:scheme:options:orthography:tokenRanges:":{"abs":"Returns an array of linguistic tags for the specified range and requested tags within the receiving string.","dec":"- (NSArray *)linguisticTagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts orthography:(NSOrthography *)orthography tokenRanges:(NSArray **)tokenRanges"},"localizedCaseInsensitiveCompare:":{"abs":"Compares the string and a given string using a case-insensitive, localized, comparison.","dec":"- (NSComparisonResult)localizedCaseInsensitiveCompare:(NSString *)aString"},"localizedCompare:":{"abs":"Compares the string and a given string using a localized comparison.","dec":"- (NSComparisonResult)localizedCompare:(NSString *)aString"},"localizedStandardCompare:":{"abs":"Compares strings as sorted by the Finder.","dec":"- (NSComparisonResult)localizedStandardCompare:(NSString *)string"},"longLongValue":{"abs":"Returns the long long value of the receiver’s text.","dec":"- (long long)longLongValue"},"lowercaseString":{"abs":"Returns lowercased representation of the receiver.","dec":"- (NSString *)lowercaseString"},"lowercaseStringWithLocale:":{"abs":"Returns a version of the string with all letters converted to lowercase, taking into account the specified locale.","dec":"- (NSString *)lowercaseStringWithLocale:(NSLocale *)locale"},"maximumLengthOfBytesUsingEncoding:":{"abs":"Returns the maximum number of bytes needed to store the receiver in a given encoding.","dec":"- (NSUInteger)maximumLengthOfBytesUsingEncoding:(NSStringEncoding)enc"},"paragraphRangeForRange:":{"abs":"Returns the range of characters representing the paragraph or paragraphs containing a given range.","dec":"- (NSRange)paragraphRangeForRange:(NSRange)aRange"},"pathComponents":{"abs":"Returns an array of NSString objects containing, in order, each path component of the receiver.","dec":"- (NSArray *)pathComponents"},"pathExtension":{"abs":"Interprets the receiver as a path and returns the receiver’s extension, if any.","dec":"- (NSString *)pathExtension"},"precomposedStringWithCanonicalMapping":{"abs":"Returns a string made by normalizing the receiver’s contents using Form C.","dec":"- (NSString *)precomposedStringWithCanonicalMapping"},"precomposedStringWithCompatibilityMapping":{"abs":"Returns a string made by normalizing the receiver’s contents using Form KC.","dec":"- (NSString *)precomposedStringWithCompatibilityMapping"},"propertyList":{"abs":"Parses the receiver as a text representation of a property list, returning an NSString, NSData, NSArray, or NSDictionary object, according to the topmost element.","dec":"- (id)propertyList"},"propertyListFromStringsFileFormat":{"abs":"Returns a dictionary object initialized with the keys and values found in the receiver.","dec":"- (NSDictionary *)propertyListFromStringsFileFormat"},"rangeOfCharacterFromSet:":{"abs":"Finds and returns the range in the receiver of the first character from a given character set.","dec":"- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet"},"rangeOfCharacterFromSet:options:":{"abs":"Finds and returns the range in the receiver of the first character, using given options, from a given character set.","dec":"- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask"},"rangeOfCharacterFromSet:options:range:":{"abs":"Finds and returns the range in the receiver of the first character from a given character set found in a given range with given options.","dec":"- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask range:(NSRange)aRange"},"rangeOfComposedCharacterSequenceAtIndex:":{"abs":"Returns the range in the receiver of the composed character sequence located at a given index.","dec":"- (NSRange)rangeOfComposedCharacterSequenceAtIndex:(NSUInteger)anIndex"},"rangeOfComposedCharacterSequencesForRange:":{"abs":"Returns the range in the string of the composed character sequences for a given range.","dec":"- (NSRange)rangeOfComposedCharacterSequencesForRange:(NSRange)range"},"rangeOfString:":{"abs":"Finds and returns the range of the first occurrence of a given string within the receiver.","dec":"- (NSRange)rangeOfString:(NSString *)aString"},"rangeOfString:options:":{"abs":"Finds and returns the range of the first occurrence of a given string within the receiver, subject to given options.","dec":"- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask"},"rangeOfString:options:range:":{"abs":"Finds and returns the range of the first occurrence of a given string, within the given range of the receiver, subject to given options.","dec":"- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)aRange"},"rangeOfString:options:range:locale:":{"abs":"Finds and returns the range of the first occurrence of a given string within a given range of the receiver, subject to given options, using the specified locale, if any.","dec":"- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)searchRange locale:(NSLocale *)locale"},"smallestEncoding":{"abs":"Returns the smallest encoding to which the receiver can be converted without loss of information.","dec":"- (NSStringEncoding)smallestEncoding"},"stringByAbbreviatingWithTildeInPath":{"abs":"Returns a new string that replaces the current home directory portion of the current path with a tilde (~) character.","dec":"- (NSString *)stringByAbbreviatingWithTildeInPath"},"stringByAddingPercentEncodingWithAllowedCharacters:":{"abs":"Returns a new string made from the receiver by replacing all characters not in the specified set with percent encoded characters.","dec":"- (NSString *)stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet *)allowedCharacters"},"stringByAddingPercentEscapesUsingEncoding:":{"abs":"Returns a representation of the receiver using a given encoding to determine the percent escapes necessary to convert the receiver into a legal URL string.","dec":"- (NSString *)stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)encoding"},"stringByAppendingFormat:":{"abs":"Returns a string made by appending to the receiver a string constructed from a given format string and the following arguments.","dec":"- (NSString *)stringByAppendingFormat:(NSString *)format, ..."},"stringByAppendingPathComponent:":{"abs":"Returns a new string made by appending to the receiver a given string.","dec":"- (NSString *)stringByAppendingPathComponent:(NSString *)aString"},"stringByAppendingPathExtension:":{"abs":"Returns a new string made by appending to the receiver an extension separator followed by a given extension.","dec":"- (NSString *)stringByAppendingPathExtension:(NSString *)ext"},"stringByAppendingString:":{"abs":"Returns a new string made by appending a given string to the receiver.","dec":"- (NSString *)stringByAppendingString:(NSString *)aString"},"stringByDeletingLastPathComponent":{"abs":"Returns a new string made by deleting the last path component from the receiver, along with any final path separator.","dec":"- (NSString *)stringByDeletingLastPathComponent"},"stringByDeletingPathExtension":{"abs":"Returns a new string made by deleting the extension (if any, and only the last) from the receiver.","dec":"- (NSString *)stringByDeletingPathExtension"},"stringByExpandingTildeInPath":{"abs":"Returns a new string made by expanding the initial component of the receiver to its full path value.","dec":"- (NSString *)stringByExpandingTildeInPath"},"stringByFoldingWithOptions:locale:":{"abs":"Returns a string with the given character folding options applied.","dec":"- (NSString *)stringByFoldingWithOptions:(NSStringCompareOptions)options locale:(NSLocale *)locale"},"stringByPaddingToLength:withString:startingAtIndex:":{"abs":"Returns a new string formed from the receiver by either removing characters from the end, or by appending as many occurrences as necessary of a given pad string.","dec":"- (NSString *)stringByPaddingToLength:(NSUInteger)newLength withString:(NSString *)padString startingAtIndex:(NSUInteger)padIndex"},"stringByRemovingPercentEncoding":{"abs":"Returns a new string made from the receiver by replacing all percent encoded sequences with the matching UTF-8 characters.","dec":"- (NSString *)stringByRemovingPercentEncoding"},"stringByReplacingCharactersInRange:withString:":{"abs":"Returns a new string in which the characters in a specified range of the receiver are replaced by a given string.","dec":"- (NSString *)stringByReplacingCharactersInRange:(NSRange)range withString:(NSString *)replacement"},"stringByReplacingOccurrencesOfString:withString:":{"abs":"Returns a new string in which all occurrences of a target string in the receiver are replaced by another given string.","dec":"- (NSString *)stringByReplacingOccurrencesOfString:(NSString *)target withString:(NSString *)replacement"},"stringByReplacingOccurrencesOfString:withString:options:range:":{"abs":"Returns a new string in which all occurrences of a target string in a specified range of the receiver are replaced by another given string.","dec":"- (NSString *)stringByReplacingOccurrencesOfString:(NSString *)target withString:(NSString *)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange"},"stringByReplacingPercentEscapesUsingEncoding:":{"abs":"Returns a new string made by replacing in the receiver all percent escapes with the matching characters as determined by a given encoding.","dec":"- (NSString *)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)encoding"},"stringByResolvingSymlinksInPath":{"abs":"Returns a new string made from the receiver by resolving all symbolic links and standardizing path.","dec":"- (NSString *)stringByResolvingSymlinksInPath"},"stringByStandardizingPath":{"abs":"Returns a new string made by removing extraneous path components from the receiver.","dec":"- (NSString *)stringByStandardizingPath"},"stringByTrimmingCharactersInSet:":{"abs":"Returns a new string made by removing from both ends of the receiver characters contained in a given character set.","dec":"- (NSString *)stringByTrimmingCharactersInSet:(NSCharacterSet *)set"},"stringsByAppendingPaths:":{"abs":"Returns an array of strings made by separately appending to the receiver each string in in a given array.","dec":"- (NSArray *)stringsByAppendingPaths:(NSArray *)paths"},"substringFromIndex:":{"abs":"Returns a new string containing the characters of the receiver from the one at a given index to the end.","dec":"- (NSString *)substringFromIndex:(NSUInteger)anIndex"},"substringToIndex:":{"abs":"Returns a new string containing the characters of the receiver up to, but not including, the one at a given index.","dec":"- (NSString *)substringToIndex:(NSUInteger)anIndex"},"substringWithRange:":{"abs":"Returns a string object containing the characters of the receiver that lie within a given range.","dec":"- (NSString *)substringWithRange:(NSRange)aRange"},"uppercaseString":{"abs":"Returns a uppercased representation of the receiver.","dec":"- (NSString *)uppercaseString"},"uppercaseStringWithLocale:":{"abs":"Returns a version of the string with all letters converted to uppercase, taking into account the specified locale.","dec":"- (NSString *)uppercaseStringWithLocale:(NSLocale *)locale"},"UTF8String":{"abs":"Returns a null-terminated UTF8 representation of the receiver.","dec":"- (const char *)UTF8String"},"writeToFile:atomically:encoding:error:":{"abs":"Writes the contents of the receiver to a file at a given path using a given encoding.","dec":"- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error"},"writeToURL:atomically:encoding:error:":{"abs":"Writes the contents of the receiver to the URL specified by url using the specified encoding.","dec":"- (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error"}},"[=]":{"NSMaximumStringLength":"","NSCaseInsensitiveSearch":"","NSLiteralSearch":"","NSBackwardsSearch":"","NSAnchoredSearch":"","NSNumericSearch":"","NSDiacriticInsensitiveSearch":"","NSWidthInsensitiveSearch":"","NSForcedOrderingSearch":"","NSRegularExpressionSearch":"","NSStringEncodingConversionAllowLossy":"","NSStringEncodingConversionExternalRepresentation":"","NSCharacterConversionException":"","NSParseErrorException":"","NSASCIIStringEncoding":"","NSNEXTSTEPStringEncoding":"","NSJapaneseEUCStringEncoding":"","NSUTF8StringEncoding":"","NSISOLatin1StringEncoding":"","NSSymbolStringEncoding":"","NSNonLossyASCIIStringEncoding":"","NSShiftJISStringEncoding":"","NSISOLatin2StringEncoding":"","NSUnicodeStringEncoding":"","NSWindowsCP1251StringEncoding":"","NSWindowsCP1252StringEncoding":"","NSWindowsCP1253StringEncoding":"","NSWindowsCP1254StringEncoding":"","NSWindowsCP1250StringEncoding":"","NSISO2022JPStringEncoding":"","NSMacOSRomanStringEncoding":"","NSUTF16StringEncoding":"","NSUTF16BigEndianStringEncoding":"","NSUTF16LittleEndianStringEncoding":"","NSUTF32StringEncoding":"","NSUTF32BigEndianStringEncoding":"","NSUTF32LittleEndianStringEncoding":"","NSProprietaryStringEncoding":"","NSStringEnumerationByLines":"","NSStringEnumerationByParagraphs":"","NSStringEnumerationByComposedCharacterSequences":"","NSStringEnumerationByWords":"","NSStringEnumerationBySentences":"","NSStringEnumerationReverse":"","NSStringEnumerationSubstringNotRequired":"","NSStringEnumerationLocalized":""}};

ClassRef.NSStringDrawingContext = {"[:]":"NSObject","[.]":{"actualScaleFactor":{"abs":"The actual scale factor that was applied to the font during drawing. (read-only)","dec":"@property(nonatomic, readonly) CGFloat actualScaleFactor"},"minimumScaleFactor":{"abs":"The scale factor that determines the smallest font size to use during drawing.","dec":"@property(nonatomic) CGFloat minimumScaleFactor"},"totalBounds":{"abs":"The bounding rectangle that was last used when drawing the string. (read-only)","dec":"@property(nonatomic, readonly) CGRect totalBounds"}}};

ClassRef.NSTextAttachment  = {"[:]":"NSObject","[.]":{"bounds":{"abs":"Defines the layout bounds of the receiver's graphical representation in the text coordinate system.","dec":"@property(nonatomic) CGRect bounds"},"contents":{"abs":"Defines the contents for the text attachment.","dec":"@property(retain, nonatomic) NSData *contents"},"fileType":{"abs":"Defines the file type of the contents for the text attachment.","dec":"@property(retain, nonatomic) NSString *fileType"},"fileWrapper":{"abs":"File wrapper associated with the text attachment.","dec":"@property(retain, nonatomic) NSFileWrapper *fileWrapper"},"image":{"abs":"Image representing the text attachment contents.","dec":"@property(retain, nonatomic) UIImage *image"}},"[-]":{"initWithData:ofType:":{"abs":"Initializes a new NSTextAttachment object with the given data.","dec":"- (id)initWithData:(NSData *)contentData ofType:(NSString *)uti"}},"[=]":{"NSAttachmentCharacter":""}};

ClassRef["NSTextCheckingResult"] = {"[:]":"NSObject","[.]":{"addressComponents":{"abs":"The address dictionary of a type checking result. (read-only)","dec":"@property(readonly) NSDictionary *addressComponents"},"components":{"abs":"A dictionary containing the components of a type checking result. (read-only)","dec":"@property(readonly) NSDictionary *components"},"date":{"abs":"The date component of a type checking result. (read-only)","dec":"@property(readonly) NSDate *date"},"duration":{"abs":"The duration component of a type checking result. (read-only)","dec":"@property(readonly) NSTimeInterval duration"},"grammarDetails":{"abs":"The details of a located grammatical type checking result. (read-only)","dec":"@property(readonly) NSArray *grammarDetails"},"numberOfRanges":{"abs":"Returns the number of ranges. (read-only)","dec":"@property(readonly) NSUInteger numberOfRanges"},"orthography":{"abs":"The detected orthography of a type checking result. (read-only)","dec":"@property(readonly) NSOrthography *orthography"},"phoneNumber":{"abs":"The phone number of a type checking result. (read-only)","dec":"@property(readonly) NSString *phoneNumber"},"range":{"abs":"Returns the range of the result that the receiver represents. (read-only)","dec":"@property(readonly) NSRange range"},"regularExpression":{"abs":"The regular expression of a type checking result. (read-only)","dec":"@property(readonly) NSRegularExpression *regularExpression"},"replacementString":{"abs":"A replacement string from one of a number of replacement checking results. (read-only)","dec":"@property(readonly) NSString *replacementString"},"resultType":{"abs":"Returns the text checking result type that the receiver represents. (read-only)","dec":"@property(readonly) NSTextCheckingType resultType"},"timeZone":{"abs":"The time zone component of a type checking result. (read-only)","dec":"@property(readonly) NSTimeZone *timeZone"},"URL":{"abs":"The URL of a type checking result. (read-only)","dec":"@property(readonly) NSURL *URL"}},"[+]":{"addressCheckingResultWithRange:components:":{"abs":"Creates and returns a text checking result with the specified address components.","dec":"+ (NSTextCheckingResult *)addressCheckingResultWithRange:(NSRange)range components:(NSDictionary *)components"},"correctionCheckingResultWithRange:replacementString:":{"abs":"Creates and returns a text checking result after detecting a possible correction.","dec":"+ (NSTextCheckingResult *)correctionCheckingResultWithRange:(NSRange)range replacementString:(NSString *)replacementString"},"dashCheckingResultWithRange:replacementString:":{"abs":"Creates and returns a text checking result with the specified dash corrected replacement string.","dec":"+ (NSTextCheckingResult *)dashCheckingResultWithRange:(NSRange)range replacementString:(NSString *)replacementString"},"dateCheckingResultWithRange:date:":{"abs":"Creates and returns a text checking result with the specified date.","dec":"+ (NSTextCheckingResult *)dateCheckingResultWithRange:(NSRange)range date:(NSDate *)date"},"dateCheckingResultWithRange:date:timeZone:duration:":{"abs":"Creates and returns a text checking result with the specified date, time zone, and duration.","dec":"+ (NSTextCheckingResult *)dateCheckingResultWithRange:(NSRange)range date:(NSDate *)date timeZone:(NSTimeZone *)timeZone duration:(NSTimeInterval)duration"},"grammarCheckingResultWithRange:details:":{"abs":"Creates and returns a text checking result with the specified array of grammatical errors.","dec":"+ (NSTextCheckingResult *)grammarCheckingResultWithRange:(NSRange)range details:(NSArray *)details"},"linkCheckingResultWithRange:URL:":{"abs":"Creates and returns a text checking result with the specified URL.","dec":"+ (NSTextCheckingResult *)linkCheckingResultWithRange:(NSRange)range URL:(NSURL *)url"},"orthographyCheckingResultWithRange:orthography:":{"abs":"Creates and returns a text checking result with the specified orthography.","dec":"+ (NSTextCheckingResult *)orthographyCheckingResultWithRange:(NSRange)range orthography:(NSOrthography *)orthography"},"phoneNumberCheckingResultWithRange:phoneNumber:":{"abs":"Creates and returns a text checking result with the specified phone number.","dec":"+ (NSTextCheckingResult *)phoneNumberCheckingResultWithRange:(NSRange)range phoneNumber:(NSString *)phoneNumber"},"quoteCheckingResultWithRange:replacementString:":{"abs":"Creates and returns a text checking result with the specified quote-balanced replacement string.","dec":"+ (NSTextCheckingResult *)quoteCheckingResultWithRange:(NSRange)range replacementString:(NSString *)replacementString"},"regularExpressionCheckingResultWithRanges:count:regularExpression:":{"abs":"Creates and returns a type checking result with the specified regular expression data.","dec":"+ (NSTextCheckingResult *)regularExpressionCheckingResultWithRanges:(NSRangePointer)ranges count:(NSUInteger)count regularExpression:(NSRegularExpression *)regularExpression"},"replacementCheckingResultWithRange:replacementString:":{"abs":"Creates and returns a text checking result with the specified replacement string.","dec":"+ (NSTextCheckingResult *)replacementCheckingResultWithRange:(NSRange)range replacementString:(NSString *)replacementString"},"spellCheckingResultWithRange:":{"abs":"Creates and returns a text checking result with the range of a misspelled word.","dec":"+ (NSTextCheckingResult *)spellCheckingResultWithRange:(NSRange)range"},"transitInformationCheckingResultWithRange:components:":{"abs":"Creates and returns a text checking result with the specified transit information.","dec":"+ (NSTextCheckingResult *)transitInformationCheckingResultWithRange:(NSRange)range components:(NSDictionary *)components"}},"[-]":{"rangeAtIndex:":{"abs":"Returns the result type that the range represents.","dec":"- (NSRange)rangeAtIndex:(NSUInteger)idx"},"resultByAdjustingRangesWithOffset:":{"abs":"Returns a new text checking result after adjusting the ranges as specified by the offset.","dec":"- (NSTextCheckingResult *)resultByAdjustingRangesWithOffset:(NSInteger)offset"}},"[=]":{"NSTextCheckingAirlineKey":"","NSTextCheckingFlightKey":"","NSTextCheckingNameKey":"","NSTextCheckingJobTitleKey":"","NSTextCheckingOrganizationKey":"","NSTextCheckingStreetKey":"","NSTextCheckingCityKey":"","NSTextCheckingStateKey":"","NSTextCheckingZIPKey":"","NSTextCheckingCountryKey":"","NSTextCheckingPhoneKey":"","NSTextCheckingTypeOrthography":"","NSTextCheckingTypeSpelling":"","NSTextCheckingTypeGrammar":"","NSTextCheckingTypeDate":"","NSTextCheckingTypeAddress":"","NSTextCheckingTypeLink":"","NSTextCheckingTypeQuote":"","NSTextCheckingTypeDash":"","NSTextCheckingTypeReplacement":"","NSTextCheckingTypeCorrection":"","NSTextCheckingTypeRegularExpression":"","NSTextCheckingTypePhoneNumber":"","NSTextCheckingTypeTransitInformation":"","NSTextCheckingAllSystemTypes":"","NSTextCheckingAllCustomTypes":"","NSTextCheckingAllTypes":""}};

ClassRef.NSTextContainer  = {"[:]":"NSObject","[.]":{"exclusionPaths":{"abs":"An array of UIBezierPath objects representing the exclusion paths inside the receiver's bounding rectangle. Default value: nil.","dec":"@property(copy, nonatomic) NSArray *exclusionPaths"},"heightTracksTextView":{"abs":"Controls whether the receiver adjusts the height of its bounding rectangle when its text view is resized. Default value: NO.","dec":"@property(nonatomic) BOOL heightTracksTextView"},"layoutManager":{"abs":"Accessor for the NSLayoutManager object owning the receiver.","dec":"@property(assign, nonatomic) NSLayoutManager *layoutManager"},"lineBreakMode":{"abs":"Defines the behavior of the last line inside the text container. Default value: NSLineBreakByWordWrapping.","dec":"@property(nonatomic) NSLineBreakMode lineBreakMode"},"lineFragmentPadding":{"abs":"The amount by which text is inset within line fragment rectangles, in points. Default value: 5.0.","dec":"@property(nonatomic) CGFloat lineFragmentPadding"},"maximumNumberOfLines":{"abs":"The maximum number of lines that can be stored in the receiver. Default value: 0 (no limit).","dec":"@property(nonatomic) NSUInteger maximumNumberOfLines"},"size":{"abs":"Controls the size of the receiver’s bounding rectangle. Default value: CGSizeZero.","dec":"@property(nonatomic) CGSize size"},"widthTracksTextView":{"abs":"Controls whether the receiver adjusts the width of its bounding rectangle when its text view is resized. Default value: NO.","dec":"@property(nonatomic) BOOL widthTracksTextView"}},"[-]":{"initWithSize:":{"abs":"Initializes a text container with a specified bounding rectangle.","dec":"- (id)initWithSize:(CGSize)size"},"lineFragmentRectForProposedRect:atIndex:writingDirection:remainingRect:":{"abs":"Returns the bounds of a line fragment rectangle inside the receiver for the proposed rectangle.","dec":"- (CGRect)lineFragmentRectForProposedRect:(CGRect)proposedRect atIndex:(NSUInteger)characterIndex writingDirection:(NSWritingDirection)baseWritingDirection remainingRect:(CGRect *)remainingRect"}}};

ClassRef.NSTextStorage  = {"[:]":"NSMutableAttributedString : NSAttributedString : NSObject","[.]":{"changeInLength":{"abs":"The length delta for the pending changes.","dec":"@property(nonatomic) NSInteger changeInLength"},"delegate":{"abs":"The text storage delegate.","dec":"@property(assign, nonatomic) id<NSTextStorageDelegate> delegate"},"editedMask":{"abs":"The kinds of edits pending for the receiver.","dec":"@property(nonatomic) NSTextStorageEditActions editedMask"},"editedRange":{"abs":"The range of the receiver to which pending changes have been made, whether of characters or of attributes.","dec":"@property(nonatomic) NSRange editedRange"},"fixesAttributesLazily":{"abs":"Indicates whether the receiver fixes attributes lazily. (read-only)","dec":"@property(readonly, nonatomic) BOOL fixesAttributesLazily"},"layoutManagers":{"abs":"The receiver’s layout managers. (read-only)","dec":"@property(readonly, nonatomic) NSArray *layoutManagers"}},"[-]":{"addLayoutManager:":{"abs":"Adds a layout manager to the receiver.","dec":"- (void)addLayoutManager:(NSLayoutManager *)aLayoutManager"},"edited:range:changeInLength:":{"abs":"Notifies and records a recent change.","dec":"- (void)edited:(NSTextStorageEditActions)editedMask range:(NSRange)editedRange changeInLength:(NSInteger)delta"},"ensureAttributesAreFixedInRange:":{"abs":"Ensures that attributes are fixed in the given range.","dec":"- (void)ensureAttributesAreFixedInRange:(NSRange)range"},"invalidateAttributesInRange:":{"abs":"Invalidates attributes in the specified range.","dec":"- (void)invalidateAttributesInRange:(NSRange)range"},"processEditing":{"abs":"Triggers post-editing operations.","dec":"- (void)processEditing"},"removeLayoutManager:":{"abs":"Removes a layout manager from the receiver’s set of layout managers.","dec":"- (void)removeLayoutManager:(NSLayoutManager *)aLayoutManager"}},"[=]":{"NSTextStorageEditedAttributes":"","NSTextStorageEditedCharacters":""}};

ClassRef["NSThread"] = {"[:]":"NSObject","[+]":{"callStackReturnAddresses":{"abs":"Returns an array containing the call stack return addresses.","dec":"+ (NSArray *)callStackReturnAddresses"},"callStackSymbols":{"abs":"Returns an array containing the call stack symbols.","dec":"+ (NSArray *)callStackSymbols"},"currentThread":{"abs":"Returns the thread object representing the current thread of execution.","dec":"+ (NSThread *)currentThread"},"detachNewThreadSelector:toTarget:withObject:":{"abs":"Detaches a new thread and uses the specified selector as the thread entry point.","dec":"+ (void)detachNewThreadSelector:(SEL)aSelector toTarget:(id)aTarget withObject:(id)anArgument"},"exit":{"abs":"Terminates the current thread.","dec":"+ (void)exit"},"isMainThread":{"abs":"Returns a Boolean value that indicates whether the current thread is the main thread.","dec":"+ (BOOL)isMainThread"},"isMultiThreaded":{"abs":"Returns whether the application is multithreaded.","dec":"+ (BOOL)isMultiThreaded"},"mainThread":{"abs":"Returns the NSThread object representing the main thread.","dec":"+ (NSThread *)mainThread"},"setThreadPriority:":{"abs":"Sets the current thread’s priority.","dec":"+ (BOOL)setThreadPriority:(double)priority"},"sleepForTimeInterval:":{"abs":"Sleeps the thread for a given time interval.","dec":"+ (void)sleepForTimeInterval:(NSTimeInterval)ti"},"sleepUntilDate:":{"abs":"Blocks the current thread until the time specified.","dec":"+ (void)sleepUntilDate:(NSDate *)aDate"},"threadPriority":{"abs":"Returns the current thread’s priority.","dec":"+ (double)threadPriority"}},"[-]":{"cancel":{"abs":"Changes the cancelled state of the receiver to indicate that it should exit.","dec":"- (void)cancel"},"init":{"abs":"Returns an initialized NSThread object.","dec":"- (id)init"},"initWithTarget:selector:object:":{"abs":"Returns an NSThread object initialized with the given arguments.","dec":"- (id)initWithTarget:(id)target selector:(SEL)selector object:(id)argument"},"isCancelled":{"abs":"Returns a Boolean value that indicates whether the receiver is cancelled.","dec":"- (BOOL)isCancelled"},"isExecuting":{"abs":"Returns a Boolean value that indicates whether the receiver is executing.","dec":"- (BOOL)isExecuting"},"isFinished":{"abs":"Returns a Boolean value that indicates whether the receiver has finished execution.","dec":"- (BOOL)isFinished"},"isMainThread":{"abs":"Returns a Boolean value that indicates whether the receiver is the main thread.","dec":"- (BOOL)isMainThread"},"main":{"abs":"The main entry point routine for the thread.","dec":"- (void)main"},"name":{"abs":"Returns the name of the receiver.","dec":"- (NSString *)name"},"setName:":{"abs":"Sets the name of the receiver.","dec":"- (void)setName:(NSString *)n"},"setStackSize:":{"abs":"Sets the stack size of the receiver.","dec":"- (void)setStackSize:(NSUInteger)s"},"setThreadPriority:":{"abs":"Sets the receiver’s priority.","dec":"- (void)setThreadPriority:(double)priority"},"stackSize":{"abs":"Returns the stack size of the receiver.","dec":"- (NSUInteger)stackSize"},"start":{"abs":"Starts the receiver.","dec":"- (void)start"},"threadDictionary":{"abs":"Returns the thread object's dictionary.","dec":"- (NSMutableDictionary *)threadDictionary"},"threadPriority":{"abs":"Returns the receiver’s priority","dec":"- (double)threadPriority"}}};

ClassRef["NSTimer"] = {"[:]":"NSObject","[+]":{"scheduledTimerWithTimeInterval:invocation:repeats:":{"abs":"Creates and returns a new NSTimer object and schedules it on the current run loop in the default mode.","dec":"+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)seconds invocation:(NSInvocation *)invocation repeats:(BOOL)repeats"},"scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:":{"abs":"Creates and returns a new NSTimer object and schedules it on the current run loop in the default mode.","dec":"+ (NSTimer *)scheduledTimerWithTimeInterval:(NSTimeInterval)seconds target:(id)target selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)repeats"},"timerWithTimeInterval:invocation:repeats:":{"abs":"Creates and returns a new NSTimer object initialized with the specified invocation object.","dec":"+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)seconds invocation:(NSInvocation *)invocation repeats:(BOOL)repeats"},"timerWithTimeInterval:target:selector:userInfo:repeats:":{"abs":"Creates and returns a new NSTimer object initialized with the specified object and selector.","dec":"+ (NSTimer *)timerWithTimeInterval:(NSTimeInterval)seconds target:(id)target selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)repeats"}},"[-]":{"fire":{"abs":"Causes the receiver’s message to be sent to its target.","dec":"- (void)fire"},"fireDate":{"abs":"Returns the date at which the receiver will fire.","dec":"- (NSDate *)fireDate"},"initWithFireDate:interval:target:selector:userInfo:repeats:":{"abs":"Initializes a new NSTimer object using the specified object and selector.","dec":"- (id)initWithFireDate:(NSDate *)date interval:(NSTimeInterval)seconds target:(id)target selector:(SEL)aSelector userInfo:(id)userInfo repeats:(BOOL)repeats"},"invalidate":{"abs":"Stops the receiver from ever firing again and requests its removal from its run loop.","dec":"- (void)invalidate"},"isValid":{"abs":"Returns a Boolean value that indicates whether the receiver is currently valid.","dec":"- (BOOL)isValid"},"setFireDate:":{"abs":"Resets the firing time of the receiver to the specified date.","dec":"- (void)setFireDate:(NSDate *)date"},"setTolerance:":{"abs":"Sets the amount of time after the scheduled fire date that the timer may fire to the given interval.","dec":"- (void)setTolerance:(NSTimeInterval)tolerance"},"timeInterval":{"abs":"Returns the receiver’s time interval.","dec":"- (NSTimeInterval)timeInterval"},"tolerance":{"abs":"Returns the amount of time after the scheduled fire date that the timer may fire.","dec":"- (NSTimeInterval)tolerance"},"userInfo":{"abs":"Returns the receiver's userInfo object.","dec":"- (id)userInfo"}}};

ClassRef["NSTimeZone"] = {"[:]":"NSObject","[+]":{"abbreviationDictionary":{"abs":"Returns a dictionary holding the mappings of time zone abbreviations to time zone names.","dec":"+ (NSDictionary *)abbreviationDictionary"},"defaultTimeZone":{"abs":"Returns the default time zone for the current application.","dec":"+ (NSTimeZone *)defaultTimeZone"},"knownTimeZoneNames":{"abs":"Returns an array of strings listing the IDs of all the time zones known to the system.","dec":"+ (NSArray *)knownTimeZoneNames"},"localTimeZone":{"abs":"Returns an object that forwards all messages to the default time zone for the current application.","dec":"+ (NSTimeZone *)localTimeZone"},"resetSystemTimeZone":{"abs":"Resets the system time zone object cached by the application, if any.","dec":"+ (void)resetSystemTimeZone"},"setAbbreviationDictionary:":{"abs":"Sets the abbreviation dictionary to the specified dictionary.","dec":"+ (void)setAbbreviationDictionary:(NSDictionary *)dict"},"setDefaultTimeZone:":{"abs":"Sets the default time zone for the current application to a given time zone.","dec":"+ (void)setDefaultTimeZone:(NSTimeZone *)aTimeZone"},"systemTimeZone":{"abs":"Returns the time zone currently used by the system.","dec":"+ (NSTimeZone *)systemTimeZone"},"timeZoneDataVersion":{"abs":"Returns the time zone data version.","dec":"+ (NSString *)timeZoneDataVersion"},"timeZoneForSecondsFromGMT:":{"abs":"Returns a time zone object offset from Greenwich Mean Time by a given number of seconds.","dec":"+ (id)timeZoneForSecondsFromGMT:(NSInteger)seconds"},"timeZoneWithAbbreviation:":{"abs":"Returns the time zone object identified by a given abbreviation.","dec":"+ (id)timeZoneWithAbbreviation:(NSString *)abbreviation"},"timeZoneWithName:":{"abs":"Returns the time zone object identified by a given ID.","dec":"+ (id)timeZoneWithName:(NSString *)tzName"},"timeZoneWithName:data:":{"abs":"Returns the time zone with a given ID whose data has been initialized using given data,","dec":"+ (id)timeZoneWithName:(NSString *)tzName data:(NSData *)data"}},"[-]":{"abbreviation":{"abs":"Returns the abbreviation for the receiver.","dec":"- (NSString *)abbreviation"},"abbreviationForDate:":{"abs":"Returns the abbreviation for the receiver at a given date.","dec":"- (NSString *)abbreviationForDate:(NSDate *)aDate"},"data":{"abs":"Returns the data that stores the information used by the receiver.","dec":"- (NSData *)data"},"daylightSavingTimeOffset":{"abs":"Returns the current daylight saving time offset of the receiver.","dec":"- (NSTimeInterval)daylightSavingTimeOffset"},"daylightSavingTimeOffsetForDate:":{"abs":"Returns the daylight saving time offset for a given date.","dec":"- (NSTimeInterval)daylightSavingTimeOffsetForDate:(NSDate *)aDate"},"description":{"abs":"Returns the description of the receiver.","dec":"- (NSString *)description"},"initWithName:":{"abs":"Returns a time zone initialized with a given ID.","dec":"- (id)initWithName:(NSString *)tzName"},"initWithName:data:":{"abs":"Initializes a time zone with a given ID and time zone data.","dec":"- (id)initWithName:(NSString *)tzName data:(NSData *)data"},"isDaylightSavingTime":{"abs":"Returns a Boolean value that indicates whether the receiver is currently using daylight saving time.","dec":"- (BOOL)isDaylightSavingTime"},"isDaylightSavingTimeForDate:":{"abs":"Returns a Boolean value that indicates whether the receiver uses daylight savings time at a given date.","dec":"- (BOOL)isDaylightSavingTimeForDate:(NSDate *)aDate"},"isEqualToTimeZone:":{"abs":"Returns a Boolean value that indicates whether the receiver has the same name and data as another given time zone.","dec":"- (BOOL)isEqualToTimeZone:(NSTimeZone *)aTimeZone"},"localizedName:locale:":{"abs":"Returns the name of the receiver localized for a given locale.","dec":"- (NSString *)localizedName:(NSTimeZoneNameStyle)style locale:(NSLocale *)locale"},"name":{"abs":"Returns the geopolitical region ID that identifies the receiver.","dec":"- (NSString *)name"},"nextDaylightSavingTimeTransition":{"abs":"Returns the date of the next daylight saving time transition for the receiver.","dec":"- (NSDate *)nextDaylightSavingTimeTransition"},"nextDaylightSavingTimeTransitionAfterDate:":{"abs":"Returns the next daylight saving time transition after a given date.","dec":"- (NSDate *)nextDaylightSavingTimeTransitionAfterDate:(NSDate *)aDate"},"secondsFromGMT":{"abs":"Returns the current difference in seconds between the receiver and Greenwich Mean Time.","dec":"- (NSInteger)secondsFromGMT"},"secondsFromGMTForDate:":{"abs":"Returns the difference in seconds between the receiver and Greenwich Mean Time at a given date.","dec":"- (NSInteger)secondsFromGMTForDate:(NSDate *)aDate"}},"[=]":{"NSTimeZoneNameStyleStandard":"","NSTimeZoneNameStyleShortStandard":"","NSTimeZoneNameStyleDaylightSaving":"","NSTimeZoneNameStyleShortDaylightSaving":"","NSTimeZoneNameStyleGeneric":"","NSTimeZoneNameStyleShortGeneric":""}};

ClassRef["NSUbiquitousKeyValueStore"] = {"[:]":"NSObject","[+]":{"defaultStore":{"abs":"Returns the shared iCloud key-value store object.","dec":"+ (NSUbiquitousKeyValueStore *)defaultStore"}},"[-]":{"arrayForKey:":{"abs":"Returns the array associated with the specified key.","dec":"- (NSArray *)arrayForKey:(NSString *)aKey"},"boolForKey:":{"abs":"Returns the Boolean value associated with the specified key.","dec":"- (BOOL)boolForKey:(NSString *)aKey"},"dataForKey:":{"abs":"Returns the data object associated with the specified key.","dec":"- (NSData *)dataForKey:(NSString *)aKey"},"dictionaryForKey:":{"abs":"Returns the dictionary object associated with the specified key.","dec":"- (NSDictionary *)dictionaryForKey:(NSString *)aKey"},"dictionaryRepresentation":{"abs":"Returns a dictionary containing all of the key-value pairs in the key-value store.","dec":"- (NSDictionary *)dictionaryRepresentation"},"doubleForKey:":{"abs":"Returns the double value associated with the specified key.","dec":"- (double)doubleForKey:(NSString *)aKey"},"longLongForKey:":{"abs":"Returns the long long value associated with the specified key.","dec":"- (long long)longLongForKey:(NSString *)aKey"},"objectForKey:":{"abs":"Returns the object associated with the specified key.","dec":"- (id)objectForKey:(NSString *)aKey"},"removeObjectForKey:":{"abs":"Removes the value associated with the specified key from the key-value store.","dec":"- (void)removeObjectForKey:(NSString *)aKey"},"setArray:forKey:":{"abs":"Sets an array object for the specified key in the key-value store.","dec":"- (void)setArray:(NSArray *)anArray forKey:(NSString *)aKey"},"setBool:forKey:":{"abs":"Sets a Boolean value for the specified key in the key-value store.","dec":"- (void)setBool:(BOOL)value forKey:(NSString *)aKey"},"setData:forKey:":{"abs":"Sets a data object for the specified key in the key-value store.","dec":"- (void)setData:(NSData *)aData forKey:(NSString *)aKey"},"setDictionary:forKey:":{"abs":"Sets a dictionary object for the specified key in the key-value store.","dec":"- (void)setDictionary:(NSDictionary *)aDictionary forKey:(NSString *)aKey"},"setDouble:forKey:":{"abs":"Sets a double value for the specified key in the key-value store.","dec":"- (void)setDouble:(double)value forKey:(NSString *)aKey"},"setLongLong:forKey:":{"abs":"Sets a long long value for the specified key in the key-value store.","dec":"- (void)setLongLong:(long long)value forKey:(NSString *)aKey"},"setObject:forKey:":{"abs":"Sets an object for the specified key in the key-value store.","dec":"- (void)setObject:(id)anObject forKey:(NSString *)aKey"},"setString:forKey:":{"abs":"Sets a string object for the specified key in the key-value store.","dec":"- (void)setString:(NSString *)aString forKey:(NSString *)aKey"},"stringForKey:":{"abs":"Returns the string associated with the specified key.","dec":"- (NSString *)stringForKey:(NSString *)aKey"},"synchronize":{"abs":"Explicitly synchronizes in-memory keys and values with those stored on disk.","dec":"- (BOOL)synchronize"}},"[=]":{"NSUbiquitousKeyValueStoreChangeReasonKey":"","NSUbiquitousKeyValueStoreChangedKeysKey":"","NSUbiquitousKeyValueStoreServerChange":"","NSUbiquitousKeyValueStoreInitialSyncChange":"","NSUbiquitousKeyValueStoreQuotaViolationChange":"","NSUbiquitousKeyValueStoreAccountChange":""}};

ClassRef["NSUndoManager"] = {"[:]":"NSObject","[-]":{"beginUndoGrouping":{"abs":"Marks the beginning of an undo group.","dec":"- (void)beginUndoGrouping"},"canRedo":{"abs":"Returns a Boolean value that indicates whether the receiver has any actions to redo.","dec":"- (BOOL)canRedo"},"canUndo":{"abs":"Returns a Boolean value that indicates whether the receiver has any actions to undo.","dec":"- (BOOL)canUndo"},"disableUndoRegistration":{"abs":"Disables the recording of undo operations, whether by registerUndoWithTarget:selector:object: or by invocation-based undo.","dec":"- (void)disableUndoRegistration"},"enableUndoRegistration":{"abs":"Enables the recording of undo operations.","dec":"- (void)enableUndoRegistration"},"endUndoGrouping":{"abs":"Marks the end of an undo group.","dec":"- (void)endUndoGrouping"},"groupingLevel":{"abs":"Returns the number of nested undo groups (or redo groups, if Redo was invoked last) in the current event loop.","dec":"- (NSInteger)groupingLevel"},"groupsByEvent":{"abs":"Returns a Boolean value that indicates whether the receiver automatically creates undo groups around each pass of the run loop.","dec":"- (BOOL)groupsByEvent"},"isRedoing":{"abs":"Returns a Boolean value that indicates whether the receiver is in the process of performing its redo method.","dec":"- (BOOL)isRedoing"},"isUndoing":{"abs":"Returns a Boolean value that indicates whether the receiver is in the process of performing its undo or undoNestedGroup method.","dec":"- (BOOL)isUndoing"},"isUndoRegistrationEnabled":{"abs":"Returns a Boolean value that indicates whether the recording of undo operations is enabled.","dec":"- (BOOL)isUndoRegistrationEnabled"},"levelsOfUndo":{"abs":"Returns the maximum number of top-level undo groups the receiver holds.","dec":"- (NSUInteger)levelsOfUndo"},"prepareWithInvocationTarget:":{"abs":"Prepares the receiver for invocation-based undo with the given target as the subject of the next undo operation and returns self.","dec":"- (id)prepareWithInvocationTarget:(id)target"},"redo":{"abs":"Performs the operations in the last group on the redo stack, if there are any, recording them on the undo stack as a single group.","dec":"- (void)redo"},"redoActionIsDiscardable":{"abs":"Returns whether the next redo action is discardable.","dec":"- (BOOL)redoActionIsDiscardable"},"redoActionName":{"abs":"Returns the name identifying the redo action.","dec":"- (NSString *)redoActionName"},"redoMenuItemTitle":{"abs":"Returns the complete title of the Redo menu command, for example, “Redo Paste.”","dec":"- (NSString *)redoMenuItemTitle"},"redoMenuTitleForUndoActionName:":{"abs":"Returns the complete, localized title of the Redo menu command for the action identified by the given name.","dec":"- (NSString *)redoMenuTitleForUndoActionName:(NSString *)actionName"},"registerUndoWithTarget:selector:object:":{"abs":"Records a single undo operation for a given target, so that when an undo is performed it is sent a specified selector with a given object as the sole argument.","dec":"- (void)registerUndoWithTarget:(id)target selector:(SEL)aSelector object:(id)anObject"},"removeAllActions":{"abs":"Clears the undo and redo stacks and re-enables the receiver.","dec":"- (void)removeAllActions"},"removeAllActionsWithTarget:":{"abs":"Clears the undo and redo stacks of all operations involving the specified target as the recipient of the undo message.","dec":"- (void)removeAllActionsWithTarget:(id)target"},"runLoopModes":{"abs":"Returns the modes governing the types of input handled during a cycle of the run loop.","dec":"- (NSArray *)runLoopModes"},"setActionIsDiscardable:":{"abs":"Sets whether the next undo or redo action is discardable.","dec":"- (void)setActionIsDiscardable:(BOOL)discardable"},"setActionName:":{"abs":"Sets the name of the action associated with the Undo or Redo command.","dec":"- (void)setActionName:(NSString *)actionName"},"setGroupsByEvent:":{"abs":"Sets a Boolean value that specifies whether the receiver automatically groups undo operations during the run loop.","dec":"- (void)setGroupsByEvent:(BOOL)flag"},"setLevelsOfUndo:":{"abs":"Sets the maximum number of top-level undo groups the receiver holds.","dec":"- (void)setLevelsOfUndo:(NSUInteger)anInt"},"setRunLoopModes:":{"abs":"Sets the modes that determine the types of input handled during a cycle of the run loop.","dec":"- (void)setRunLoopModes:(NSArray *)modes"},"undo":{"abs":"Closes the top-level undo group if necessary and invokes undoNestedGroup.","dec":"- (void)undo"},"undoActionIsDiscardable":{"abs":"Returns whether the next undo action is discardable.","dec":"- (BOOL)undoActionIsDiscardable"},"undoActionName":{"abs":"Returns the name identifying the undo action.","dec":"- (NSString *)undoActionName"},"undoMenuItemTitle":{"abs":"Returns the complete title of the Undo menu command, for example, “Undo Paste.”","dec":"- (NSString *)undoMenuItemTitle"},"undoMenuTitleForUndoActionName:":{"abs":"Returns the complete, localized title of the Undo menu command for the action identified by the given name.","dec":"- (NSString *)undoMenuTitleForUndoActionName:(NSString *)actionName"},"undoNestedGroup":{"abs":"Performs the undo operations in the last undo group (whether top-level or nested), recording the operations on the redo stack as a single group.","dec":"- (void)undoNestedGroup"}},"[=]":{"NSUndoCloseGroupingRunLoopOrdering":"","NSUndoManagerGroupIsDiscardableKey":""}};

ClassRef["NSURL"] = {"[:]":"NSObject","[+]":{"bookmarkDataWithContentsOfURL:error:":{"abs":"Initializes and returns bookmark data derived from an alias file pointed to by a specified URL.","dec":"+ (NSData *)bookmarkDataWithContentsOfURL:(NSURL *)bookmarkFileURL error:(NSError **)error"},"fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:":{"abs":"Returns a new URL object initialized with a C string representing a local file system path.","dec":"+ (id)fileURLWithFileSystemRepresentation:(const char *)path isDirectory:(BOOL)isDir relativeToURL:(NSURL *)baseURL"},"fileURLWithPath:":{"abs":"Initializes and returns a newly created NSURL object as a file URL with a specified path.","dec":"+ (id)fileURLWithPath:(NSString *)path"},"fileURLWithPath:isDirectory:":{"abs":"Initializes and returns a newly created NSURL object as a file URL with a specified path.","dec":"+ (id)fileURLWithPath:(NSString *)path isDirectory:(BOOL)isDir"},"fileURLWithPathComponents:":{"abs":"Initializes and returns a newly created NSURL object as a file URL with specified path components.","dec":"+ (NSURL *)fileURLWithPathComponents:(NSArray *)components"},"resourceValuesForKeys:fromBookmarkData:":{"abs":"Returns the resource values for properties identified by a specified array of keys contained in specified bookmark data.","dec":"+ (NSDictionary *)resourceValuesForKeys:(NSArray *)keys fromBookmarkData:(NSData *)bookmarkData"},"URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:":{"abs":"Returns a new URL made by resolving bookmark data.","dec":"+ (id)URLByResolvingBookmarkData:(NSData *)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL *)relativeURL bookmarkDataIsStale:(BOOL *)isStale error:(NSError **)error"},"URLWithString:":{"abs":"Creates and returns an NSURL object initialized with a provided URL string.","dec":"+ (id)URLWithString:(NSString *)URLString"},"URLWithString:relativeToURL:":{"abs":"Creates and returns an NSURL object initialized with a base URL and a relative string.","dec":"+ (id)URLWithString:(NSString *)URLString relativeToURL:(NSURL *)baseURL"},"writeBookmarkData:toURL:options:error:":{"abs":"Creates an alias file on disk at a specified location with specified bookmark data.","dec":"+ (BOOL)writeBookmarkData:(NSData *)bookmarkData toURL:(NSURL *)bookmarkFileURL options:(NSURLBookmarkFileCreationOptions)options error:(NSError **)error"}},"[-]":{"absoluteString":{"abs":"Returns the URL string for the receiver as if it were an absolute URL.","dec":"- (NSString *)absoluteString"},"absoluteURL":{"abs":"Returns an absolute URL that refers to the same resource as the receiver.","dec":"- (NSURL *)absoluteURL"},"baseURL":{"abs":"Returns the base URL of the receiver.","dec":"- (NSURL *)baseURL"},"bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:":{"abs":"Returns a bookmark for the URL, created with specified options and resource values.","dec":"- (NSData *)bookmarkDataWithOptions:(NSURLBookmarkCreationOptions)options includingResourceValuesForKeys:(NSArray *)keys relativeToURL:(NSURL *)relativeURL error:(NSError **)error"},"checkResourceIsReachableAndReturnError:":{"abs":"Returns whether the resource pointed to by a file URL can be reached.","dec":"- (BOOL)checkResourceIsReachableAndReturnError:(NSError **)error"},"filePathURL":{"abs":"Returns a new file path URL that points to the same resource as the original URL.","dec":"- (NSURL *)filePathURL"},"fileReferenceURL":{"abs":"Returns a new file reference URL that points to the same resource as the original URL.","dec":"- (NSURL *)fileReferenceURL"},"fileSystemRepresentation":{"abs":"Returns a C string containing the file system path for a file URL.","dec":"- (const char *)fileSystemRepresentation"},"fragment":{"abs":"Returns the fragment of a URL conforming to RFC 1808.","dec":"- (NSString *)fragment"},"getFileSystemRepresentation:maxLength:":{"abs":"Fills the provided buffer with a C string representing a local file system path.","dec":"- (BOOL)getFileSystemRepresentation:(char *)buffer maxLength:(NSUInteger)maxBufferLength"},"getResourceValue:forKey:error:":{"abs":"Returns the value of the resource property for the specified key.","dec":"- (BOOL)getResourceValue:(out id *)value forKey:(NSString *)key error:(out NSError **)error"},"host":{"abs":"Returns the host of a URL conforming to RFC 1808.","dec":"- (NSString *)host"},"initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:":{"abs":"Initializes a newly created NSURL that points to a location specified by resolving bookmark data.","dec":"- (id)initByResolvingBookmarkData:(NSData *)bookmarkData options:(NSURLBookmarkResolutionOptions)options relativeToURL:(NSURL *)relativeURL bookmarkDataIsStale:(BOOL *)isStale error:(NSError **)error"},"initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL:":{"abs":"Initializes a URL object with a C string representing a local file system path.","dec":"- (id)initFileURLWithFileSystemRepresentation:(const char *)path isDirectory:(BOOL)isDir relativeToURL:(NSURL *)baseURL"},"initFileURLWithPath:":{"abs":"Initializes a newly created NSURL referencing the local file or directory at path.","dec":"- (id)initFileURLWithPath:(NSString *)path"},"initFileURLWithPath:isDirectory:":{"abs":"Initializes a newly created NSURL referencing the local file or directory at path.","dec":"- (id)initFileURLWithPath:(NSString *)path isDirectory:(BOOL)isDir"},"initWithScheme:host:path:":{"abs":"Initializes a newly created NSURL with a specified scheme, host, and path.","dec":"- (id)initWithScheme:(NSString *)scheme host:(NSString *)host path:(NSString *)path"},"initWithString:":{"abs":"Initializes an NSURL object with a provided URL string.","dec":"- (id)initWithString:(NSString *)URLString"},"initWithString:relativeToURL:":{"abs":"Initializes an NSURL object with a base URL and a relative string.","dec":"- (id)initWithString:(NSString *)URLString relativeToURL:(NSURL *)baseURL"},"isEqual:":{"abs":"Returns a Boolean value that indicates whether the receiver and a given object have identical URL strings and base URLs.","dec":"- (BOOL)isEqual:(id)anObject"},"isFileReferenceURL":{"abs":"Returns whether the URL is a file reference URL.","dec":"- (BOOL)isFileReferenceURL"},"isFileURL":{"abs":"Returns whether the receiver uses the file scheme.","dec":"- (BOOL)isFileURL"},"lastPathComponent":{"abs":"Returns the last path component of a file URL.","dec":"- (NSString *)lastPathComponent"},"parameterString":{"abs":"Returns the parameter string of a URL conforming to RFC 1808.","dec":"- (NSString *)parameterString"},"password":{"abs":"Returns the password of a URL conforming to RFC 1808.","dec":"- (NSString *)password"},"path":{"abs":"Returns the path of a URL conforming to RFC 1808.","dec":"- (NSString *)path"},"pathComponents":{"abs":"Returns the individual path components of a file URL in an array.","dec":"- (NSArray *)pathComponents"},"pathExtension":{"abs":"Returns the path extension of a file URL.","dec":"- (NSString *)pathExtension"},"port":{"abs":"Returns the port number of a URL conforming to RFC 1808.","dec":"- (NSNumber *)port"},"query":{"abs":"Returns the query string from a URL conforming to RFC 1808.","dec":"- (NSString *)query"},"relativePath":{"abs":"Returns the path of a URL conforming to RFC 1808, without resolving against the receiver’s base URL.","dec":"- (NSString *)relativePath"},"relativeString":{"abs":"Returns a string representation of the relative portion of the URL.","dec":"- (NSString *)relativeString"},"removeAllCachedResourceValues":{"abs":"Removes all cached resource values and temporary resource values from the URL object.","dec":"- (void)removeAllCachedResourceValues"},"removeCachedResourceValueForKey:":{"abs":"Removes the cached resource value identified by a given resource value key from the URL object.","dec":"- (void)removeCachedResourceValueForKey:(NSString *)key"},"resourceSpecifier":{"abs":"Returns the resource specifier of the URL.","dec":"- (NSString *)resourceSpecifier"},"resourceValuesForKeys:error:":{"abs":"Returns the resource values for the properties identified by specified array of keys.","dec":"- (NSDictionary *)resourceValuesForKeys:(NSArray *)keys error:(NSError **)error"},"scheme":{"abs":"Returns the scheme of the URL.","dec":"- (NSString *)scheme"},"setResourceValue:forKey:error:":{"abs":"Sets the resource property of the URL specified by a given key to a given value.","dec":"- (BOOL)setResourceValue:(id)value forKey:(NSString *)key error:(NSError **)error"},"setResourceValues:error:":{"abs":"Sets resource properties of the URL specified by a given set of keys to a given set of values.","dec":"- (BOOL)setResourceValues:(NSDictionary *)keyedValues error:(NSError **)error"},"setTemporaryResourceValue:forKey:":{"abs":"Sets a temporary resource value on the URL object.","dec":"- (void)setTemporaryResourceValue:(id)value forKey:(NSString *)key"},"standardizedURL":{"abs":"Returns a new NSURL object with any instances of \"..\" or \".\" removed from its path.","dec":"- (NSURL *)standardizedURL"},"URLByAppendingPathComponent:":{"abs":"Returns a new URL made by appending a path component to the original URL.","dec":"- (NSURL *)URLByAppendingPathComponent:(NSString *)pathComponent"},"URLByAppendingPathComponent:isDirectory:":{"abs":"Returns a new URL made by appending a path component to the original URL, along with a trailing slash if the component is designated a directory.","dec":"- (NSURL *)URLByAppendingPathComponent:(NSString *)pathComponentisDirectory isDirectory:(BOOL)isDirectory"},"URLByAppendingPathExtension:":{"abs":"Returns a new URL made by appending a path extension to the original URL.","dec":"- (NSURL *)URLByAppendingPathExtension:(NSString *)pathExtension"},"URLByDeletingLastPathComponent":{"abs":"Returns a new URL made by deleting the last path component from the original URL.","dec":"- (NSURL *)URLByDeletingLastPathComponent"},"URLByDeletingPathExtension":{"abs":"Returns a new URL made by deleting the path extension, if any, from the original URL.","dec":"- (NSURL *)URLByDeletingPathExtension"},"URLByResolvingSymlinksInPath":{"abs":"Returns a new URL that points to the same resource as the original URL and includes no symbolic links.","dec":"- (NSURL *)URLByResolvingSymlinksInPath"},"URLByStandardizingPath":{"abs":"Returns a new URL that points to the same resource as the original URL and is an absolute path.","dec":"- (NSURL *)URLByStandardizingPath"},"user":{"abs":"Returns the user portion of a URL conforming to RFC 1808.","dec":"- (NSString *)user"}},"[=]":{"NSURLFileScheme":"","NSURLAttributeModificationDateKey":"","NSURLContentAccessDateKey":"","NSURLContentModificationDateKey":"","NSURLCreationDateKey":"","NSURLCustomIconKey":"","NSURLEffectiveIconKey":"","NSURLFileResourceIdentifierKey":"","NSURLFileResourceTypeKey":"","NSURLFileSecurityKey":"","NSURLHasHiddenExtensionKey":"","NSURLIsDirectoryKey":"","NSURLIsExcludedFromBackupKey":"","NSURLIsExecutableKey":"","NSURLIsHiddenKey":"","NSURLIsMountTriggerKey":"","NSURLIsPackageKey":"","NSURLIsReadableKey":"","NSURLIsRegularFileKey":"","NSURLIsSymbolicLinkKey":"","NSURLIsSystemImmutableKey":"","NSURLIsUserImmutableKey":"","NSURLIsVolumeKey":"","NSURLIsWritableKey":"","NSURLLabelColorKey":"","NSURLLabelNumberKey":"","NSURLLinkCountKey":"","NSURLLocalizedLabelKey":"","NSURLLocalizedNameKey":"","NSURLLocalizedTypeDescriptionKey":"","NSURLNameKey":"","NSURLParentDirectoryURLKey":"","NSURLPathKey":"","NSURLPreferredIOBlockSizeKey":"","NSURLTypeIdentifierKey":"","NSURLVolumeIdentifierKey":"","NSURLVolumeURLKey":"","NSURLFileResourceTypeNamedPipe":"","NSURLFileResourceTypeCharacterSpecial":"","NSURLFileResourceTypeDirectory":"","NSURLFileResourceTypeBlockSpecial":"","NSURLFileResourceTypeRegular":"","NSURLFileResourceTypeSymbolicLink":"","NSURLFileResourceTypeSocket":"","NSURLFileResourceTypeUnknown":"","NSURLFileSizeKey":"","NSURLFileAllocatedSizeKey":"","NSURLTotalFileSizeKey":"","NSURLTotalFileAllocatedSizeKey":"","NSURLIsAliasFileKey":"","NSURLVolumeLocalizedFormatDescriptionKey":"","NSURLVolumeTotalCapacityKey":"","NSURLVolumeAvailableCapacityKey":"","NSURLVolumeResourceCountKey":"","NSURLVolumeSupportsPersistentIDsKey":"","NSURLVolumeSupportsSymbolicLinksKey":"","NSURLVolumeSupportsHardLinksKey":"","NSURLVolumeSupportsJournalingKey":"","NSURLVolumeIsJournalingKey":"","NSURLVolumeSupportsSparseFilesKey":"","NSURLVolumeSupportsZeroRunsKey":"","NSURLVolumeSupportsCaseSensitiveNamesKey":"","NSURLVolumeSupportsCasePreservedNamesKey":"","NSURLVolumeSupportsRootDirectoryDatesKey":"","NSURLVolumeSupportsVolumeSizesKey":"","NSURLVolumeSupportsRenamingKey":"","NSURLVolumeSupportsAdvisoryFileLockingKey":"","NSURLVolumeSupportsExtendedSecurityKey":"","NSURLVolumeIsBrowsableKey":"","NSURLVolumeMaximumFileSizeKey":"","NSURLVolumeIsEjectableKey":"","NSURLVolumeIsRemovableKey":"","NSURLVolumeIsInternalKey":"","NSURLVolumeIsAutomountedKey":"","NSURLVolumeIsLocalKey":"","NSURLVolumeIsReadOnlyKey":"","NSURLVolumeCreationDateKey":"","NSURLVolumeURLForRemountingKey":"","NSURLVolumeUUIDStringKey":"","NSURLVolumeNameKey":"","NSURLVolumeLocalizedNameKey":"","NSURLBookmarkCreationPreferFileIDResolution":"","NSURLBookmarkCreationMinimalBookmark":"","NSURLBookmarkCreationSuitableForBookmarkFile":"","NSURLBookmarkResolutionWithoutUI":"","NSURLBookmarkResolutionWithoutMounting":"","NSURLKeysOfUnsetValuesKey":"","NSURLIsUbiquitousItemKey":"","NSURLUbiquitousItemDownloadingErrorKey":"","NSURLUbiquitousItemDownloadingStatusKey":"","NSURLUbiquitousItemHasUnresolvedConflictsKey":"","NSURLUbiquitousItemIsDownloadedKey":"","NSURLUbiquitousItemIsDownloadingKey":"","NSURLUbiquitousItemIsUploadedKey":"","NSURLUbiquitousItemIsUploadingKey":"","NSURLUbiquitousItemPercentDownloadedKey":"","NSURLUbiquitousItemPercentUploadedKey":"","NSURLUbiquitousItemUploadingErrorKey":"","NSURLUbiquitousItemDownloadingStatusCurrent":"","NSURLUbiquitousItemDownloadingStatusDownloaded":"","NSURLUbiquitousItemDownloadingStatusNotDownloaded":""}};

ClassRef["NSURLAuthenticationChallenge"] = {"[:]":"NSObject","[-]":{"error":{"abs":"Returns the NSError object representing the last authentication failure.","dec":"- (NSError *)error"},"failureResponse":{"abs":"Returns the NSURLResponse object representing the last authentication failure.","dec":"- (NSURLResponse *)failureResponse"},"initWithAuthenticationChallenge:sender:":{"abs":"Returns an initialized NSURLAuthenticationChallenge object copying the properties from challenge, and setting the authentication sender to sender.","dec":"- (id)initWithAuthenticationChallenge:(NSURLAuthenticationChallenge *)challenge sender:(id < NSURLAuthenticationChallengeSender >)sender"},"initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:sender:":{"abs":"Returns an initialized NSURLAuthenticationChallenge object for the specified protection space, credential, failure count, server response, error, and sender.","dec":"- (id)initWithProtectionSpace:(NSURLProtectionSpace *)space proposedCredential:(NSURLCredential *)credential previousFailureCount:(NSInteger)count failureResponse:(NSURLResponse *)response error:(NSError *)error sender:(id < NSURLAuthenticationChallengeSender >)sender"},"previousFailureCount":{"abs":"Returns the receiver’s count of failed authentication attempts.","dec":"- (NSInteger)previousFailureCount"},"proposedCredential":{"abs":"Returns the proposed credential for this challenge.","dec":"- (NSURLCredential *)proposedCredential"},"protectionSpace":{"abs":"Returns the receiver’s protection space.","dec":"- (NSURLProtectionSpace *)protectionSpace"},"sender":{"abs":"Returns the receiver’s sender.","dec":"- (id < NSURLAuthenticationChallengeSender >)sender"}}};

ClassRef["NSURLCache"] = {"[:]":"NSObject","[+]":{"setSharedURLCache:":{"abs":"Sets the shared NSURLCache instance to a specified cache object.","dec":"+ (void)setSharedURLCache:(NSURLCache *)cache"},"sharedURLCache":{"abs":"Returns the shared NSURLCache instance.","dec":"+ (NSURLCache *)sharedURLCache"}},"[-]":{"cachedResponseForRequest:":{"abs":"Returns the cached URL response in the cache for the specified URL request.","dec":"- (NSCachedURLResponse *)cachedResponseForRequest:(NSURLRequest *)request"},"currentDiskUsage":{"abs":"Returns the current size of the receiver’s on-disk cache, in bytes.","dec":"- (NSUInteger)currentDiskUsage"},"currentMemoryUsage":{"abs":"Returns the current size of the receiver’s in-memory cache, in bytes.","dec":"- (NSUInteger)currentMemoryUsage"},"diskCapacity":{"abs":"Returns the capacity of the receiver’s on-disk cache, in bytes.","dec":"- (NSUInteger)diskCapacity"},"initWithMemoryCapacity:diskCapacity:diskPath:":{"abs":"Initializes an NSURLCache object with the specified values.","dec":"- (id)initWithMemoryCapacity:(NSUInteger)memoryCapacity diskCapacity:(NSUInteger)diskCapacity diskPath:(NSString *)path"},"memoryCapacity":{"abs":"Returns the capacity of the receiver’s in-memory cache, in bytes.","dec":"- (NSUInteger)memoryCapacity"},"removeAllCachedResponses":{"abs":"Clears the receiver’s cache, removing all stored cached URL responses.","dec":"- (void)removeAllCachedResponses"},"removeCachedResponseForRequest:":{"abs":"Removes the cached URL response for a specified URL request.","dec":"- (void)removeCachedResponseForRequest:(NSURLRequest *)request"},"setDiskCapacity:":{"abs":"Sets the receiver’s on-disk cache capacity","dec":"- (void)setDiskCapacity:(NSUInteger)diskCapacity"},"setMemoryCapacity:":{"abs":"Sets the receiver’s in-memory cache capacity.","dec":"- (void)setMemoryCapacity:(NSUInteger)memoryCapacity"},"storeCachedResponse:forRequest:":{"abs":"Stores a cached URL response for a specified request","dec":"- (void)storeCachedResponse:(NSCachedURLResponse *)cachedResponse forRequest:(NSURLRequest *)request"}}};

ClassRef["NSURLConnection"] = {"[:]":"NSObject","[+]":{"canHandleRequest:":{"abs":"Returns whether a request can be handled based on a preflight evaluation.","dec":"+ (BOOL)canHandleRequest:(NSURLRequest *)request"},"connectionWithRequest:delegate:":{"abs":"Creates and returns an initialized URL connection and begins to load the data for the URL request.","dec":"+ (NSURLConnection *)connectionWithRequest:(NSURLRequest *)request delegate:(id < NSURLConnectionDelegate >)delegate"},"sendAsynchronousRequest:queue:completionHandler:":{"abs":"Loads the data for a URL request and executes a handler block on an operation queue when the request completes or fails.","dec":"+ (void)sendAsynchronousRequest:(NSURLRequest *)request queue:(NSOperationQueue *)queue completionHandler:(void (^)(NSURLResponse*, NSData*, NSError*))handler"},"sendSynchronousRequest:returningResponse:error:":{"abs":"Performs a synchronous load of the specified URL request.","dec":"+ (NSData *)sendSynchronousRequest:(NSURLRequest *)request returningResponse:(NSURLResponse **)response error:(NSError **)error"}},"[-]":{"cancel":{"abs":"Cancels an asynchronous load of a request.","dec":"- (void)cancel"},"currentRequest":{"abs":"Returns the current connection request.","dec":"- (NSURLRequest *)currentRequest"},"initWithRequest:delegate:":{"abs":"Returns an initialized URL connection and begins to load the data for the URL request.","dec":"- (id)initWithRequest:(NSURLRequest *)request delegate:(id < NSURLConnectionDelegate >)delegate"},"initWithRequest:delegate:startImmediately:":{"abs":"Returns an initialized URL connection and begins to load the data for the URL request, if specified.","dec":"- (id)initWithRequest:(NSURLRequest *)request delegate:(id < NSURLConnectionDelegate >)delegate startImmediately:(BOOL)startImmediately"},"originalRequest":{"abs":"Returns a deep copy of the original connection request.","dec":"- (NSURLRequest *)originalRequest"},"scheduleInRunLoop:forMode:":{"abs":"Determines the run loop and mode that the connection uses to call methods on its delegate.","dec":"- (void)scheduleInRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode"},"setDelegateQueue:":{"abs":"Determines the operation queue that is used to call methods on the connection’s delegate.","dec":"- (void)setDelegateQueue:(NSOperationQueue *)queue"},"start":{"abs":"Causes the connection to begin loading data, if it has not already.","dec":"- (void)start"},"unscheduleFromRunLoop:forMode:":{"abs":"Causes the connection to stop calling delegate methods in the specified run loop and mode.","dec":"- (void)unscheduleFromRunLoop:(NSRunLoop *)aRunLoop forMode:(NSString *)mode"}}};

ClassRef["NSURLCredential"] = {"[:]":"NSObject","[+]":{"credentialForTrust:":{"abs":"Creates and returns an NSURLCredential object for server trust authentication with a given accepted trust.","dec":"+ (NSURLCredential *)credentialForTrust:(SecTrustRef)trust"},"credentialWithIdentity:certificates:persistence:":{"abs":"Creates and returns an NSURLCredential object for client certificate authentication with a given identity and a given array of client certificates using a given persistence setting.","dec":"+ (NSURLCredential *)credentialWithIdentity:(SecIdentityRef)identity certificates:(NSArray *)certArray persistence:(NSURLCredentialPersistence)persistence"},"credentialWithUser:password:persistence:":{"abs":"Creates and returns an NSURLCredential object for internet password authentication with a given user name and password using a given persistence setting.","dec":"+ (NSURLCredential *)credentialWithUser:(NSString *)user password:(NSString *)password persistence:(NSURLCredentialPersistence)persistence"}},"[-]":{"certificates":{"abs":"Returns an array of SecCertificateRef objects representing the certificates of the credential if it is a client certificate credential.","dec":"- (NSArray *)certificates"},"hasPassword":{"abs":"Returns a Boolean value that indicates whether the receiver has a password.","dec":"- (BOOL)hasPassword"},"identity":{"abs":"Returns the identity of this credential if it is a client certificate credential.","dec":"- (SecIdentityRef)identity"},"initWithIdentity:certificates:persistence:":{"abs":"Returns an NSURLCredential object for client certificate authentication initialized with a given identity and a given array of client certificates using a given persistence setting.","dec":"- (id)initWithIdentity:(SecIdentityRef)identity certificates:(NSArray *)certArray persistence:(NSURLCredentialPersistence)persistence"},"initWithTrust:":{"abs":"Returns an NSURLCredential object for server trust authentication initialized with a given accepted trust.","dec":"- (id)initWithTrust:(SecTrustRef)trust"},"initWithUser:password:persistence:":{"abs":"Returns an NSURLCredential object initialized with a given user name and password using a given persistence setting.","dec":"- (id)initWithUser:(NSString *)user password:(NSString *)password persistence:(NSURLCredentialPersistence)persistence"},"password":{"abs":"Returns the receiver’s password.","dec":"- (NSString *)password"},"persistence":{"abs":"Returns the receiver’s persistence setting.","dec":"- (NSURLCredentialPersistence)persistence"},"user":{"abs":"Returns the receiver’s user name.","dec":"- (NSString *)user"}},"[=]":{"NSURLCredentialPersistenceNone":"","NSURLCredentialPersistenceForSession":"","NSURLCredentialPersistencePermanent":"","NSURLCredentialPersistenceSynchronizable":""}};

ClassRef["NSURLCredentialStorage"] = {"[:]":"NSObject","[+]":{"sharedCredentialStorage":{"abs":"Returns the shared URL credential storage object.","dec":"+ (NSURLCredentialStorage *)sharedCredentialStorage"}},"[-]":{"allCredentials":{"abs":"Returns a dictionary containing the credentials for all available protection spaces.","dec":"- (NSDictionary *)allCredentials"},"credentialsForProtectionSpace:":{"abs":"Returns a dictionary containing the credentials for the specified protection space.","dec":"- (NSDictionary *)credentialsForProtectionSpace:(NSURLProtectionSpace *)protectionSpace"},"defaultCredentialForProtectionSpace:":{"abs":"Returns the default credential for the specified protectionSpace.","dec":"- (NSURLCredential *)defaultCredentialForProtectionSpace:(NSURLProtectionSpace *)protectionSpace"},"removeCredential:forProtectionSpace:":{"abs":"Removes a specified credential from the credential storage for the specified protection space.","dec":"- (void)removeCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)protectionSpace"},"removeCredential:forProtectionSpace:options:":{"abs":"Removes a specified credential from the credential storage for the specified protection space using the given options.","dec":"- (void)removeCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)space options:(NSDictionary *)options"},"setCredential:forProtectionSpace:":{"abs":"Adds credential to the credential storage for the specified protectionSpace.","dec":"- (void)setCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)protectionSpace"},"setDefaultCredential:forProtectionSpace:":{"abs":"Sets the default credential for a specified protection space.","dec":"- (void)setDefaultCredential:(NSURLCredential *)credential forProtectionSpace:(NSURLProtectionSpace *)protectionSpace"}},"[=]":{"NSURLCredentialStorageRemoveSynchronizableCredentials":""}};

ClassRef["NSURLProtectionSpace"] = {"[:]":"NSObject","[-]":{"authenticationMethod":{"abs":"Returns the authentication method used by the receiver.","dec":"- (NSString *)authenticationMethod"},"distinguishedNames":{"abs":"Returns an array of acceptable certificate-issuing authorities for client certificate authentication.","dec":"- (NSArray *)distinguishedNames"},"host":{"abs":"Returns the receiver’s host.","dec":"- (NSString *)host"},"initWithHost:port:protocol:realm:authenticationMethod:":{"abs":"Initializes a protection space object.","dec":"- (id)initWithHost:(NSString *)host port:(NSInteger)port protocol:(NSString *)protocol realm:(NSString *)realm authenticationMethod:(NSString *)authenticationMethod"},"initWithProxyHost:port:type:realm:authenticationMethod:":{"abs":"Initializes a protection space object representing a proxy server.","dec":"- (id)initWithProxyHost:(NSString *)host port:(NSInteger)port type:(NSString *)proxyType realm:(NSString *)realm authenticationMethod:(NSString *)authenticationMethod"},"isProxy":{"abs":"Returns whether the receiver represents a proxy server.","dec":"- (BOOL)isProxy"},"port":{"abs":"Returns the receiver’s port.","dec":"- (NSInteger)port"},"protocol":{"abs":"Returns the receiver’s protocol.","dec":"- (NSString *)protocol"},"proxyType":{"abs":"Returns the receiver's proxy type.","dec":"- (NSString *)proxyType"},"realm":{"abs":"Returns the receiver’s authentication realm","dec":"- (NSString *)realm"},"receivesCredentialSecurely":{"abs":"Returns whether the credentials for the protection space can be sent securely.","dec":"- (BOOL)receivesCredentialSecurely"},"serverTrust":{"abs":"Returns a representation of the server’s SSL transaction state.","dec":"- (SecTrustRef)serverTrust"}},"[=]":{"NSURLProtectionSpaceHTTP":"","NSURLProtectionSpaceHTTPS":"","NSURLProtectionSpaceFTP":"","NSURLProtectionSpaceHTTPProxy":"","NSURLProtectionSpaceHTTPSProxy":"","NSURLProtectionSpaceFTPProxy":"","NSURLProtectionSpaceSOCKSProxy":"","NSURLAuthenticationMethodDefault":"","NSURLAuthenticationMethodHTTPBasic":"","NSURLAuthenticationMethodHTTPDigest":"","NSURLAuthenticationMethodHTMLForm":"","NSURLAuthenticationMethodNegotiate":"","NSURLAuthenticationMethodNTLM":"","NSURLAuthenticationMethodClientCertificate":"","NSURLAuthenticationMethodServerTrust":""}};

ClassRef["NSURLProtocol"] = {"[:]":"NSObject","[+]":{"canInitWithRequest:":{"abs":"Returns whether the protocol subclass can handle the specified request.","dec":"+ (BOOL)canInitWithRequest:(NSURLRequest *)request"},"canonicalRequestForRequest:":{"abs":"Returns a canonical version of the specified request.","dec":"+ (NSURLRequest *)canonicalRequestForRequest:(NSURLRequest *)request"},"propertyForKey:inRequest:":{"abs":"Returns the property associated with the specified key in the specified request.","dec":"+ (id)propertyForKey:(NSString *)key inRequest:(NSURLRequest *)request"},"registerClass:":{"abs":"Attempts to register a subclass of NSURLProtocol, making it visible to the URL loading system.","dec":"+ (BOOL)registerClass:(Class)protocolClass"},"removePropertyForKey:inRequest:":{"abs":"Removes the property associated with the specified key in the specified request.","dec":"+ (void)removePropertyForKey:(NSString *)key inRequest:(NSMutableURLRequest *)request"},"requestIsCacheEquivalent:toRequest:":{"abs":"Returns whether two requests are equivalent for cache purposes.","dec":"+ (BOOL)requestIsCacheEquivalent:(NSURLRequest *)aRequest toRequest:(NSURLRequest *)bRequest"},"setProperty:forKey:inRequest:":{"abs":"Sets the property associated with the specified key in the specified request.","dec":"+ (void)setProperty:(id)value forKey:(NSString *)key inRequest:(NSMutableURLRequest *)request"},"unregisterClass:":{"abs":"Unregisters the specified subclass of NSURLProtocol.","dec":"+ (void)unregisterClass:(Class)protocolClass"}},"[-]":{"cachedResponse":{"abs":"Returns the receiver’s cached response.","dec":"- (NSCachedURLResponse *)cachedResponse"},"client":{"abs":"Returns the object the receiver uses to communicate with the URL loading system.","dec":"- (id < NSURLProtocolClient >)client"},"initWithRequest:cachedResponse:client:":{"abs":"Initializes an NSURLProtocol object.","dec":"- (id)initWithRequest:(NSURLRequest *)request cachedResponse:(NSCachedURLResponse *)cachedResponse client:(id < NSURLProtocolClient >)client"},"request":{"abs":"Returns the receiver’s request.","dec":"- (NSURLRequest *)request"},"startLoading":{"abs":"Starts protocol-specific loading of the request.","dec":"- (void)startLoading"},"stopLoading":{"abs":"Stops protocol-specific loading of the request.","dec":"- (void)stopLoading"}}};

ClassRef["NSURLRequest"] = {"[:]":"NSObject","[+]":{"requestWithURL:":{"abs":"Creates and returns a URL request for a specified URL with default cache policy and timeout value.","dec":"+ (id)requestWithURL:(NSURL *)theURL"},"requestWithURL:cachePolicy:timeoutInterval:":{"abs":"Creates and returns an initialized URL request with specified values.","dec":"+ (id)requestWithURL:(NSURL *)theURL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval"}},"[-]":{"allHTTPHeaderFields":{"abs":"Returns a dictionary containing all the receiver’s HTTP header fields.","dec":"- (NSDictionary *)allHTTPHeaderFields"},"allowsCellularAccess":{"abs":"Returns whether the request is allowed to use the cellular radio (if present).","dec":"- (BOOL)allowsCellularAccess"},"cachePolicy":{"abs":"Returns the receiver’s cache policy.","dec":"- (NSURLRequestCachePolicy)cachePolicy"},"HTTPBody":{"abs":"Returns the receiver’s HTTP body data.","dec":"- (NSData *)HTTPBody"},"HTTPBodyStream":{"abs":"Returns the receiver’s HTTP body stream.","dec":"- (NSInputStream *)HTTPBodyStream"},"HTTPMethod":{"abs":"Returns the receiver’s HTTP request method.","dec":"- (NSString *)HTTPMethod"},"HTTPShouldHandleCookies":{"abs":"Returns whether the default cookie handling will be used for this request.","dec":"- (BOOL)HTTPShouldHandleCookies"},"HTTPShouldUsePipelining":{"abs":"Returns whether the request should continue transmitting data before receiving a response from an earlier transmission.","dec":"- (BOOL)HTTPShouldUsePipelining"},"initWithURL:":{"abs":"Returns a URL request for a specified URL with default cache policy and timeout value.","dec":"- (id)initWithURL:(NSURL *)theURL"},"initWithURL:cachePolicy:timeoutInterval:":{"abs":"Returns an initialized URL request with specified values.","dec":"- (id)initWithURL:(NSURL *)theURL cachePolicy:(NSURLRequestCachePolicy)cachePolicy timeoutInterval:(NSTimeInterval)timeoutInterval"},"mainDocumentURL":{"abs":"Returns the main document URL associated with the request.","dec":"- (NSURL *)mainDocumentURL"},"networkServiceType":{"abs":"Returns the network service type of the request.","dec":"- (NSURLRequestNetworkServiceType)networkServiceType"},"supportsSecureCoding":{"abs":"Indicates that NSURLRequest implements the NSSecureCoding protocol.","dec":"- (BOOL)supportsSecureCoding"},"timeoutInterval":{"abs":"Returns the receiver’s timeout interval, in seconds.","dec":"- (NSTimeInterval)timeoutInterval"},"URL":{"abs":"Returns the request's URL.","dec":"- (NSURL *)URL"},"valueForHTTPHeaderField:":{"abs":"Returns the value of the specified HTTP header field.","dec":"- (NSString *)valueForHTTPHeaderField:(NSString *)field"}},"[=]":{"NSURLRequestUseProtocolCachePolicy":"","NSURLRequestReloadIgnoringLocalCacheData":"","NSURLRequestReloadIgnoringLocalAndRemoteCacheData":"","NSURLRequestReloadIgnoringCacheData":"","NSURLRequestReturnCacheDataElseLoad":"","NSURLRequestReturnCacheDataDontLoad":"","NSURLRequestReloadRevalidatingCacheData":"","NSURLNetworkServiceTypeDefault":"","NSURLNetworkServiceTypeVoIP":"","NSURLNetworkServiceTypeVideo":"","NSURLNetworkServiceTypeBackground":"","NSURLNetworkServiceTypeVoice":""}};

ClassRef["NSURLResponse"] = {"[:]":"NSObject","[-]":{"expectedContentLength":{"abs":"Returns the receiver’s expected content length","dec":"- (long long)expectedContentLength"},"initWithURL:MIMEType:expectedContentLength:textEncodingName:":{"abs":"Returns an initialized NSURLResponse object with the URL, MIME type, length, and text encoding set to given values.","dec":"- (id)initWithURL:(NSURL *)URL MIMEType:(NSString *)MIMEType expectedContentLength:(NSInteger)length textEncodingName:(NSString *)name"},"MIMEType":{"abs":"Returns the receiver’s MIME type.","dec":"- (NSString *)MIMEType"},"suggestedFilename":{"abs":"Returns a suggested filename for the response data.","dec":"- (NSString *)suggestedFilename"},"textEncodingName":{"abs":"Returns the name of the receiver’s text encoding provided by the response’s originating source.","dec":"- (NSString *)textEncodingName"},"URL":{"abs":"Returns the receiver’s URL.","dec":"- (NSURL *)URL"}},"[=]":{"NSURLResponseUnknownLength":""}};

ClassRef["NSURLSession"] = {"[:]":"NSObject","[.]":{"configuration":{"abs":"A copy of the configuration object for this session. (read-only)","dec":"@property(readonly, copy) NSURLSessionConfiguration *configuration"},"delegate":{"abs":"The delegate assigned when this object was created. (read-only)","dec":"@property(readonly, retain) id<NSURLSessionDelegate> delegate"},"delegateQueue":{"abs":"The operation queue provided when this object was created. (read-only)","dec":"@property(readonly, retain) NSOperationQueue *delegateQueue"},"sessionDescription":{"abs":"An app-defined descriptive label for the session.","dec":"@property(copy) NSString *sessionDescription"}},"[+]":{"sessionWithConfiguration:":{"abs":"Creates a session with the specified session configuration.","dec":"+ (NSURLSession *)sessionWithConfiguration:(NSURLSessionConfiguration *)configuration"},"sessionWithConfiguration:delegate:delegateQueue:":{"abs":"Creates a session with the specified session configuration, delegate, and operation queue.","dec":"+ (NSURLSession *)sessionWithConfiguration:(NSURLSessionConfiguration *)configuration delegate:(id<NSURLSessionDelegate>)delegate delegateQueue:(NSOperationQueue *)queue"},"sharedSession":{"abs":"Returns a shared singleton session object.","dec":"+ (NSURLSession *)sharedSession"}},"[-]":{"dataTaskWithRequest:":{"abs":"Creates an HTTP request based on the specified URL request object.","dec":"- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request"},"dataTaskWithRequest:completionHandler:":{"abs":"Creates an HTTP request for the specified URL request object, and calls a handler upon completion.","dec":"- (NSURLSessionDataTask *)dataTaskWithRequest:(NSURLRequest *)request completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler"},"dataTaskWithURL:":{"abs":"Creates an HTTP GET request for the specified URL.","dec":"- (NSURLSessionDataTask *)dataTaskWithURL:(NSURL *)url"},"dataTaskWithURL:completionHandler:":{"abs":"Creates an HTTP GET request for the specified URL, then calls a handler upon completion.","dec":"- (NSURLSessionDataTask *)dataTaskWithURL:(NSURL *)url completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler"},"downloadTaskWithRequest:":{"abs":"Creates a download task for the specified URL request and saves the results to a file.","dec":"- (NSURLSessionDownloadTask *)downloadTaskWithRequest:(NSURLRequest *)request"},"downloadTaskWithRequest:completionHandler:":{"abs":"Creates a download task for the specified URL request, saves the results to a file, and calls a handler upon completion.","dec":"- (NSURLSessionDownloadTask *)downloadTaskWithRequest:(NSURLRequest *)request completionHandler:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler"},"downloadTaskWithResumeData:":{"abs":"Creates a download task to resume a previously canceled or failed download.","dec":"- (NSURLSessionDownloadTask *)downloadTaskWithResumeData:(NSData *)resumeData"},"downloadTaskWithResumeData:completionHandler:":{"abs":"Creates a download task to resume a previously canceled or failed download and calls a handler upon completion.","dec":"- (NSURLSessionDownloadTask *)downloadTaskWithResumeData:(NSData *)resumeData completionHandler:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler"},"downloadTaskWithURL:":{"abs":"Creates a download task for the specified URL and saves the results to a file.","dec":"- (NSURLSessionDownloadTask *)downloadTaskWithURL:(NSURL *)url"},"downloadTaskWithURL:completionHandler:":{"abs":"Creates a download task for the specified URL, saves the results to a file, and calls a handler upon completion.","dec":"- (NSURLSessionDownloadTask *)downloadTaskWithURL:(NSURL *)url completionHandler:(void (^)(NSURL *location, NSURLResponse *response, NSError *error))completionHandler"},"finishTasksAndInvalidate":{"abs":"Invalidates the object, allowing any outstanding tasks to finish.","dec":"- (void)finishTasksAndInvalidate"},"flushWithCompletionHandler:":{"abs":"Ensures that future requests occur on a new socket and that any in-transit download data is flushed to disk.","dec":"- (void)flushWithCompletionHandler:(void (^)(void))completionHandler"},"getTasksWithCompletionHandler:":{"abs":"Asynchronously calls a completion callback with all outstanding data, upload, and download tasks in a session.","dec":"- (void)getTasksWithCompletionHandler:(void (^)(NSArray *dataTasks, NSArray *uploadTasks, NSArray *downloadTasks))completionHandler"},"invalidateAndCancel":{"abs":"Cancels all outstanding tasks and then invalidates the session object.","dec":"- (void)invalidateAndCancel"},"resetWithCompletionHandler:":{"abs":"Resets the session asynchronously.","dec":"- (void)resetWithCompletionHandler:(void (^)(void))completionHandler"},"uploadTaskWithRequest:fromData:":{"abs":"Creates an HTTP request for the specified URL request object and uploads the provided data object.","dec":"- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromData:(NSData *)bodyData"},"uploadTaskWithRequest:fromData:completionHandler:":{"abs":"Creates an HTTP request for the specified URL request object, uploads the provided data object, and calls a handler upon completion.","dec":"- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromData:(NSData *)bodyData completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler"},"uploadTaskWithRequest:fromFile:":{"abs":"Creates an HTTP request for uploading the specified file URL.","dec":"- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromFile:(NSURL *)fileURL"},"uploadTaskWithRequest:fromFile:completionHandler:":{"abs":"Creates an HTTP request for uploading the specified file URL, then calls a handler upon completion.","dec":"- (NSURLSessionUploadTask *)uploadTaskWithRequest:(NSURLRequest *)request fromFile:(NSURL *)fileURL completionHandler:(void (^)(NSData *data, NSURLResponse *response, NSError *error))completionHandler"},"uploadTaskWithStreamedRequest:":{"abs":"Creates an HTTP request for uploading data based on the specified URL request.","dec":"- (NSURLSessionUploadTask *)uploadTaskWithStreamedRequest:(NSURLRequest *)request"}},"[=]":{"NSURLSessionDownloadTaskResumeData":"","NSURLErrorBackgroundTaskCancelledReasonKey":"","NSURLErrorCancelledReasonUserForceQuitApplication":"","NSURLErrorCancelledReasonBackgroundUpdatesDisabled":"","NSURLSessionTaskStateRunning":"","NSURLSessionTaskStateSuspended":"","NSURLSessionTaskStateCanceling":"","NSURLSessionTaskStateCompleted":"","NSURLSessionAuthChallengeUseCredential":"","NSURLSessionAuthChallengePerformDefaultHandling":"","NSURLSessionAuthChallengeCancelAuthenticationChallenge":"","NSURLSessionAuthChallengeRejectProtectionSpace":"","NSURLSessionTransferSizeUnknown":""}};

ClassRef["NSURLSessionConfiguration"] = {"[:]":"NSObject","[.]":{"allowsCellularAccess":{"abs":"A Boolean value that determines whether connections should be made over a cellular network.","dec":"@property BOOL allowsCellularAccess"},"connectionProxyDictionary":{"abs":"A dictionary containing information about the HTTP proxy to use within this session.","dec":"@property(copy) NSDictionary *connectionProxyDictionary"},"discretionary":{"abs":"A Boolean value that determines whether background tasks can be scheduled at the discretion of the system for optimal performance.","dec":"@property(getter=isDiscretionary) BOOL discretionary"},"HTTPAdditionalHeaders":{"abs":"A dictionary of additional headers to send with requests.","dec":"@property(copy) NSDictionary *HTTPAdditionalHeaders"},"HTTPCookieAcceptPolicy":{"abs":"A policy constant that determines when cookies should be accepted.","dec":"@property NSHTTPCookieAcceptPolicy HTTPCookieAcceptPolicy"},"HTTPCookieStorage":{"abs":"The pool for storing cookies within this session.","dec":"@property(retain) NSHTTPCookieStorage *HTTPCookieStorage"},"HTTPMaximumConnectionsPerHost":{"abs":"The maximum number of simultaneous connections to make to a given host.","dec":"@property NSInteger HTTPMaximumConnectionsPerHost"},"HTTPShouldSetCookies":{"abs":"A Boolean value that determines whether requests should contain cookies from the cookie storage pool.","dec":"@property BOOL HTTPShouldSetCookies"},"HTTPShouldUsePipelining":{"abs":"A Boolean value that determines whether HTTP pipelining should be used.","dec":"@property BOOL HTTPShouldUsePipelining"},"identifier":{"abs":"The background session identifier specified when creating the configuration object. (read-only)","dec":"@property(readonly, copy) NSString *identifier"},"networkServiceType":{"abs":"The type of network service.","dec":"@property NSURLRequestNetworkServiceType networkServiceType"},"protocolClasses":{"abs":"An optional array of class objects that subclass NSURLProtocol.","dec":"@property(copy) NSArray *protocolClasses"},"requestCachePolicy":{"abs":"A predefined constant that determines when to return a response from the cache.","dec":"@property NSURLRequestCachePolicy requestCachePolicy"},"sessionSendsLaunchEvents":{"abs":"Whether the app should be resumed or launched in the background when needed.","dec":"@property BOOL sessionSendsLaunchEvents"},"timeoutIntervalForRequest":{"abs":"The timeout interval to use when waiting for additional data.","dec":"@property NSTimeInterval timeoutIntervalForRequest"},"timeoutIntervalForResource":{"abs":"The maximum amount of time that a resource request should be allowed to take.","dec":"@property NSTimeInterval timeoutIntervalForResource"},"TLSMaximumSupportedProtocol":{"abs":"The maximum TLS protocol version that the client should request when making connections in this session.","dec":"@property SSLProtocol TLSMaximumSupportedProtocol"},"TLSMinimumSupportedProtocol":{"abs":"The minimum TLS protocol that should be accepted during protocol negotiation.","dec":"@property SSLProtocol TLSMinimumSupportedProtocol"},"URLCache":{"abs":"The URL cache for providing cached responses to requests within the session.","dec":"@property(retain) NSURLCache *URLCache"},"URLCredentialStorage":{"abs":"A credential storage pool that provides stored credentials for authentication.","dec":"@property(retain) NSURLCredentialStorage *URLCredentialStorage"}},"[+]":{"backgroundSessionConfiguration:":{"abs":"Returns a preconfigured session configuration object that causes the upload or download to be performed in the background.","dec":"+ (NSURLSessionConfiguration *)backgroundSessionConfiguration:(NSString *)identifier"},"defaultSessionConfiguration":{"abs":"Returns a copy of the default session configuration.","dec":"+ (NSURLSessionConfiguration *)defaultSessionConfiguration"},"ephemeralSessionConfiguration":{"abs":"Returns a session configuration that uses no persistent storage for caches, cookies, or credentials.","dec":"+ (NSURLSessionConfiguration *)ephemeralSessionConfiguration"}}};

ClassRef["NSURLSessionDataTask"] = {"[:]":"NSURLSessionTask : NSObject"};

ClassRef["NSURLSessionDownloadTask"] = {"[:]":"NSURLSessionTask : NSObject","[-]":{"cancelByProducingResumeData:":{"abs":"Cancels a download and calls a callback with resume data for later use.","dec":"- (void)cancelByProducingResumeData:(void (^)(NSData *resumeData))completionHandler"}}};

ClassRef["NSURLSessionTask"] = {"[:]":"NSObject","[.]":{"countOfBytesExpectedToReceive":{"abs":"The number of bytes that the task expects to receive in the response body. (read-only)","dec":"@property(readonly) int64_t countOfBytesExpectedToReceive"},"countOfBytesExpectedToSend":{"abs":"The number of bytes that the task expects to send in the request body. (read-only)","dec":"@property(readonly) int64_t countOfBytesExpectedToSend"},"countOfBytesReceived":{"abs":"The number of bytes that the task has received from the server in the response body. (read-only)","dec":"@property(readonly) int64_t countOfBytesReceived"},"countOfBytesSent":{"abs":"The number of bytes that the task has sent to the server in the request body. (read-only)","dec":"@property(readonly) int64_t countOfBytesSent"},"currentRequest":{"abs":"The URL request object currently being handled by the task. (read-only)","dec":"@property(readonly, copy) NSURLRequest *currentRequest"},"error":{"abs":"An error object that indicates why the task failed. (read-only)","dec":"@property(readonly, copy) NSError *error"},"originalRequest":{"abs":"The original request object passed when the task was created. (read-only)","dec":"@property(readonly, copy) NSURLRequest *originalRequest"},"response":{"abs":"The server’s response to the currently active request. (read-only)","dec":"@property(readonly, copy) NSURLResponse *response"},"state":{"abs":"The current state of the task—active, suspended, in the process of being canceled, or completed. (read-only)","dec":"@property(readonly) NSURLSessionTaskState state"},"taskDescription":{"abs":"An app-provided description of the current task.","dec":"@property(copy) NSString *taskDescription"},"taskIdentifier":{"abs":"An identifier uniquely identifies the task within a given session. (read-only)","dec":"@property(readonly) NSUInteger taskIdentifier"}},"[-]":{"cancel":{"abs":"Cancels the task.","dec":"- (void)cancel"},"resume":{"abs":"Resumes the task, if it is suspended.","dec":"- (void)resume"},"suspend":{"abs":"Temporarily suspends a task.","dec":"- (void)suspend"}},"[=]":{"NSURLSessionTaskStateRunning":"","NSURLSessionTaskStateSuspended":"","NSURLSessionTaskStateCanceling":"","NSURLSessionTaskStateCompleted":""}};

ClassRef["NSURLSessionUploadTask"] = {"[:]":"NSURLSessionDataTask : NSURLSessionTask : NSObject"};

ClassRef["NSUserDefaults"] = {"[:]":"NSObject","[+]":{"resetStandardUserDefaults":{"abs":"Synchronizes any changes made to the shared user defaults object and releases it from memory.","dec":"+ (void)resetStandardUserDefaults"},"standardUserDefaults":{"abs":"Returns the shared defaults object.","dec":"+ (NSUserDefaults *)standardUserDefaults"}},"[-]":{"addSuiteNamed:":{"abs":"Inserts the specified domain name into the receiver’s search list.","dec":"- (void)addSuiteNamed:(NSString *)suiteName"},"arrayForKey:":{"abs":"Returns the array associated with the specified key.","dec":"- (NSArray *)arrayForKey:(NSString *)defaultName"},"boolForKey:":{"abs":"Returns the Boolean value associated with the specified key.","dec":"- (BOOL)boolForKey:(NSString *)defaultName"},"dataForKey:":{"abs":"Returns the data object associated with the specified key.","dec":"- (NSData *)dataForKey:(NSString *)defaultName"},"dictionaryForKey:":{"abs":"Returns the dictionary object associated with the specified key.","dec":"- (NSDictionary *)dictionaryForKey:(NSString *)defaultName"},"dictionaryRepresentation":{"abs":"Returns a dictionary that contains a union of all key-value pairs in the domains in the search list.","dec":"- (NSDictionary *)dictionaryRepresentation"},"doubleForKey:":{"abs":"Returns the double value associated with the specified key.","dec":"- (double)doubleForKey:(NSString *)defaultName"},"floatForKey:":{"abs":"Returns the floating-point value associated with the specified key.","dec":"- (float)floatForKey:(NSString *)defaultName"},"init":{"abs":"Returns an NSUserDefaults object initialized with the defaults for the current user account.","dec":"- (id)init"},"integerForKey:":{"abs":"Returns the integer value associated with the specified key..","dec":"- (NSInteger)integerForKey:(NSString *)defaultName"},"objectForKey:":{"abs":"Returns the object associated with the first occurrence of the specified default.","dec":"- (id)objectForKey:(NSString *)defaultName"},"objectIsForcedForKey:":{"abs":"Returns a Boolean value indicating whether the specified key is managed by an administrator.","dec":"- (BOOL)objectIsForcedForKey:(NSString *)key"},"objectIsForcedForKey:inDomain:":{"abs":"Returns a Boolean value indicating whether the key in the specified domain is managed by an administrator.","dec":"- (BOOL)objectIsForcedForKey:(NSString *)key inDomain:(NSString *)domain"},"persistentDomainForName:":{"abs":"Returns a dictionary containing the keys and values in the specified persistent domain.","dec":"- (NSDictionary *)persistentDomainForName:(NSString *)domainName"},"registerDefaults:":{"abs":"Adds the contents of the specified dictionary to the registration domain.","dec":"- (void)registerDefaults:(NSDictionary *)dictionary"},"removeObjectForKey:":{"abs":"Removes the value of the specified default key in the standard application domain.","dec":"- (void)removeObjectForKey:(NSString *)defaultName"},"removePersistentDomainForName:":{"abs":"Removes the contents of the specified persistent domain from the user’s defaults.","dec":"- (void)removePersistentDomainForName:(NSString *)domainName"},"removeSuiteNamed:":{"abs":"Removes the specified domain name from the receiver’s search list.","dec":"- (void)removeSuiteNamed:(NSString *)suiteName"},"removeVolatileDomainForName:":{"abs":"Removes the specified volatile domain from the user’s defaults.","dec":"- (void)removeVolatileDomainForName:(NSString *)domainName"},"setBool:forKey:":{"abs":"Sets the value of the specified default key to the specified Boolean value.","dec":"- (void)setBool:(BOOL)value forKey:(NSString *)defaultName"},"setDouble:forKey:":{"abs":"Sets the value of the specified default key to the double value.","dec":"- (void)setDouble:(double)value forKey:(NSString *)defaultName"},"setFloat:forKey:":{"abs":"Sets the value of the specified default key to the specified floating-point value.","dec":"- (void)setFloat:(float)value forKey:(NSString *)defaultName"},"setInteger:forKey:":{"abs":"Sets the value of the specified default key to the specified integer value.","dec":"- (void)setInteger:(NSInteger)value forKey:(NSString *)defaultName"},"setObject:forKey:":{"abs":"Sets the value of the specified default key in the standard application domain.","dec":"- (void)setObject:(id)value forKey:(NSString *)defaultName"},"setPersistentDomain:forName:":{"abs":"Sets the dictionary for the specified persistent domain.","dec":"- (void)setPersistentDomain:(NSDictionary *)domain forName:(NSString *)domainName"},"setURL:forKey:":{"abs":"Sets the value of the specified default key to the specified URL.","dec":"- (void)setURL:(NSURL *)url forKey:(NSString *)defaultName"},"setVolatileDomain:forName:":{"abs":"Sets the dictionary for the specified volatile domain.","dec":"- (void)setVolatileDomain:(NSDictionary *)domain forName:(NSString *)domainName"},"stringArrayForKey:":{"abs":"Returns the array of strings associated with the specified key.","dec":"- (NSArray *)stringArrayForKey:(NSString *)defaultName"},"stringForKey:":{"abs":"Returns the string associated with the specified key.","dec":"- (NSString *)stringForKey:(NSString *)defaultName"},"synchronize":{"abs":"Writes any modifications to the persistent domains to disk and updates all unmodified persistent domains to what is on disk.","dec":"- (BOOL)synchronize"},"URLForKey:":{"abs":"Returns the NSURL instance associated with the specified key.","dec":"- (NSURL *)URLForKey:(NSString *)defaultName"},"volatileDomainForName:":{"abs":"Returns the dictionary for the specified volatile domain.","dec":"- (NSDictionary *)volatileDomainForName:(NSString *)domainName"},"volatileDomainNames":{"abs":"Returns an array of the current volatile domain names.","dec":"- (NSArray *)volatileDomainNames"}},"[=]":{"NSGlobalDomain":"","NSArgumentDomain":"","NSRegistrationDomain":""}};

ClassRef["NSUUID"] = {"[:]":"NSObject","[+]":{"UUID":{"abs":"Create and returns a new UUID with RFC 4122 version 4 random bytes.","dec":"+ (id)UUID"}},"[-]":{"getUUIDBytes:":{"abs":"Returns the UUIDs bytes.","dec":"- (void)getUUIDBytes:(uuid_t)uuid"},"init":{"abs":"Create and returns a new UUID with RFC 4122 version 4 random bytes.","dec":"- (id)init"},"initWithUUIDBytes:":{"abs":"Creates and returns a new UUID with the given bytes.","dec":"- (id)initWithUUIDBytes:(const uuid_t)bytes"},"initWithUUIDString:":{"abs":"Creates and returns a new UUID from the formatted string.","dec":"- (id)initWithUUIDString:(NSString *)string"},"UUIDString":{"abs":"Returns the UUID as a string.","dec":"- (NSString *)UUIDString"}}};

ClassRef.NSValueUIKitAdditions = {"[:]":"NSObject","[+]":{"valueWithCGAffineTransform:":{"abs":"Creates and returns a value object that contains the specified affine transform data.","dec":"+ (NSValue *)valueWithCGAffineTransform:(CGAffineTransform)transform"},"valueWithCGPoint:":{"abs":"Creates and returns a value object that contains the specified point structure.","dec":"+ (NSValue *)valueWithCGPoint:(CGPoint)point"},"valueWithCGRect:":{"abs":"Creates and returns a value object that contains the specified rectangle structure.","dec":"+ (NSValue *)valueWithCGRect:(CGRect)rect"},"valueWithCGSize:":{"abs":"Creates and returns a value object that contains the specified size structure.","dec":"+ (NSValue *)valueWithCGSize:(CGSize)size"},"valueWithUIEdgeInsets:":{"abs":"Creates and returns a value object that contains the specified edge inset data.","dec":"+ (NSValue *)valueWithUIEdgeInsets:(UIEdgeInsets)insets"},"valueWithUIOffset:":{"abs":"Creates and returns a value object that contains the specified offset data.","dec":"+ (NSValue *)valueWithUIOffset:(UIOffset)insets"}},"[-]":{"CGAffineTransformValue":{"abs":"Returns an affine transform structure representing the data in the receiver.","dec":"- (CGAffineTransform)CGAffineTransformValue"},"CGPointValue":{"abs":"Returns a point structure representing the data in the receiver.","dec":"- (CGPoint)CGPointValue"},"CGRectValue":{"abs":"Returns a rectangle structure representing the data in the receiver.","dec":"- (CGRect)CGRectValue"},"CGSizeValue":{"abs":"Returns a size structure representing the data in the receiver.","dec":"- (CGSize)CGSizeValue"},"UIEdgeInsetsValue":{"abs":"Returns an edge insets structure representing the data in the receiver.","dec":"- (UIEdgeInsets)UIEdgeInsetsValue"},"UIOffsetValue":{"abs":"Returns an offset structure representing the data in the receiver.","dec":"- (UIOffset)UIOffsetValue"}}};

ClassRef["NSValue"] = {"[:]":"NSObject","[+]":{"value:withObjCType:":{"abs":"Creates and returns an NSValue object that contains a given value which is interpreted as being of a given Objective-C type.","dec":"+ (NSValue *)value:(const void *)value withObjCType:(const char *)type"},"valueWithBytes:objCType:":{"abs":"Creates and returns an NSValue object that contains a given value, which is interpreted as being of a given Objective-C type.","dec":"+ (NSValue *)valueWithBytes:(const void *)value objCType:(const char *)type"},"valueWithNonretainedObject:":{"abs":"Creates and returns an NSValue object that contains a given object.","dec":"+ (NSValue *)valueWithNonretainedObject:(id)anObject"},"valueWithPointer:":{"abs":"Creates and returns an NSValue object that contains a given pointer.","dec":"+ (NSValue *)valueWithPointer:(const void *)aPointer"},"valueWithRange:":{"abs":"Creates and returns an NSValue object that contains a given NSRange structure.","dec":"+ (NSValue *)valueWithRange:(NSRange)range"}},"[-]":{"getValue:":{"abs":"Copies the receiver’s value into a given buffer.","dec":"- (void)getValue:(void *)buffer"},"initWithBytes:objCType:":{"abs":"Initializes and returns an NSValue object that contains a given value, which is interpreted as being of a given Objective-C type.","dec":"- (id)initWithBytes:(const void *)value objCType:(const char *)type"},"isEqualToValue:":{"abs":"Returns a Boolean value that indicates whether the receiver and another value are equal.","dec":"- (BOOL)isEqualToValue:(NSValue *)value"},"nonretainedObjectValue":{"abs":"Returns the receiver's value as an id.","dec":"- (id)nonretainedObjectValue"},"objCType":{"abs":"Returns a C string containing the Objective-C type of the data contained in the receiver.","dec":"- (const char *)objCType"},"pointerValue":{"abs":"Returns the receiver's value as a pointer to void.","dec":"- (void *)pointerValue"},"rangeValue":{"abs":"Returns an NSRange structure representation of the receiver.","dec":"- (NSRange)rangeValue"}}};

ClassRef["NSValueTransformer"] = {"[:]":"NSObject","[+]":{"allowsReverseTransformation":{"abs":"Returns a Boolean value that indicates whether the receiver can reverse a transformation.","dec":"+ (BOOL)allowsReverseTransformation"},"setValueTransformer:forName:":{"abs":"Registers the provided value transformer with a given identifier.","dec":"+ (void)setValueTransformer:(NSValueTransformer *)transformer forName:(NSString *)name"},"transformedValueClass":{"abs":"Returns the class of the value returned by the receiver for a forward transformation.","dec":"+ (Class)transformedValueClass"},"valueTransformerForName:":{"abs":"Returns the value transformer identified by a given identifier.","dec":"+ (NSValueTransformer *)valueTransformerForName:(NSString *)name"},"valueTransformerNames":{"abs":"Returns an array of all the registered value transformers.","dec":"+ (NSArray *)valueTransformerNames"}},"[-]":{"reverseTransformedValue:":{"abs":"Returns the result of the reverse transformation of a given value.","dec":"- (id)reverseTransformedValue:(id)value"},"transformedValue:":{"abs":"Returns the result of transforming a given value.","dec":"- (id)transformedValue:(id)value"}},"[=]":{"NSNegateBooleanTransformerName":"","NSIsNilTransformerName":"","NSIsNotNilTransformerName":"","NSUnarchiveFromDataTransformerName":"","NSKeyedUnarchiveFromDataTransformerName":""}};

ClassRef["NSXMLParser"] = {"[:]":"NSObject","[-]":{"abortParsing":{"abs":"Stops the parser object.","dec":"- (void)abortParsing"},"columnNumber":{"abs":"Returns the column number of the XML document being processed by the receiver.","dec":"- (NSInteger)columnNumber"},"delegate":{"abs":"Returns the receiver’s delegate.","dec":"- (id < NSXMLParserDelegate >)delegate"},"initWithContentsOfURL:":{"abs":"Initializes the receiver with the XML content referenced by the given URL.","dec":"- (id)initWithContentsOfURL:(NSURL *)url"},"initWithData:":{"abs":"Initializes the receiver with the XML contents encapsulated in a given data object.","dec":"- (id)initWithData:(NSData *)data"},"initWithStream:":{"abs":"Initializes the receiver with the XML contents from the specified stream and parses it..","dec":"- (id)initWithStream:(NSInputStream *)stream"},"lineNumber":{"abs":"Returns the line number of the XML document being processed by the receiver.","dec":"- (NSInteger)lineNumber"},"parse":{"abs":"Starts the event-driven parsing operation.","dec":"- (BOOL)parse"},"parserError":{"abs":"Returns an NSError object from which you can obtain information about a parsing error.","dec":"- (NSError *)parserError"},"publicID":{"abs":"Returns the public identifier of the external entity referenced in the XML document.","dec":"- (NSString *)publicID"},"setDelegate:":{"abs":"Sets the receiver’s delegate.","dec":"- (void)setDelegate:(id < NSXMLParserDelegate >)delegate"},"setShouldProcessNamespaces:":{"abs":"Specifies whether the receiver reports the namespace and the qualified name of an element in related delegation methods .","dec":"- (void)setShouldProcessNamespaces:(BOOL)shouldProcessNamespaces"},"setShouldReportNamespacePrefixes:":{"abs":"Specifies whether the receiver reports the scope of namespace declarations using related delegation methods.","dec":"- (void)setShouldReportNamespacePrefixes:(BOOL)shouldReportNamespacePrefixes"},"setShouldResolveExternalEntities:":{"abs":"Specifies whether the receiver reports declarations of external entities using the delegate method parser:foundExternalEntityDeclarationWithName:publicID:systemID:.","dec":"- (void)setShouldResolveExternalEntities:(BOOL)shouldResolveExternalEntities"},"shouldProcessNamespaces":{"abs":"Indicates whether the receiver reports the namespace and the qualified name of an element in related delegation methods.","dec":"- (BOOL)shouldProcessNamespaces"},"shouldReportNamespacePrefixes":{"abs":"Indicates whether the receiver reports the prefixes indicating the scope of namespace declarations using related delegation methods.","dec":"- (BOOL)shouldReportNamespacePrefixes"},"shouldResolveExternalEntities":{"abs":"Indicates whether the receiver reports declarations of external entities using the delegate method parser:foundExternalEntityDeclarationWithName:publicID:systemID:.","dec":"- (BOOL)shouldResolveExternalEntities"},"systemID":{"abs":"Returns the system identifier of the external entity referenced in the XML document.","dec":"- (NSString *)systemID"}},"[=]":{"NSXMLParserErrorDomain":"","NSXMLParserInternalError":"","NSXMLParserOutOfMemoryError":"","NSXMLParserDocumentStartError":"","NSXMLParserEmptyDocumentError":"","NSXMLParserPrematureDocumentEndError":"","NSXMLParserInvalidHexCharacterRefError":"","NSXMLParserInvalidDecimalCharacterRefError":"","NSXMLParserInvalidCharacterRefError":"","NSXMLParserInvalidCharacterError":"","NSXMLParserCharacterRefAtEOFError":"","NSXMLParserCharacterRefInPrologError":"","NSXMLParserCharacterRefInEpilogError":"","NSXMLParserCharacterRefInDTDError":"","NSXMLParserEntityRefAtEOFError":"","NSXMLParserEntityRefInPrologError":"","NSXMLParserEntityRefInEpilogError":"","NSXMLParserEntityRefInDTDError":"","NSXMLParserParsedEntityRefAtEOFError":"","NSXMLParserParsedEntityRefInPrologError":"","NSXMLParserParsedEntityRefInEpilogError":"","NSXMLParserParsedEntityRefInInternalSubsetError":"","NSXMLParserEntityReferenceWithoutNameError":"","NSXMLParserEntityReferenceMissingSemiError":"","NSXMLParserParsedEntityRefNoNameError":"","NSXMLParserParsedEntityRefMissingSemiError":"","NSXMLParserUndeclaredEntityError":"","NSXMLParserUnparsedEntityError":"","NSXMLParserEntityIsExternalError":"","NSXMLParserEntityIsParameterError":"","NSXMLParserUnknownEncodingError":"","NSXMLParserEncodingNotSupportedError":"","NSXMLParserStringNotStartedError":"","NSXMLParserStringNotClosedError":"","NSXMLParserNamespaceDeclarationError":"","NSXMLParserEntityNotStartedError":"","NSXMLParserEntityNotFinishedError":"","NSXMLParserLessThanSymbolInAttributeError":"","NSXMLParserAttributeNotStartedError":"","NSXMLParserAttributeNotFinishedError":"","NSXMLParserAttributeHasNoValueError":"","NSXMLParserAttributeRedefinedError":"","NSXMLParserLiteralNotStartedError":"","NSXMLParserLiteralNotFinishedError":"","NSXMLParserCommentNotFinishedError":"","NSXMLParserProcessingInstructionNotStartedError":"","NSXMLParserProcessingInstructionNotFinishedError":"","NSXMLParserNotationNotStartedError":"","NSXMLParserNotationNotFinishedError":"","NSXMLParserAttributeListNotStartedError":"","NSXMLParserAttributeListNotFinishedError":"","NSXMLParserMixedContentDeclNotStartedError":"","NSXMLParserMixedContentDeclNotFinishedError":"","NSXMLParserElementContentDeclNotStartedError":"","NSXMLParserElementContentDeclNotFinishedError":"","NSXMLParserXMLDeclNotStartedError":"","NSXMLParserXMLDeclNotFinishedError":"","NSXMLParserConditionalSectionNotStartedError":"","NSXMLParserConditionalSectionNotFinishedError":"","NSXMLParserExternalSubsetNotFinishedError":"","NSXMLParserDOCTYPEDeclNotFinishedError":"","NSXMLParserMisplacedCDATAEndStringError":"","NSXMLParserCDATANotFinishedError":"","NSXMLParserMisplacedXMLDeclarationError":"","NSXMLParserSpaceRequiredError":"","NSXMLParserSeparatorRequiredError":"","NSXMLParserNMTOKENRequiredError":"","NSXMLParserNAMERequiredError":"","NSXMLParserPCDATARequiredError":"","NSXMLParserURIRequiredError":"","NSXMLParserPublicIdentifierRequiredError":"","NSXMLParserLTRequiredError":"","NSXMLParserGTRequiredError":"","NSXMLParserLTSlashRequiredError":"","NSXMLParserEqualExpectedError":"","NSXMLParserTagNameMismatchError":"","NSXMLParserUnfinishedTagError":"","NSXMLParserStandaloneValueError":"","NSXMLParserInvalidEncodingNameError":"","NSXMLParserCommentContainsDoubleHyphenError":"","NSXMLParserInvalidEncodingError":"","NSXMLParserExternalStandaloneEntityError":"","NSXMLParserInvalidConditionalSectionError":"","NSXMLParserEntityValueRequiredError":"","NSXMLParserNotWellBalancedError":"","NSXMLParserExtraContentError":"","NSXMLParserInvalidCharacterInEntityError":"","NSXMLParserParsedEntityRefInInternalError":"","NSXMLParserEntityRefLoopError":"","NSXMLParserEntityBoundaryError":"","NSXMLParserInvalidURIError":"","NSXMLParserURIFragmentError":"","NSXMLParserNoDTDError":"","NSXMLParserDelegateAbortedParseError":""}};

ClassRef["SKAction"] = {"[:]":"NSObject","[.]":{"duration":{"abs":"The duration required to complete an action.","dec":"@property(nonatomic) NSTimeInterval duration"},"speed":{"abs":"A speed factor that modifies how fast an action runs.","dec":"@property(nonatomic) CGFloat speed"},"timingMode":{"abs":"The timing mode used to execute an action.","dec":"@property(nonatomic) SKActionTimingMode timingMode"}},"[+]":{"animateWithTextures:timePerFrame:":{"abs":"Creates an action that animates changes to a sprite’s texture.","dec":"+ (SKAction *)animateWithTextures:(NSArray *)textures timePerFrame:(NSTimeInterval)sec"},"animateWithTextures:timePerFrame:resize:restore:":{"abs":"Creates an action that animates changes to a sprite’s texture, possibly resizing the sprite.","dec":"+ (SKAction *)animateWithTextures:(NSArray *)textures timePerFrame:(NSTimeInterval)sec resize:(BOOL)resize restore:(BOOL)restore"},"colorizeWithColor:colorBlendFactor:duration:":{"abs":"Creates an animation that animates a sprite’s color and blend factor.","dec":"+ (SKAction *)colorizeWithColor:(SKColor *)color colorBlendFactor:(CGFloat)colorBlendFactor duration:(NSTimeInterval)sec"},"colorizeWithColorBlendFactor:duration:":{"abs":"Creates an animation that animates a sprite’s blend factor.","dec":"+ (SKAction *)colorizeWithColorBlendFactor:(CGFloat)colorBlendFactor duration:(NSTimeInterval)sec"},"customActionWithDuration:actionBlock:":{"abs":"Creates an action that executes a block over a duration.","dec":"+ (SKAction *)customActionWithDuration:(NSTimeInterval)seconds actionBlock:(void (^)(SKNode *node, CGFloat elapsedTime))block"},"fadeAlphaBy:duration:":{"abs":"Creates an action that adjusts the alpha value of a node by a relative value.","dec":"+ (SKAction *)fadeAlphaBy:(CGFloat)factor duration:(NSTimeInterval)sec"},"fadeAlphaTo:duration:":{"abs":"Creates an action that adjusts the alpha value of a node to a new value.","dec":"+ (SKAction *)fadeAlphaTo:(CGFloat)alpha duration:(NSTimeInterval)sec"},"fadeInWithDuration:":{"abs":"Creates an action that changes the alpha value of the node to 1.0.","dec":"+ (SKAction *)fadeInWithDuration:(NSTimeInterval)sec"},"fadeOutWithDuration:":{"abs":"Creates an action that changes the alpha value of the node to 0.0.","dec":"+ (SKAction *)fadeOutWithDuration:(NSTimeInterval)sec"},"followPath:asOffset:orientToPath:duration:":{"abs":"Creates an action that moves the node along a path.","dec":"+ (SKAction *)followPath:(CGPathRef)path asOffset:(BOOL)offset orientToPath:(BOOL)orient duration:(NSTimeInterval)sec"},"followPath:duration:":{"abs":"Creates an action that moves the node along a relative path, orienting the node to the path.","dec":"+ (SKAction *)followPath:(CGPathRef)path duration:(NSTimeInterval)sec"},"group:":{"abs":"Creates an action that runs a collection of actions in parallel.","dec":"+ (SKAction *)group:(NSArray *)actions"},"moveBy:duration:":{"abs":"Creates an action that moves a node relative to its current position.","dec":"+ (SKAction *)moveBY:(CGVector)delta duration:(NSTimeInterval)sec"},"moveByX:y:duration:":{"abs":"Creates an action that moves a node relative to its current position.","dec":"+ (SKAction *)moveByX:(CGFloat)deltaX y:(CGFloat)deltaY duration:(NSTimeInterval)sec"},"moveTo:duration:":{"abs":"Creates an action that moves a node to a new position.","dec":"+ (SKAction *)moveTo:(CGPoint)location duration:(NSTimeInterval)sec"},"moveToX:duration:":{"abs":"Creates an action that moves a node horizontally.","dec":"+ (SKAction *)moveToX:(CGFloat)x duration:(NSTimeInterval)sec"},"moveToY:duration:":{"abs":"Creates an action that moves a node vertically.","dec":"+ (SKAction *)moveToY:(CGFloat)y duration:(NSTimeInterval)sec"},"performSelector:onTarget:":{"abs":"Creates an action that calls a method on an object.","dec":"+ (SKAction *)performSelector:(SEL)selector onTarget:(id)target"},"playSoundFileNamed:waitForCompletion:":{"abs":"Creates an action that plays a sound.","dec":"+ (SKAction *)playSoundFileNamed:(NSString *)soundFile waitForCompletion:(BOOL)wait"},"removeFromParent":{"abs":"Creates an action that removes the node from its parent.","dec":"+ (SKAction *)removeFromParent"},"repeatAction:count:":{"abs":"Creates an action that repeats another action a specified number of times.","dec":"+ (SKAction *)repeatAction:(SKAction *)action count:(NSUInteger)count"},"repeatActionForever:":{"abs":"Creates an action that repeats another action forever.","dec":"+ (SKAction *)repeatActionForever:(SKAction *)action"},"resizeByWidth:height:duration:":{"abs":"Creates an action that adjusts the size of a sprite.","dec":"+ (SKAction *)resizeByWidth:(CGFloat)width height:(CGFloat)height duration:(NSTimeInterval)duration"},"resizeToHeight:duration:":{"abs":"Creates an action that changes the height of a sprite to a new absolute value.","dec":"+ (SKAction *)resizeToHeight:(CGFloat)height duration:(NSTimeInterval)duration"},"resizeToWidth:duration:":{"abs":"Creates an action that changes the width of a sprite to a new absolute value.","dec":"+ (SKAction *)resizeToWidth:(CGFloat)width duration:(NSTimeInterval)duration"},"resizeToWidth:height:duration:":{"abs":"Creates an action that changes the width and height of a sprite to a new absolute value.","dec":"+ (SKAction *)resizeToWidth:(CGFloat)width height:(CGFloat)height duration:(NSTimeInterval)duration"},"rotateByAngle:duration:":{"abs":"Creates an action that rotates the node by a relative value.","dec":"+ (SKAction *)rotateByAngle:(CGFloat)radians duration:(NSTimeInterval)sec"},"rotateToAngle:duration:":{"abs":"Creates an action that rotates the node counterclockwise to an absolute angle.","dec":"+ (SKAction *)rotateToAngle:(CGFloat)radians duration:(NSTimeInterval)sec"},"rotateToAngle:duration:shortestUnitArc:":{"abs":"Creates an action that rotates the node to an absolute value.","dec":"+ (SKAction *)rotateToAngle:(CGFloat)radians duration:(NSTimeInterval)sec shortestUnitArc:(BOOL)shortestUnitArc"},"runAction:onChildWithName:":{"abs":"Creates an action that runs an action on a named child object.","dec":"+ (SKAction *)runAction:(SKAction *)action onChildWithName:(NSString *)name"},"runBlock:":{"abs":"Creates an action that executes a block.","dec":"+ (SKAction *)runBlock:(dispatch_block_t)block"},"runBlock:queue:":{"abs":"Creates an action that executes a block on a specific dispatch queue.","dec":"+ (SKAction *)runBlock:(dispatch_block_t)block queue:(dispatch_queue_t)queue"},"scaleBy:duration:":{"abs":"Creates an action that changes the x and y scale values of a node by a relative value.","dec":"+ (SKAction *)scaleBy:(CGFloat)scale duration:(NSTimeInterval)sec"},"scaleTo:duration:":{"abs":"Creates an action that changes the x and y scale values of a node.","dec":"+ (SKAction *)scaleTo:(CGFloat)scale duration:(NSTimeInterval)sec"},"scaleXBy:y:duration:":{"abs":"Creates an action that adds relative values to the x and y scale values of a node.","dec":"+ (SKAction *)scaleXBy:(CGFloat)xScale y:(CGFloat)yScale duration:(NSTimeInterval)sec"},"scaleXTo:duration:":{"abs":"Creates an action that changes the x scale value of a node to a new value.","dec":"+ (SKAction *)scaleXTo:(CGFloat)scale duration:(NSTimeInterval)sec"},"scaleXTo:y:duration:":{"abs":"Creates an action that changes the x and y scale values of a node.","dec":"+ (SKAction *)scaleXTo:(CGFloat)xScale y:(CGFloat)yScale duration:(NSTimeInterval)sec"},"scaleYTo:duration:":{"abs":"Creates an action that changes the y scale value of a node to a new value.","dec":"+ (SKAction *)scaleYTo:(CGFloat)scale duration:(NSTimeInterval)sec"},"sequence:":{"abs":"Creates an action that runs a collection of actions sequentially.","dec":"+ (SKAction *)sequence:(NSArray *)actions"},"setTexture:":{"abs":"Creates an action that changes a sprite’s texture.","dec":"+ (SKAction *)setTexture:(SKTexture *)texture"},"setTexture:resize:":{"abs":"Creates an action that changes a sprite’s texture, possibly resizing the sprite.","dec":"+ (SKAction *)setTexture:(SKTexture *)texture resize:(BOOL)resize"},"speedBy:duration:":{"abs":"Creates an action that changes how fast the node executes actions by a relative value.","dec":"+ (SKAction *)speedBy:(CGFloat)speed duration:(NSTimeInterval)sec"},"speedTo:duration:":{"abs":"Creates an action that changes how fast the node executes actions.","dec":"+ (SKAction *)speedTo:(CGFloat)speed duration:(NSTimeInterval)sec"},"waitForDuration:":{"abs":"Creates an action that idles for a specified period of time.","dec":"+ (SKAction *)waitForDuration:(NSTimeInterval)sec"},"waitForDuration:withRange:":{"abs":"Creates an action that idles for a randomized period of time.","dec":"+ (SKAction *)waitForDuration:(NSTimeInterval)sec withRange:(NSTimeInterval)durationRange"}},"[-]":{"reversedAction":{"abs":"Creates an action that reverses the behavior of another action.","dec":"- (SKAction *)reversedAction"}},"[=]":{"SKActionTimingLinear":"","SKActionTimingEaseIn":"","SKActionTimingEaseOut":"","SKActionTimingEaseInEaseOut":""}};

ClassRef["SKCropNode"] = {"[:]":"SKNode : UIResponder : NSObject","[.]":{"maskNode":{"abs":"The node used to determine the crop node’s mask.","dec":"@property(retain, nonatomic) SKNode *maskNode"}}};

ClassRef["SKEffectNode"] = {"[:]":"SKNode : UIResponder : NSObject","[.]":{"blendMode":{"abs":"The blend mode used to draw the filtered image into the parent’s framebuffer.","dec":"@property(nonatomic) SKBlendMode blendMode"},"filter":{"abs":"The Core Image filter to apply.","dec":"@property(retain, nonatomic) CIFilter *filter"},"shouldCenterFilter":{"abs":"A Boolean value that determines whether the effect node automatically sets the filter’s image center.","dec":"@property(nonatomic) BOOL shouldCenterFilter"},"shouldEnableEffects":{"abs":"A Boolean value that determines whether the effect node applies the filter to its children as they are drawn.","dec":"@property(nonatomic) BOOL shouldEnableEffects"},"shouldRasterize":{"abs":"A Boolean value that indicates whether the results of rendering the child nodes should be cached.","dec":"@property(nonatomic) BOOL shouldRasterize"}}};

ClassRef["SKEmitterNode"] = {"[:]":"SKNode : UIResponder : NSObject","[.]":{"emissionAngle":{"abs":"The average initial direction of a particle, expressed as an angle in radians.","dec":"@property(nonatomic) CGFloat emissionAngle"},"emissionAngleRange":{"abs":"The range of allowed random values for a particle’s initial speed, expressed as an angle in radians.","dec":"@property(nonatomic) CGFloat emissionAngleRange"},"numParticlesToEmit":{"abs":"The number of particles the emitter should emit before stopping.","dec":"@property(nonatomic) NSUInteger numParticlesToEmit"},"particleAction":{"abs":"Specifies an action executed by new particles.","dec":"@property(copy, nonatomic) SKAction *particleAction"},"particleAlpha":{"abs":"The average starting alpha value for a particle.","dec":"@property(nonatomic) CGFloat particleAlpha"},"particleAlphaRange":{"abs":"The range of allowed random values for a particle’s starting alpha value.","dec":"@property(nonatomic) CGFloat particleAlphaRange"},"particleAlphaSequence":{"abs":"The sequence used to specify the alpha value of a particle over its lifetime.","dec":"@property(retain, nonatomic) SKKeyframeSequence *particleAlphaSequence"},"particleAlphaSpeed":{"abs":"The rate at which the alpha value of a particle changes per second.","dec":"@property(nonatomic) CGFloat particleAlphaSpeed"},"particleBirthRate":{"abs":"The rate at which new particles are created.","dec":"@property(nonatomic) CGFloat particleBirthRate"},"particleBlendMode":{"abs":"The blending mode used to blend particles into the framebuffer.","dec":"@property(nonatomic) SKBlendMode particleBlendMode"},"particleColor":{"abs":"The average initial color for a particle.","dec":"@property(retain, nonatomic) SKColor *particleColor"},"particleColorAlphaRange":{"abs":"The range of allowed random values for the alpha component of a particle’s initial color.","dec":"@property(nonatomic) CGFloat particleColorAlphaRange"},"particleColorAlphaSpeed":{"abs":"The rate at which the alpha component of a particle’s color changes per second.","dec":"@property(nonatomic) CGFloat particleColorAlphaSpeed"},"particleColorBlendFactor":{"abs":"The average starting value for the color blend factor.","dec":"@property(nonatomic) CGFloat particleColorBlendFactor"},"particleColorBlendFactorRange":{"abs":"The range of allowed random values for a particle’s starting color blend factor.","dec":"@property(nonatomic) CGFloat particleColorBlendFactorRange"},"particleColorBlendFactorSequence":{"abs":"The sequence used to specify the color blend factor of a particle over its lifetime.","dec":"@property(retain, nonatomic) SKKeyframeSequence *particleColorBlendFactorSequence"},"particleColorBlendFactorSpeed":{"abs":"The rate at which the color blend factor changes per second.","dec":"@property(nonatomic) CGFloat particleColorBlendFactorSpeed"},"particleColorBlueRange":{"abs":"The range of allowed random values for the blue component of a particle’s initial color.","dec":"@property(nonatomic) CGFloat particleColorBlueRange"},"particleColorBlueSpeed":{"abs":"The rate at which the blue component of a particle’s color changes per second.","dec":"@property(nonatomic) CGFloat particleColorBlueSpeed"},"particleColorGreenRange":{"abs":"The range of allowed random values for the green component of a particle’s initial color.","dec":"@property(nonatomic) CGFloat particleColorGreenRange"},"particleColorGreenSpeed":{"abs":"The rate at which the green component of a particle’s color changes per second.","dec":"@property(nonatomic) CGFloat particleColorGreenSpeed"},"particleColorRedRange":{"abs":"The range of allowed random values for the red component of a particle’s initial color.","dec":"@property(nonatomic) CGFloat particleColorRedRange"},"particleColorRedSpeed":{"abs":"The rate at which the red component of a particle’s color changes per second.","dec":"@property(nonatomic) CGFloat particleColorRedSpeed"},"particleColorSequence":{"abs":"The sequence used to specify the color components of a particle over its lifetime.","dec":"@property(retain, nonatomic) SKKeyframeSequence *particleColorSequence"},"particleLifetime":{"abs":"The average lifetime of a particle, in seconds.","dec":"@property(nonatomic) CGFloat particleLifetime"},"particleLifetimeRange":{"abs":"The range of allowed random values for a particle’s lifetime.","dec":"@property(nonatomic) CGFloat particleLifetimeRange"},"particlePosition":{"abs":"The average starting position for a particle.","dec":"@property(nonatomic) CGPoint particlePosition"},"particlePositionRange":{"abs":"The range of allowed random values for a particle’s position.","dec":"@property(nonatomic) CGVector particlePositionRange"},"particleRotation":{"abs":"The average initial rotation of a particle, expressed as an angle in radians.","dec":"@property(nonatomic) CGFloat particleRotation"},"particleRotationRange":{"abs":"The range of allowed random values for a particle’s initial rotation, expressed as an angle in radians.","dec":"@property(nonatomic) CGFloat particleRotationRange"},"particleRotationSpeed":{"abs":"The speed at which a particle rotates, expressed in radians per second.","dec":"@property(nonatomic) CGFloat particleRotationSpeed"},"particleScale":{"abs":"The average initial scale factor of a particle.","dec":"@property(nonatomic) CGFloat particleScale"},"particleScaleRange":{"abs":"The range of allowed random values for a particle’s initial scale.","dec":"@property(nonatomic) CGFloat particleScaleRange"},"particleScaleSequence":{"abs":"The sequence used to specify the scale factor of a particle over its lifetime.","dec":"@property(retain, nonatomic) SKKeyframeSequence *particleScaleSequence"},"particleScaleSpeed":{"abs":"The rate at which a particle’s scale factor changes per second.","dec":"@property(nonatomic) CGFloat particleScaleSpeed"},"particleSize":{"abs":"The starting size of each particle.","dec":"@property(nonatomic) CGSize particleSize"},"particleSpeed":{"abs":"The average initial speed of a new particle in points per second.","dec":"@property(nonatomic) CGFloat particleSpeed"},"particleSpeedRange":{"abs":"The range of allowed random values for a particle’s initial speed.","dec":"@property(nonatomic) CGFloat particleSpeedRange"},"particleTexture":{"abs":"The texture to use to render a particle.","dec":"@property(retain, nonatomic) SKTexture *particleTexture"},"particleZPosition":{"abs":"The average starting depth of a particle.","dec":"@property(nonatomic) CGFloat particleZPosition"},"particleZPositionRange":{"abs":"The range of allowed random values for a particle’s depth.","dec":"@property(nonatomic) CGFloat particleZPositionRange"},"targetNode":{"abs":"The target node which renders the emitter’s particles.","dec":"@property(weak, nonatomic) SKNode *targetNode"},"xAcceleration":{"abs":"The acceleration to apply to a particle’s horizontal velocity.","dec":"@property(nonatomic) CGFloat xAcceleration"},"yAcceleration":{"abs":"The acceleration to apply to a particle’s vertical velocity.","dec":"@property(nonatomic) CGFloat yAcceleration"}},"[-]":{"advanceSimulationTime:":{"abs":"Advances the emitter particle simulation.","dec":"- (void)advanceSimulationTime:(NSTimeInterval)sec"},"resetSimulation":{"abs":"Removes all existing particles and restarts the simulation.","dec":"- (void)resetSimulation"}}};

ClassRef["SKKeyframeSequence"] = {"[:]":"NSObject","[.]":{"interpolationMode":{"abs":"The mode used to determine how values for times between the keyframes are calculated.","dec":"@property(nonatomic) SKInterpolationMode interpolationMode"},"repeatMode":{"abs":"The mode used to determine how the keyframe sequence repeats.","dec":"@property(nonatomic) SKRepeatMode repeatMode"}},"[-]":{"addKeyframeValue:time:":{"abs":"Adds a keyframe to the sequence.","dec":"- (void)addKeyframeValue:(id)value time:(CGFloat)time"},"count":{"abs":"The number of keyframes in the sequence.","dec":"- (NSUInteger)count"},"getKeyframeTimeForIndex:":{"abs":"Gets the time for a keyframe in the sequence.","dec":"- (CGFloat)getKeyframeTimeForIndex:(NSUInteger)index"},"getKeyframeValueForIndex:":{"abs":"Gets the value for a keyframe in the sequence.","dec":"- (id)getKeyframeValueForIndex:(NSUInteger)index"},"initWithCapacity:":{"abs":"Initializes a new keyframe sequence.","dec":"- (instancetype)initWithCapacity:(NSUInteger)numItems"},"initWithKeyframeValues:times:":{"abs":"Initializes a keyframe sequence with an initial set of values and times.","dec":"- (instancetype)initWithKeyframeValues:(NSArray *)values times:(NSArray *)times"},"removeKeyframeAtIndex:":{"abs":"Removes a keyframe from the sequence.","dec":"- (void)removeKeyframeAtIndex:(NSUInteger)index"},"removeLastKeyframe":{"abs":"Removes the last value in the sequence.","dec":"- (void)removeLastKeyframe"},"sampleAtTime:":{"abs":"Calculates the sample at a particular time.","dec":"- (id)sampleAtTime:(CGFloat)time"},"setKeyframeTime:forIndex:":{"abs":"Changes the time for a specific keyframe.","dec":"- (void)setKeyframeTime:(CGFloat)time forIndex:(NSUInteger)index"},"setKeyframeValue:forIndex:":{"abs":"Changes the value for a specific keyframe.","dec":"- (void)setKeyframeValue:(id)value forIndex:(NSUInteger)index"},"setKeyframeValue:time:forIndex:":{"abs":"Replaces a keyframe in the sequence with a new keyframe.","dec":"- (void)setKeyframeValue:(id)value time:(CGFloat)time forIndex:(NSUInteger)index"}},"[=]":{"SKInterpolationModeLinear":"","SKInterpolationModeSpline":"","SKInterpolationModeStep":"","SKRepeatModeClamp":"","SKRepeatModeLoop":""}};

ClassRef["SKLabelNode"] = {"[:]":"SKNode : UIResponder : NSObject","[.]":{"blendMode":{"abs":"The blend mode used to draw the label into the parent’s framebuffer.","dec":"@property(nonatomic) SKBlendMode blendMode"},"color":{"abs":"The label’s blend color.","dec":"@property(retain, nonatomic) SKColor *color"},"colorBlendFactor":{"abs":"A floating-point value that describes how the color is blended with the font color.","dec":"@property(nonatomic) CGFloat colorBlendFactor"},"fontColor":{"abs":"The color of the label.","dec":"@property(retain, nonatomic) SKColor *fontColor"},"fontName":{"abs":"The font used for the text in the label.","dec":"@property(copy, nonatomic) NSString *fontName"},"fontSize":{"abs":"The size of the font used in the label.","dec":"@property(nonatomic) CGFloat fontSize"},"horizontalAlignmentMode":{"abs":"The horizontal position of the text relative to the node’s position.","dec":"@property(nonatomic) SKLabelHorizontalAlignmentMode horizontalAlignmentMode"},"text":{"abs":"The string that the label node displays.","dec":"@property(copy, nonatomic) NSString *text"},"verticalAlignmentMode":{"abs":"The vertical position of the text relative to the node’s position.","dec":"@property(nonatomic) SKLabelVerticalAlignmentMode verticalAlignmentMode"}},"[+]":{"labelNodeWithFontNamed:":{"abs":"Creates a new label object.","dec":"+ (instancetype)labelNodeWithFontNamed:(NSString *)fontName"}},"[-]":{"initWithFontNamed:":{"abs":"Initializes a new label object.","dec":"- (instancetype)initWithFontNamed:(NSString *)fontName"}},"[=]":{"SKLabelVerticalAlignmentModeBaseline":"","SKLabelVerticalAlignmentModeCenter":"","SKLabelVerticalAlignmentModeTop":"","SKLabelVerticalAlignmentModeBottom":"","SKLabelHorizontalAlignmentModeCenter":"","SKLabelHorizontalAlignmentModeLeft":"","SKLabelHorizontalAlignmentModeRight":""}};

ClassRef["SKNode"] = {"[:]":"UIResponder : NSObject","[.]":{"alpha":{"abs":"The transparency value applied to the node’s contents.","dec":"@property(nonatomic) CGFloat alpha"},"children":{"abs":"The node’s children. (read-only)","dec":"@property(readonly, nonatomic) NSArray *children"},"frame":{"abs":"A rectangle in the parent’s coordinate system that contains the node’s content, ignoring the node’s children. (read-only)","dec":"@property(readonly, nonatomic) CGRect frame"},"hidden":{"abs":"A Boolean value that determines whether a node and its descendants are rendered.","dec":"@property(getter=isHidden, nonatomic) BOOL hidden"},"name":{"abs":"The node’s assignable name.","dec":"@property(copy, nonatomic) NSString *name"},"parent":{"abs":"The node’s parent node. (read-only)","dec":"@property(readonly, nonatomic) SKNode *parent"},"paused":{"abs":"A Boolean value that determines whether actions on the node and its descendants are processed.","dec":"@property(getter=isPaused, nonatomic) BOOL paused"},"physicsBody":{"abs":"The physics body associated with the node.","dec":"@property(retain, nonatomic) SKPhysicsBody *physicsBody"},"position":{"abs":"The position of the node in its parent's coordinate system.","dec":"@property(nonatomic) CGPoint position"},"scene":{"abs":"The scene node that contains the node. (read-only)","dec":"@property(readonly, nonatomic) SKScene *scene"},"speed":{"abs":"A speed modifier applied to all actions executed by a node and its descendants.","dec":"@property(nonatomic) CGFloat speed"},"userData":{"abs":"A dictionary containing arbitrary data.","dec":"@property(retain, nonatomic) NSMutableDictionary *userData"},"userInteractionEnabled":{"abs":"A Boolean value that indicates whether the node receives touch events.","dec":"@property(getter=isUserInteractionEnabled) BOOL userInteractionEnabled"},"xScale":{"abs":"A scaling factor that multiplies the width of a node and its children.","dec":"@property(nonatomic) CGFloat xScale"},"yScale":{"abs":"A scaling factor that multiplies the height of a node and its children.","dec":"@property(nonatomic) CGFloat yScale"},"zPosition":{"abs":"The height of the node relative to its parent.","dec":"@property(nonatomic) CGFloat zPosition"},"zRotation":{"abs":"The Euler rotation about the z axis (in radians).","dec":"@property(nonatomic) CGFloat zRotation"}},"[+]":{"node":{"abs":"Creates a new node.","dec":"+ (instancetype)node"}},"[-]":{"actionForKey:":{"abs":"Returns an action associated with a specific key.","dec":"- (SKAction *)actionForKey:(NSString *)key"},"addChild:":{"abs":"Adds a node to the end of the receiver’s list of child nodes.","dec":"- (void)addChild:(SKNode *)node"},"calculateAccumulatedFrame":{"abs":"Calculates a rectangle in the parent’s coordinate system that contains the content of the node and all of its descendants.","dec":"- (CGRect)calculateAccumulatedFrame"},"childNodeWithName:":{"abs":"Searches the children of the receiving node for a node with a specific name.","dec":"- (SKNode *)childNodeWithName:(NSString *)name"},"containsPoint:":{"abs":"Returns a Boolean value that indicates whether a point lies inside the node’s bounding box.","dec":"- (BOOL)containsPoint:(CGPoint)p"},"convertPoint:fromNode:":{"abs":"Converts a point from the coordinate system of another node in the node tree to the coordinate system of this node.","dec":"- (CGPoint)convertPoint:(CGPoint)point fromNode:(SKNode *)node"},"convertPoint:toNode:":{"abs":"Converts a point in this node’s coordinate system to the coordinate system of another node in the node tree.","dec":"- (CGPoint)convertPoint:(CGPoint)point toNode:(SKNode *)node"},"enumerateChildNodesWithName:usingBlock:":{"abs":"Search the children of the receiving node to perform processing for nodes which share a name.","dec":"- (void)enumerateChildNodesWithName:(NSString *)name usingBlock:(void (^)(SKNode *node, BOOL *stop))block"},"hasActions":{"abs":"Returns a Boolean value that indicates whether the node is executing actions.","dec":"- (BOOL)hasActions"},"inParentHierarchy:":{"abs":"Returns a Boolean value that indicates whether the node is a descendant of the target node.","dec":"- (BOOL)inParentHierarchy:(SKNode *)parent"},"insertChild:atIndex:":{"abs":"Inserts a child into a specific position in the receiver’s list of child nodes.","dec":"- (void)insertChild:(SKNode *)node atIndex:(NSInteger)index"},"intersectsNode:":{"abs":"Returns a Boolean value that indicates whether this node intersects the specified node.","dec":"- (BOOL)intersectsNode:(SKNode *)node"},"nodeAtPoint:":{"abs":"Returns the deepest descendant that intersects a point.","dec":"- (SKNode *)nodeAtPoint:(CGPoint)p"},"nodesAtPoint:":{"abs":"Returns an array of all descendants that intersect a point.","dec":"- (NSArray *)nodesAtPoint:(CGPoint)p"},"removeActionForKey:":{"abs":"Removes an action associated with a specific key.","dec":"- (void)removeActionForKey:(NSString *)key"},"removeAllActions":{"abs":"Ends and removes all actions from the node.","dec":"- (void)removeAllActions"},"removeAllChildren":{"abs":"Removes all of the node’s children.","dec":"- (void)removeAllChildren"},"removeChildrenInArray:":{"abs":"Removes a list of children from the receiving node.","dec":"- (void)removeChildrenInArray:(NSArray *)nodes"},"removeFromParent":{"abs":"Removes the receiving node from its parent.","dec":"- (void)removeFromParent"},"runAction:":{"abs":"Adds an action to the list of actions executed by the node.","dec":"- (void)runAction:(SKAction *)action"},"runAction:completion:":{"abs":"Adds an action to the list of actions executed by the node. Your block is called when the action completes.","dec":"- (void)runAction:(SKAction *)action completion:(void (^)(void))block"},"runAction:withKey:":{"abs":"Adds an identifiable action to the list of actions executed by the node.","dec":"- (void)runAction:(SKAction *)action withKey:(NSString *)key"},"setScale:":{"abs":"Sets the xScale and yScale properties of the node.","dec":"- (void)setScale:(CGFloat)scale"}},"[=]":{"SKBlendModeAlpha":"","SKBlendModeAdd":"","SKBlendModeSubtract":"","SKBlendModeMultiply":"","SKBlendModeMultiplyX2":"","SKBlendModeScreen":"","SKBlendModeReplace":""}};

ClassRef["SKPhysicsBody"] = {"[:]":"NSObject","[.]":{"affectedByGravity":{"abs":"A Boolean value that indicates whether this physics body is affected by the physics world’s gravitational force.","dec":"@property(assign, nonatomic) BOOL affectedByGravity"},"allowsRotation":{"abs":"A Boolean value that indicates whether the physics body is affected by angular forces and impulses applied to it.","dec":"@property(nonatomic) BOOL allowsRotation"},"angularDamping":{"abs":"A property that reduces the body’s rotational velocity.","dec":"@property(assign, nonatomic) CGFloat angularDamping"},"angularVelocity":{"abs":"The physics body’s angular speed.","dec":"@property(nonatomic) CGFloat angularVelocity"},"area":{"abs":"The area covered by the body. (read-only)","dec":"@property(readonly, nonatomic) CGFloat area"},"categoryBitMask":{"abs":"A mask that defines which categories this physics body belongs to.","dec":"@property(assign, nonatomic) uint32_t categoryBitMask"},"collisionBitMask":{"abs":"A mask that defines which categories of physics bodies can collide with this physics body.","dec":"@property(assign, nonatomic) uint32_t collisionBitMask"},"contactTestBitMask":{"abs":"A mask that defines which categories of bodies cause intersection notifications with this physics body.","dec":"@property(assign, nonatomic) uint32_t contactTestBitMask"},"density":{"abs":"The density of the object in kilograms per square meter.","dec":"@property(nonatomic) CGFloat density"},"dynamic":{"abs":"A Boolean value that indicates whether the physics body is moved by the physics simulation.","dec":"@property(getter=isDynamic, nonatomic) BOOL dynamic"},"friction":{"abs":"The roughness of the surface of the physics body.","dec":"@property(nonatomic) CGFloat friction"},"joints":{"abs":"The joints connected to this physics body. (read-only)","dec":"@property(readonly, nonatomic) NSArray *joints"},"linearDamping":{"abs":"A property that reduces the body’s linear velocity.","dec":"@property(assign, nonatomic) CGFloat linearDamping"},"mass":{"abs":"The mass of the body in kilograms.","dec":"@property(nonatomic) CGFloat mass"},"node":{"abs":"The node that this body is connected to. (read-only)","dec":"@property(readonly, weak, nonatomic) SKNode *node"},"resting":{"abs":"A Boolean property that indicates whether the object is at rest within the physics simulation.","dec":"@property(getter=isResting, nonatomic) BOOL resting"},"restitution":{"abs":"The bounciness of the physics body.","dec":"@property(nonatomic) CGFloat restitution"},"usesPreciseCollisionDetection":{"abs":"A Boolean value that determines whether the physics world uses a more precise collision detection algorithm.","dec":"@property(nonatomic) BOOL usesPreciseCollisionDetection"},"velocity":{"abs":"The physics body’s velocity vector, measured in meters per second.","dec":"@property(nonatomic) CGVector velocity"}},"[+]":{"bodyWithBodies:":{"abs":"Creates a physics body by performing a union of a group of volume-based physics bodies.","dec":"+ (SKPhysicsBody *)bodyWithBodies:(NSArray *)bodies"},"bodyWithCircleOfRadius:":{"abs":"Creates a circular physics body centered on the owning node’s origin.","dec":"+ (SKPhysicsBody *)bodyWithCircleOfRadius:(CGFloat)r"},"bodyWithCircleOfRadius:center:":{"abs":"Creates a circular physics body centered on an arbitrary point.","dec":"+ (SKPhysicsBody *)bodyWithCircleOfRadius:(CGFloat)r center:(CGPoint)center"},"bodyWithEdgeChainFromPath:":{"abs":"Creates an edge chain from a path.","dec":"+ (SKPhysicsBody *)bodyWithEdgeChainFromPath:(CGPathRef)path"},"bodyWithEdgeFromPoint:toPoint:":{"abs":"Creates an edge between two points.","dec":"+ (SKPhysicsBody *)bodyWithEdgeFromPoint:(CGPoint)p1 toPoint:(CGPoint)p2"},"bodyWithEdgeLoopFromPath:":{"abs":"Creates an edge loop from a path.","dec":"+ (SKPhysicsBody *)bodyWithEdgeLoopFromPath:(CGPathRef)path"},"bodyWithEdgeLoopFromRect:":{"abs":"Creates an edge loop from a rectangle.","dec":"+ (SKPhysicsBody *)bodyWithEdgeLoopFromRect:(CGRect)rect"},"bodyWithPolygonFromPath:":{"abs":"Creates a polygon-shaped physics body.","dec":"+ (SKPhysicsBody *)bodyWithPolygonFromPath:(CGPathRef)path"},"bodyWithRectangleOfSize:":{"abs":"Creates a rectangular physics body centered on the owning node’s origin.","dec":"+ (SKPhysicsBody *)bodyWithRectangleOfSize:(CGSize)s"},"bodyWithRectangleOfSize:center:":{"abs":"Creates a rectangular physics body centered on an arbitrary point.","dec":"+ (SKPhysicsBody *)bodyWithRectangleOfSize:(CGSize)s center:(CGPoint)center"}},"[-]":{"allContactedBodies":{"abs":"The physics bodies that this physics body is in contact with.","dec":"- (NSArray *)allContactedBodies"},"applyAngularImpulse:":{"abs":"Applies an impulse that imparts angular momentum to an object.","dec":"- (void)applyAngularImpulse:(CGFloat)impulse"},"applyForce:":{"abs":"Applies a force to the center of gravity of a physics body.","dec":"- (void)applyForce:(CGVector)force"},"applyForce:atPoint:":{"abs":"Applies a force to a specific point of a physics body.","dec":"- (void)applyForce:(CGVector)force atPoint:(CGPoint)point"},"applyImpulse:":{"abs":"Applies an impulse to the center of gravity of a physics body.","dec":"- (void)applyImpulse:(CGVector)impulse"},"applyImpulse:atPoint:":{"abs":"Applies an impulse to a specific point of a physics body.","dec":"- (void)applyImpulse:(CGVector)impulse atPoint:(CGPoint)point"},"applyTorque:":{"abs":"Applies a torque to an object.","dec":"- (void)applyTorque:(CGFloat)torque"}}};

ClassRef["SKPhysicsContact"] = {"[:]":"NSObject","[.]":{"bodyA":{"abs":"The first body in the contact. (read-only)","dec":"@property(readonly, nonatomic) SKPhysicsBody *bodyA"},"bodyB":{"abs":"The second body in the contact. (read-only)","dec":"@property(readonly, nonatomic) SKPhysicsBody *bodyB"},"collisionImpulse":{"abs":"The impulse that specifies how hard these two bodies struck each other in newton-seconds. (read-only)","dec":"@property(readonly, nonatomic) CGFloat collisionImpulse"},"contactPoint":{"abs":"The contact point between the two physics bodies, in scene coordinates. (read-only)","dec":"@property(readonly, nonatomic) CGPoint contactPoint"}}};

ClassRef["SKPhysicsJoint"] = {"[:]":"NSObject","[.]":{"bodyA":{"abs":"The first body connected by the joint.","dec":"@property(retain, nonatomic) SKPhysicsBody *bodyA"},"bodyB":{"abs":"The second body connected by the joint.","dec":"@property(retain, nonatomic) SKPhysicsBody *bodyB"}}};

ClassRef["SKPhysicsJointFixed"] = {"[:]":"SKPhysicsJoint : NSObject","[+]":{"jointWithBodyA:bodyB:anchor:":{"abs":"Creates a new physics joint.","dec":"+ (SKPhysicsJointFixed *)jointWithBodyA:(SKPhysicsBody *)bodyA bodyB:(SKPhysicsBody *)bodyB anchor:(CGPoint)anchor"}}};

ClassRef["SKPhysicsJointLimit"] = {"[:]":"SKPhysicsJoint : NSObject","[.]":{"maxLength":{"abs":"The maximum distance allowed between the two physics bodies connected by the limit joint.","dec":"@property(nonatomic) CGFloat maxLength"}},"[+]":{"jointWithBodyA:bodyB:anchorA:anchorB:":{"abs":"Creates a new limit joint.","dec":"+ (SKPhysicsJointLimit *)jointWithBodyA:(SKPhysicsBody *)bodyA bodyB:(SKPhysicsBody *)bodyB anchorA:(CGPoint)anchorA anchorB:(CGPoint)anchorB"}}};

ClassRef["SKPhysicsJointPin"] = {"[:]":"SKPhysicsJoint : NSObject","[.]":{"frictionTorque":{"abs":"The resistance applied by the pin joint to spinning around the anchor point.","dec":"@property(nonatomic) CGFloat frictionTorque"},"lowerAngleLimit":{"abs":"The smallest angle allowed for the pin joint.","dec":"@property(nonatomic) CGFloat lowerAngleLimit"},"shouldEnableLimits":{"abs":"A Boolean value that indicates whether the pin joint’s rotation is limited to a specific range of values.","dec":"@property(nonatomic) BOOL shouldEnableLimits"},"upperAngleLimit":{"abs":"The largest angle allowed for the pin joint.","dec":"@property(nonatomic) CGFloat upperAngleLimit"}},"[+]":{"jointWithBodyA:bodyB:anchor:":{"abs":"Creates a new pin joint.","dec":"+ (SKPhysicsJointPin *)jointWithBodyA:(SKPhysicsBody *)bodyA bodyB:(SKPhysicsBody *)bodyB anchor:(CGPoint)anchor"}}};

ClassRef["SKPhysicsJointSliding"] = {"[:]":"SKPhysicsJoint : NSObject","[.]":{"lowerDistanceLimit":{"abs":"The smallest distance allowed for the sliding joint.","dec":"@property(nonatomic) CGFloat lowerDistanceLimit"},"shouldEnableLimits":{"abs":"A Boolean value that indicates whether the sliding joint is restricted so that the objects may only slide a finite distance from the initial anchor point.","dec":"@property(nonatomic) BOOL shouldEnableLimits"},"upperDistanceLimit":{"abs":"The largest distance allowed for the sliding joint.","dec":"@property(nonatomic) CGFloat upperDistanceLimit"}},"[+]":{"jointWithBodyA:bodyB:anchor:axis:":{"abs":"Creates a new sliding joint.","dec":"+ (SKPhysicsJointSliding *)jointWithBodyA:(SKPhysicsBody *)bodyA bodyB:(SKPhysicsBody *)bodyB anchor:(CGPoint)anchor axis:(CGVector)axis"}}};

ClassRef["SKPhysicsJointSpring"] = {"[:]":"SKPhysicsJoint : NSObject","[.]":{"damping":{"abs":"A constant that defines how the spring’s motion should be damped due to the forces of friction.","dec":"@property(nonatomic) CGFloat damping"},"frequency":{"abs":"A constant that defines the frequency characteristics of the spring.","dec":"@property(nonatomic) CGFloat frequency"}},"[+]":{"jointWithBodyA:bodyB:anchorA:anchorB:":{"abs":"Creates a new spring joint.","dec":"+ (SKPhysicsJointSpring *)jointWithBodyA:(SKPhysicsBody *)bodyA bodyB:(SKPhysicsBody *)bodyB anchorA:(CGPoint)anchorA anchorB:(CGPoint)anchorB"}}};

ClassRef["SKPhysicsWorld"] = {"[:]":"NSObject","[.]":{"contactDelegate":{"abs":"A delegate that is called when two physics bodies come in contact with each other.","dec":"@property(assign, nonatomic) id<SKPhysicsContactDelegate> contactDelegate"},"gravity":{"abs":"A vector that specifies the gravitational acceleration applied to physics bodies in the physics world.","dec":"@property(nonatomic) CGVector gravity"},"speed":{"abs":"The rate at which the simulation executes.","dec":"@property(nonatomic) CGFloat speed"}},"[-]":{"addJoint:":{"abs":"Adds a joint to the physics world.","dec":"- (void)addJoint:(SKPhysicsJoint *)joint"},"bodyAlongRayStart:end:":{"abs":"Searches for the first physics body that intersects a ray.","dec":"- (SKPhysicsBody *)bodyAlongRayStart:(CGPoint)start end:(CGPoint)end"},"bodyAtPoint:":{"abs":"Searches for the first physics body that contains a point.","dec":"- (SKPhysicsBody *)bodyAtPoint:(CGPoint)point"},"bodyInRect:":{"abs":"Searches for the first physics body that intersect the specified rectangle.","dec":"- (SKPhysicsBody *)bodyInRect:(CGRect)rect"},"enumerateBodiesAlongRayStart:end:usingBlock:":{"abs":"Enumerates all the physics bodies in the scene that intersect a ray.","dec":"- (void)enumerateBodiesAlongRayStart:(CGPoint)start end:(CGPoint)end usingBlock:(void (^)(SKPhysicsBody *body, CGPoint point, CGVector normal, BOOL *stop))block"},"enumerateBodiesAtPoint:usingBlock:":{"abs":"Enumerates all the physics bodies in the scene that contain a point.","dec":"- (void)enumerateBodiesAtPoint:(CGPoint)point usingBlock:(void (^)(SKPhysicsBody *body, BOOL *stop))block"},"enumerateBodiesInRect:usingBlock:":{"abs":"Enumerates all the physics bodies in the scene that intersect the specified rectangle.","dec":"- (void)enumerateBodiesInRect:(CGRect)rect usingBlock:(void (^)(SKPhysicsBody *body, BOOL *stop))block"},"removeAllJoints":{"abs":"Removes all joints from the physics world.","dec":"- (void)removeAllJoints"},"removeJoint:":{"abs":"Removes a specific joint from the physics world.","dec":"- (void)removeJoint:(SKPhysicsJoint *)joint"}}};

ClassRef["SKScene"] = {"[:]":"SKEffectNode : SKNode : UIResponder : NSObject","[.]":{"anchorPoint":{"abs":"The point in the view’s frame that corresponds to the scene’s origin.","dec":"@property(nonatomic) CGPoint anchorPoint"},"backgroundColor":{"abs":"The background color of the scene.","dec":"@property(retain, nonatomic) SKColor *backgroundColor"},"physicsWorld":{"abs":"The physics simulation associated with the scene. (read-only)","dec":"@property(readonly, nonatomic) SKPhysicsWorld *physicsWorld"},"scaleMode":{"abs":"Defines how the scene is mapped to the view that presents it.","dec":"@property(nonatomic) SKSceneScaleMode scaleMode"},"size":{"abs":"The dimensions of the scene in points.","dec":"@property(nonatomic) CGSize size"},"view":{"abs":"The view that is currently presenting the scene. (read-only)","dec":"@property(weak, readonly, nonatomic) SKView *view"}},"[+]":{"sceneWithSize:":{"abs":"Creates and returns a new scene object.","dec":"+ (instancetype)sceneWithSize:(CGSize)size"}},"[-]":{"convertPointFromView:":{"abs":"Converts a point from view coordinates to scene coordinates.","dec":"- (CGPoint)convertPointFromView:(CGPoint)point"},"convertPointToView:":{"abs":"Converts a point from scene coordinates to view coordinates.","dec":"- (CGPoint)convertPointToView:(CGPoint)point"},"didChangeSize:":{"abs":"Called whenever the scene’s size changes.","dec":"- (void)didChangeSize:(CGSize)oldSize"},"didEvaluateActions":{"abs":"Performs any scene-specific updates that need to occur after scene actions are evaluated.","dec":"- (void)didEvaluateActions"},"didMoveToView:":{"abs":"Called immediately after a scene is presented by a view.","dec":"- (void)didMoveToView:(SKView *)view"},"didSimulatePhysics":{"abs":"Performs any scene-specific updates that need to occur after physics simulations are performed.","dec":"- (void)didSimulatePhysics"},"initWithSize:":{"abs":"Initializes a new scene object.","dec":"- (instancetype)initWithSize:(CGSize)size"},"update:":{"abs":"Performs any scene-specific updates that need to occur before scene actions are evaluated.","dec":"- (void)update:(NSTimeInterval)currentTime"},"willMoveFromView:":{"abs":"Called immediately before a scene is removed from a view.","dec":"- (void)willMoveFromView:(SKView *)view"}},"[=]":{"SKSceneScaleModeFill":"","SKSceneScaleModeAspectFill":"","SKSceneScaleModeAspectFit":"","SKSceneScaleModeResizeFill":""}};

ClassRef["SKShapeNode"] = {"[:]":"SKNode : UIResponder : NSObject","[.]":{"antialiased":{"abs":"A Boolean value that determines whether the stroked path is smoothed when drawn.","dec":"@property(getter=isAntialiased, nonatomic) BOOL antialiased"},"blendMode":{"abs":"The blend mode used to draw the shape into the parent’s framebuffer.","dec":"@property(nonatomic) SKBlendMode blendMode"},"fillColor":{"abs":"The color used to fill the shape.","dec":"@property(retain, nonatomic) SKColor *fillColor"},"glowWidth":{"abs":"The glow that extends outward from the stroked line.","dec":"@property(nonatomic) CGFloat glowWidth"},"lineWidth":{"abs":"The width used to stroke the path.","dec":"@property(nonatomic) CGFloat lineWidth"},"path":{"abs":"The path that defines the shape.","dec":"@property(nonatomic) CGPathRef path"},"strokeColor":{"abs":"The color used to stroke the shape.","dec":"@property(retain, nonatomic) SKColor *strokeColor"}}};

ClassRef["SKSpriteNode"] = {"[:]":"SKNode : UIResponder : NSObject","[.]":{"anchorPoint":{"abs":"Defines the point in the sprite that corresponds to the node’s position.","dec":"@property(nonatomic) CGPoint anchorPoint"},"blendMode":{"abs":"The blend mode used to draw the sprite into the parent’s framebuffer.","dec":"@property(nonatomic) SKBlendMode blendMode"},"centerRect":{"abs":"A property that defines how the texture is applied to the sprite.","dec":"@property(nonatomic) CGRect centerRect"},"color":{"abs":"The sprite’s color.","dec":"@property(retain, nonatomic) SKColor *color"},"colorBlendFactor":{"abs":"A floating-point value that describes how the color is blended with the sprite’s texture.","dec":"@property(nonatomic) CGFloat colorBlendFactor"},"size":{"abs":"The dimensions of the sprite, in points.","dec":"@property(nonatomic) CGSize size"},"texture":{"abs":"The texture used to draw the sprite.","dec":"@property(retain, nonatomic) SKTexture *texture"}},"[+]":{"spriteNodeWithColor:size:":{"abs":"Creates and returns a colored sprite.","dec":"+ (instancetype)spriteNodeWithColor:(SKColor *)color size:(CGSize)size"},"spriteNodeWithImageNamed:":{"abs":"Creates and returns a textured sprite using an image file.","dec":"+ (instancetype)spriteNodeWithImageNamed:(NSString *)name"},"spriteNodeWithTexture:":{"abs":"Creates and returns a textured sprite using an existing texture object.","dec":"+ (instancetype)spriteNodeWithTexture:(SKTexture *)texture"},"spriteNodeWithTexture:size:":{"abs":"Initializes a textured sprite using an existing texture object but with a specified size.","dec":"+ (instancetype)spriteNodeWithTexture:(SKTexture *)texture size:(CGSize)size"}},"[-]":{"initWithColor:size:":{"abs":"Initializes a colored sprite.","dec":"- (instancetype)initWithColor:(SKColor *)color size:(CGSize)size"},"initWithImageNamed:":{"abs":"Initializes a textured sprite using an image file.","dec":"- (instancetype)initWithImageNamed:(NSString *)name"},"initWithTexture:":{"abs":"Initializes a textured sprite using an existing texture object.","dec":"- (instancetype)initWithTexture:(SKTexture *)texture"},"initWithTexture:color:size:":{"abs":"Initializes a colored and textured sprite using an existing texture object.","dec":"- (instancetype)initWithTexture:(SKTexture *)texture color:(SKColor *)color size:(CGSize)size"}}};

ClassRef["SKTexture"] = {"[:]":"NSObject","[.]":{"filteringMode":{"abs":"The filtering mode used when the size of a sprite drawn with the texture is not drawn at the texture’s native size.","dec":"@property(nonatomic) SKTextureFilteringMode filteringMode"},"usesMipmaps":{"abs":"A Boolean value that indicates whether the texture attempts to generate mipmaps.","dec":"@property(nonatomic) BOOL usesMipmaps"}},"[+]":{"preloadTextures:withCompletionHandler:":{"abs":"Load the texture data of multiple textures into memory.","dec":"+ (void)preloadTextures:(NSArray *)textures withCompletionHandler:(void (^)(void))completionHandler"},"textureWithCGImage:":{"abs":"Create a new texture object from a Quartz 2D image.","dec":"+ (SKTexture *)textureWithCGImage:(CGImageRef)image"},"textureWithData:size:":{"abs":"Creates a new texture from raw pixel data.","dec":"+ (SKTexture *)textureWithData:(NSData *)pixelData size:(CGSize)size"},"textureWithData:size:rowLength:alignment:":{"abs":"Creates a new texture from custom formatted raw pixel data.","dec":"+ (SKTexture *)textureWithData:(NSData *)pixelData size:(CGSize)size rowLength:(unsigned int)rowLength alignment:(unsigned int)alignment"},"textureWithImage:":{"abs":"Create a new texture object from a UIImage object.","dec":"+ (SKTexture *)textureWithImage:(UIImage *)image"},"textureWithImageNamed:":{"abs":"Create a new texture object from an image file stored in the app bundle.","dec":"+ (SKTexture *)textureWithImageNamed:(NSString *)name"},"textureWithRect:inTexture:":{"abs":"Creates a new texture from a subset of an existing texture.","dec":"+ (SKTexture *)textureWithRect:(CGRect)rect inTexture:(SKTexture *)texture"}},"[-]":{"preloadWithCompletionHandler:":{"abs":"Load the texture data into memory, calling a completion handler after the task completes.","dec":"- (void)preloadWithCompletionHandler:(void (^)(void))completionHandler"},"size":{"abs":"The size of the texture.","dec":"- (CGSize)size"},"textureByApplyingCIFilter:":{"abs":"Creates a new texture by applying a Core Image filter to an existing texture.","dec":"- (SKTexture *)textureByApplyingCIFilter:(CIFilter *)filter"},"textureRect":{"abs":"A rectangle that defines the portion of the texture used to render its image.","dec":"- (CGRect)textureRect"}},"[=]":{"SKTextureFilteringNearest":"","SKTextureFilteringLinear":""}};

ClassRef["SKTextureAtlas"] = {"[:]":"NSObject","[.]":{"textureNames":{"abs":"The names of the texture images stored in the atlas. (read-only)","dec":"@property(readonly, nonatomic) NSArray *textureNames"}},"[+]":{"atlasNamed:":{"abs":"Creates an atlas from data stored in the app bundle.","dec":"+ (SKTextureAtlas *)atlasNamed:(NSString *)name"},"preloadTextureAtlases:withCompletionHandler:":{"abs":"Loads the textures of multiple atlases into memory, calling a completion handler after the task completes.","dec":"+ (void)preloadTextureAtlases:(NSArray *)textureAtlases withCompletionHandler:(void (^)(void))completionHandler"}},"[-]":{"preloadWithCompletionHandler:":{"abs":"Load the atlas’s textures into memory, calling a completion handler after the task completes.","dec":"- (void)preloadWithCompletionHandler:(void (^)(void))completionHandler"},"textureNamed:":{"abs":"Creates a texture from data stored in the texture atlas.","dec":"- (SKTexture *)textureNamed:(NSString *)name"}}};

ClassRef["SKTransition"] = {"[:]":"NSObject","[.]":{"pausesIncomingScene":{"abs":"A Boolean value that determines whether the incoming scene is paused during the transition.","dec":"@property(nonatomic) BOOL pausesIncomingScene"},"pausesOutgoingScene":{"abs":"A Boolean value that determines whether the outgoing scene is paused during the transition.","dec":"@property(nonatomic) BOOL pausesOutgoingScene"}},"[+]":{"crossFadeWithDuration:":{"abs":"Creates a cross fade transition.","dec":"+ (SKTransition *)crossFadeWithDuration:(NSTimeInterval)sec"},"doorsCloseHorizontalWithDuration:":{"abs":"Creates a transition where the new scene appears as a pair of closing horizontal doors.","dec":"+ (SKTransition *)doorsCloseHorizontalWithDuration:(NSTimeInterval)sec"},"doorsCloseVerticalWithDuration:":{"abs":"Creates a transition where the new scene appears as a pair of closing vertical doors.","dec":"+ (SKTransition *)doorsCloseVerticalWithDuration:(NSTimeInterval)sec"},"doorsOpenHorizontalWithDuration:":{"abs":"Creates a transition where the new scene appears as a pair of opening horizontal doors.","dec":"+ (SKTransition *)doorsOpenHorizontalWithDuration:(NSTimeInterval)sec"},"doorsOpenVerticalWithDuration:":{"abs":"Creates a transition where the new scene appears as a pair of opening vertical doors.","dec":"+ (SKTransition *)doorsOpenVerticalWithDuration:(NSTimeInterval)sec"},"doorwayWithDuration:":{"abs":"Creates a transition where the previous scene disappears as a pair of opening doors. The new scene starts in the background and moves closer as the doors open.","dec":"+ (SKTransition *)doorwayWithDuration:(NSTimeInterval)sec"},"fadeWithColor:duration:":{"abs":"Creates a transition that first fades to a constant color and then fades to the new scene.","dec":"+ (SKTransition *)fadeWithColor:(SKColor *)color duration:(NSTimeInterval)sec"},"fadeWithDuration:":{"abs":"Creates a transition that first fades to black and then fades to the new scene.","dec":"+ (SKTransition *)fadeWithDuration:(NSTimeInterval)sec"},"flipHorizontalWithDuration:":{"abs":"Creates a transition where the two scenes are flipped across a horizontal line running through the center of the view.","dec":"+ (SKTransition *)flipHorizontalWithDuration:(NSTimeInterval)sec"},"flipVerticalWithDuration:":{"abs":"Creates a transition where the two scenes are flipped across a vertical line running through the center of the view.","dec":"+ (SKTransition *)flipVerticalWithDuration:(NSTimeInterval)sec"},"moveInWithDirection:duration:":{"abs":"Creates a transition where the new scene moves in on top of the old scene.","dec":"+ (SKTransition *)moveInWithDirection:(SKTransitionDirection)direction duration:(NSTimeInterval)sec"},"pushWithDirection:duration:":{"abs":"Creates a transition where the new scene moves in, pushing the old scene out of the view.","dec":"+ (SKTransition *)pushWithDirection:(SKTransitionDirection)direction duration:(NSTimeInterval)sec"},"revealWithDirection:duration:":{"abs":"Creates a transition where the old scene moves out of the view, revealing the new scene underneath it.","dec":"+ (SKTransition *)revealWithDirection:(SKTransitionDirection)direction duration:(NSTimeInterval)sec"},"transitionWithCIFilter:duration:":{"abs":"Creates a transition that uses a Core Image filter to perform the transition.","dec":"+ (SKTransition *)transitionWithCIFilter:(CIFilter *)filter duration:(NSTimeInterval)sec"}},"[=]":{"SKTransitionDirectionUp":"","SKTransitionDirectionDown":"","SKTransitionDirectionRight":"","SKTransitionDirectionLeft":""}};

ClassRef["SKVideoNode"] = {"[:]":"SKNode : UIResponder : NSObject","[.]":{"anchorPoint":{"abs":"Defines the point in the sprite that corresponds to the node’s position.","dec":"@property(nonatomic) CGPoint anchorPoint"},"size":{"abs":"The dimensions of the video node, in points.","dec":"@property(nonatomic) CGSize size"}},"[+]":{"videoNodeWithAVPlayer:":{"abs":"Creates and initializes a video node using an existing AVPlayer object.","dec":"+ (SKVideoNode *)videoNodeWithAVPlayer:(AVPlayer *)player"},"videoNodeWithVideoFileNamed:":{"abs":"Creates and initializes a new video node using a video file stored in the app bundle.","dec":"+ (SKVideoNode *)videoNodeWithVideoFileNamed:(NSString *)videoFile"},"videoNodeWithVideoURL:":{"abs":"Creates and initializes a video node using a URL that points to a video file.","dec":"+ (SKVideoNode *)videoNodeWithVideoURL:(NSURL *)videoURL"}},"[-]":{"initWithAVPlayer:":{"abs":"Initializes a video node using an existing AVPlayer object.","dec":"- (instancetype)initWithAVPlayer:(AVPlayer *)player"},"initWithVideoFileNamed:":{"abs":"Initializes a video node using a video file stored in the app bundle.","dec":"- (instancetype)initWithVideoFileNamed:(NSString *)videoFile"},"initWithVideoURL:":{"abs":"Initializes a video node using a URL that points to a video file.","dec":"- (instancetype)initWithVideoURL:(NSURL *)url"},"pause":{"abs":"Pauses video playback.","dec":"- (void)pause"},"play":{"abs":"Starts video playback.","dec":"- (void)play"}}};

ClassRef["SKView"] = {"[:]":"UIView : UIResponder : NSObject","[.]":{"asynchronous":{"abs":"A Boolean value that indicates whether the content is rendered asynchronously.","dec":"@property(getter=isAsynchronous, nonatomic) BOOL asynchronous"},"frameInterval":{"abs":"The number of frames that must pass before the scene is called to update its contents.","dec":"@property(nonatomic) NSInteger frameInterval"},"ignoresSiblingOrder":{"abs":"A Boolean value that indicates whether parent-child and sibling relationships affect the rendering order of nodes in the scene.","dec":"@property(nonatomic) BOOL ignoresSiblingOrder"},"paused":{"abs":"A Boolean value that indicates whether the view’s scene animations are paused.","dec":"@property(getter=isPaused, nonatomic) BOOL paused"},"scene":{"abs":"The scene currently presented by the view. (read-only)","dec":"@property(readonly, nonatomic) SKScene *scene"},"showsDrawCount":{"abs":"A Boolean value that indicates whether the view displays the number of drawing passes it needed to render the view.","dec":"@property(nonatomic) BOOL showsDrawCount"},"showsFPS":{"abs":"A Boolean value that indicates whether the view displays a frame rate indicator.","dec":"@property(nonatomic) BOOL showsFPS"},"showsNodeCount":{"abs":"A Boolean value that indicates whether the view displays the count of the nodes visible in the scene.","dec":"@property(nonatomic) BOOL showsNodeCount"},"showsPhysics":{"abs":"A Boolean value that indicates whether the view displays physics-related debugging information.","dec":"@property(nonatomic) BOOL showsPhysics"}},"[-]":{"convertPoint:fromScene:":{"abs":"Converts a point from scene coordinates to view coordinates.","dec":"- (CGPoint)convertPoint:(CGPoint)point fromScene:(SKScene *)scene"},"convertPoint:toScene:":{"abs":"Converts a point from view coordinates to scene coordinates.","dec":"- (CGPoint)convertPoint:(CGPoint)point toScene:(SKScene *)scene"},"presentScene:":{"abs":"Presents a scene.","dec":"- (void)presentScene:(SKScene *)scene"},"presentScene:transition:":{"abs":"Transitions from the current scene to a new scene.","dec":"- (void)presentScene:(SKScene *)scene transition:(SKTransition *)transition"},"textureFromNode:":{"abs":"Renders and returns a Sprite Kit texture that contains the node’s contents.","dec":"- (SKTexture *)textureFromNode:(SKNode *)node"}}};

ClassRef.UIAcceleration = {"[:]":"NSObject","[.]":{"timestamp":{"abs":"The relative time at which the acceleration event occurred. (read-only)","dec":"@property(nonatomic, readonly) NSTimeInterval timestamp"},"x":{"abs":"The acceleration value for the x axis of the device. (read-only)","dec":"@property(nonatomic, readonly) UIAccelerationValue x"},"y":{"abs":"The acceleration value for the y axis of the device. (read-only)","dec":"@property(nonatomic, readonly) UIAccelerationValue y"},"z":{"abs":"The acceleration value for the z axis of the device. (read-only)","dec":"@property(nonatomic, readonly) UIAccelerationValue z"}}};

ClassRef.UIAccelerometer = {"[:]":"NSObject","[.]":{"delegate":{"abs":"The delegate object you want to receive acceleration events.","dec":"@property(nonatomic, assign) id<UIAccelerometerDelegate> delegate"},"updateInterval":{"abs":"The interval at which to deliver acceleration data to the delegate.","dec":"@property(nonatomic) NSTimeInterval updateInterval"}},"[+]":{"sharedAccelerometer":{"abs":"Returns the shared accelerometer object for the system.","dec":"+ (UIAccelerometer *)sharedAccelerometer"}}};

ClassRef.UIAccessibilityElement = {"[:]":"NSObject","[.]":{"accessibilityContainer":{"abs":"The view that contains the accessibility element.","dec":"@property(nonatomic, assign) id accessibilityContainer"},"accessibilityFrame":{"abs":"The frame of the accessibility element, in screen coordinates.","dec":"@property(nonatomic, assign) CGRect accessibilityFrame"},"accessibilityHint":{"abs":"A string that briefly describes the result of performing an action on the accessibility element.","dec":"@property(nonatomic, retain) NSString *accessibilityHint"},"accessibilityLabel":{"abs":"A string that succinctly identifies the accessibility element.","dec":"@property(nonatomic, retain) NSString *accessibilityLabel"},"accessibilityTraits":{"abs":"The combination of traits that best characterize the accessibility element.","dec":"@property(nonatomic, assign) UIAccessibilityTraits accessibilityTraits"},"accessibilityValue":{"abs":"A string that represents the current value of the accessibility element.","dec":"@property(nonatomic, retain) NSString *accessibilityValue"},"isAccessibilityElement":{"abs":"A Boolean value indicating whether the item is an accessibility element an assistive application can access.","dec":"@property(nonatomic, assign) BOOL isAccessibilityElement"}},"[-]":{"initWithAccessibilityContainer:":{"abs":"Creates and initializes an accessibility element to represent an item in the specified container.","dec":"- (id)initWithAccessibilityContainer:(id)container"}}};

ClassRef.UIActionSheet = {"[:]":"UIView : UIResponder : NSObject","[.]":{"actionSheetStyle":{"abs":"The receiver’s presentation style.","dec":"@property(nonatomic) UIActionSheetStyle actionSheetStyle"},"cancelButtonIndex":{"abs":"The index number of the cancel button.","dec":"@property(nonatomic) NSInteger cancelButtonIndex"},"delegate":{"abs":"The receiver’s delegate or nil if it doesn’t have a delegate.","dec":"@property(nonatomic, assign) id<UIActionSheetDelegate> delegate"},"destructiveButtonIndex":{"abs":"The index number of the destructive button.","dec":"@property(nonatomic) NSInteger destructiveButtonIndex"},"firstOtherButtonIndex":{"abs":"The index of the first custom button. (read-only)","dec":"@property(nonatomic, readonly) NSInteger firstOtherButtonIndex"},"numberOfButtons":{"abs":"The number of buttons on the action sheet. (read-only)","dec":"@property(nonatomic, readonly) NSInteger numberOfButtons"},"title":{"abs":"The string that appears in the receiver’s title bar.","dec":"@property(nonatomic, copy) NSString *title"},"visible":{"abs":"A Boolean value that indicates whether the receiver is displayed. (read-only)","dec":"@property(nonatomic, readonly, getter=isVisible) BOOL visible"}},"[-]":{"addButtonWithTitle:":{"abs":"Adds a custom button to the action sheet.","dec":"- (NSInteger)addButtonWithTitle:(NSString *)title"},"buttonTitleAtIndex:":{"abs":"Returns the title of the button at the specified index.","dec":"- (NSString *)buttonTitleAtIndex:(NSInteger)buttonIndex"},"dismissWithClickedButtonIndex:animated:":{"abs":"Dismisses the action sheet immediately using an optional animation.","dec":"- (void)dismissWithClickedButtonIndex:(NSInteger)buttonIndex animated:(BOOL)animated"},"initWithTitle:delegate:cancelButtonTitle:destructiveButtonTitle:otherButtonTitles:":{"abs":"Initializes the action sheet using the specified starting parameters.","dec":"- (id)initWithTitle:(NSString *)title delegate:(id < UIActionSheetDelegate >)delegate cancelButtonTitle:(NSString *)cancelButtonTitle destructiveButtonTitle:(NSString *)destructiveButtonTitle otherButtonTitles:(NSString *)otherButtonTitles, ..."},"showFromBarButtonItem:animated:":{"abs":"Displays an action sheet that originates from the specified bar button item.","dec":"- (void)showFromBarButtonItem:(UIBarButtonItem *)item animated:(BOOL)animated"},"showFromRect:inView:animated:":{"abs":"Displays an action sheet that originates from the specified view.","dec":"- (void)showFromRect:(CGRect)rect inView:(UIView *)view animated:(BOOL)animated"},"showFromTabBar:":{"abs":"Displays an action sheet that originates from the specified tab bar.","dec":"- (void)showFromTabBar:(UITabBar *)view"},"showFromToolbar:":{"abs":"Displays an action sheet that originates from the specified toolbar.","dec":"- (void)showFromToolbar:(UIToolbar *)view"},"showInView:":{"abs":"Displays an action sheet that originates from the specified view.","dec":"- (void)showInView:(UIView *)view"}},"[=]":{"UIActionSheetStyleAutomatic":"","UIActionSheetStyleDefault":"","UIActionSheetStyleBlackTranslucent":"","UIActionSheetStyleBlackOpaque":""}};

ClassRef.UIActivity = {"[:]":"NSObject","[+]":{"activityCategory":{"abs":"Returns the category of the activity, which may be used to group activities in the UI.","dec":"+ (UIActivityCategory)activityCategory;"}},"[-]":{"activityDidFinish:":{"abs":"Notifies the system that your activity object has completed its work.","dec":"- (void)activityDidFinish:(BOOL)completed;"},"activityImage":{"abs":"An image that identifies the service to the user.","dec":"- (UIImage *)activityImage;"},"activityTitle":{"abs":"A user-readable string describing the service.","dec":"- (NSString *)activityTitle;"},"activityType":{"abs":"An identifier for the type of service being provided.","dec":"- (NSString *)activityType;"},"activityViewController":{"abs":"Returns the view controller to present to the user.","dec":"- (UIViewController *)activityViewController;"},"canPerformWithActivityItems:":{"abs":"Returns a Boolean indicating whether the service can act on the specified data items.","dec":"- (BOOL)canPerformWithActivityItems:(NSArray *)activityItems;"},"performActivity":{"abs":"Performs the service when no custom view controller is provided.","dec":"- (void)performActivity;"},"prepareWithActivityItems:":{"abs":"Prepares your service to act on the specified data.","dec":"- (void)prepareWithActivityItems:(NSArray *)activityItems;"}},"[=]":{"UIActivityTypePostToFacebook":"","UIActivityTypePostToTwitter":"","UIActivityTypePostToWeibo":"","UIActivityTypeMessage":"","UIActivityTypeMail":"","UIActivityTypePrint":"","UIActivityTypeCopyToPasteboard":"","UIActivityTypeAssignToContact":"","UIActivityTypeSaveToCameraRoll":"","UIActivityTypeAddToReadingList":"","UIActivityTypePostToFlickr":"","UIActivityTypePostToVimeo":"","UIActivityTypePostToTencentWeibo":"","UIActivityTypeAirDrop":"","UIActivityCategoryAction":"","UIActivityCategoryShare":""}};

ClassRef.UIActivityIndicatorView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"activityIndicatorViewStyle":{"abs":"The basic appearance of the activity indicator.","dec":"@property UIActivityIndicatorViewStyle activityIndicatorViewStyle"},"color":{"abs":"The color of the activity indicator.","dec":"@property (readwrite, nonatomic, retain) UIColor *color"},"hidesWhenStopped":{"abs":"A Boolean value that controls whether the receiver is hidden when the animation is stopped.","dec":"@property BOOL hidesWhenStopped"}},"[-]":{"initWithActivityIndicatorStyle:":{"abs":"Initializes and returns an activity-indicator object.","dec":"- (id)initWithActivityIndicatorStyle:(UIActivityIndicatorViewStyle)style"},"isAnimating":{"abs":"Returns whether the receiver is animating.","dec":"- (BOOL)isAnimating"},"startAnimating":{"abs":"Starts the animation of the progress indicator.","dec":"- (void)startAnimating"},"stopAnimating":{"abs":"Stops the animation of the progress indicator.","dec":"- (void)stopAnimating"}},"[=]":{"UIActivityIndicatorViewStyleWhiteLarge":"","UIActivityIndicatorViewStyleWhite":"","UIActivityIndicatorViewStyleGray":""}};

ClassRef.UIActivityItemProvider = {"[:]":"NSOperation : NSObject","[.]":{"activityType":{"abs":"The type of the activity object that is expecting the data. (read-only)","dec":"@property(nonatomic,readonly) NSString *activityType"},"placeholderItem":{"abs":"The placeholder object you specified at initialization time. (read-only)","dec":"@property(nonatomic,retain,readonly) id placeholderItem"}},"[-]":{"initWithPlaceholderItem:":{"abs":"Initializes and returns a provider object with the specified placeholder data.","dec":"- (id)initWithPlaceholderItem:(id)placeholderItem"},"item":{"abs":"Generates and returns the actual data-bearing object.","dec":"- (id)item"}}};

ClassRef.UIActivityViewController = {"[:]":"UIViewController : UIResponder : NSObject","[.]":{"completionHandler":{"abs":"The completion handler to execute after the activity view controller is dismissed.","dec":"@property(nonatomic,copy) UIActivityViewControllerCompletionHandler completionHandler"},"excludedActivityTypes":{"abs":"The list of services that should not be displayed.","dec":"@property(nonatomic,copy) NSArray *excludedActivityTypes"}},"[-]":{"initWithActivityItems:applicationActivities:":{"abs":"Initializes and returns a new activity view controller object that acts on the specified data.","dec":"- (id)initWithActivityItems:(NSArray *)activityItems applicationActivities:(NSArray *)applicationActivities;"}}};

ClassRef.UIAlertView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"alertViewStyle":{"abs":"The kind of alert displayed to the user.","dec":"@property(nonatomic, assign) UIAlertViewStyle alertViewStyle"},"cancelButtonIndex":{"abs":"The index number of the cancel button.","dec":"@property(nonatomic) NSInteger cancelButtonIndex"},"delegate":{"abs":"The receiver’s delegate or nil if it doesn’t have a delegate.","dec":"@property(nonatomic, assign) id delegate"},"firstOtherButtonIndex":{"abs":"The index of the first other button. (read-only)","dec":"@property(nonatomic, readonly) NSInteger firstOtherButtonIndex"},"message":{"abs":"Descriptive text that provides more details than the title.","dec":"@property(nonatomic, copy) NSString *message"},"numberOfButtons":{"abs":"The number of buttons on the alert view. (read-only)","dec":"@property(nonatomic, readonly) NSInteger numberOfButtons"},"title":{"abs":"The string that appears in the receiver’s title bar.","dec":"@property(nonatomic, copy) NSString *title"},"visible":{"abs":"A Boolean value that indicates whether the receiver is displayed. (read-only)","dec":"@property(nonatomic, readonly, getter=isVisible) BOOL visible"}},"[-]":{"addButtonWithTitle:":{"abs":"Adds a button to the receiver with the given title.","dec":"- (NSInteger)addButtonWithTitle:(NSString *)title"},"buttonTitleAtIndex:":{"abs":"Returns the title of the button at the given index.","dec":"- (NSString *)buttonTitleAtIndex:(NSInteger)buttonIndex"},"dismissWithClickedButtonIndex:animated:":{"abs":"Dismisses the receiver, optionally with animation.","dec":"- (void)dismissWithClickedButtonIndex:(NSInteger)buttonIndex animated:(BOOL)animated"},"initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:":{"abs":"Convenience method for initializing an alert view.","dec":"- (id)initWithTitle:(NSString *)title message:(NSString *)message delegate:(id)delegate cancelButtonTitle:(NSString *)cancelButtonTitle otherButtonTitles:(NSString *)otherButtonTitles, ..."},"show":{"abs":"Displays the receiver using animation.","dec":"- (void)show"},"textFieldAtIndex:":{"abs":"Returns the text field at the given index","dec":"- (UITextField *)textFieldAtIndex:(NSInteger)textFieldIndex"}},"[=]":{"UIAlertViewStyleDefault":"","UIAlertViewStyleSecureTextInput":"","UIAlertViewStylePlainTextInput":"","UIAlertViewStyleLoginAndPasswordInput":""}};

ClassRef.UIApplication = {"[:]":"UIResponder : NSObject","[.]":{"applicationIconBadgeNumber":{"abs":"The number currently set as the badge of the app icon in Springboard.","dec":"@property(nonatomic) NSInteger applicationIconBadgeNumber"},"applicationState":{"abs":"The runtime state of the app. (read-only)","dec":"@property(nonatomic, readonly) UIApplicationState applicationState"},"applicationSupportsShakeToEdit":{"abs":"A Boolean value that determines whether shaking the device displays the undo-redo user interface.","dec":"@property(nonatomic) BOOL applicationSupportsShakeToEdit"},"backgroundRefreshStatus":{"abs":"The ability of the app to be launched into the background so that it can perform background behaviors. (read-only)","dec":"@property (nonatomic, readonly) UIBackgroundRefreshStatus backgroundRefreshStatus"},"backgroundTimeRemaining":{"abs":"The amount of time the app has to run in the background. (read-only)","dec":"@property(nonatomic, readonly) NSTimeInterval backgroundTimeRemaining"},"delegate":{"abs":"The delegate of the app object.","dec":"@property(nonatomic, assign) id<UIApplicationDelegate> delegate"},"idleTimerDisabled":{"abs":"A Boolean value that controls whether the idle timer is disabled for the app.","dec":"@property(nonatomic, getter=isIdleTimerDisabled) BOOL idleTimerDisabled"},"keyWindow":{"abs":"The app's key window. (read-only)","dec":"@property(nonatomic, readonly) UIWindow *keyWindow"},"networkActivityIndicatorVisible":{"abs":"A Boolean value that turns an indicator of network activity on or off.","dec":"@property(nonatomic, getter=isNetworkActivityIndicatorVisible) BOOL networkActivityIndicatorVisible"},"preferredContentSizeCategory":{"abs":"The font sizing option preferred by the user. (read-only)","dec":"@property(nonatomic,readonly) NSString *preferredContentSizeCategory;"},"protectedDataAvailable":{"abs":"A Boolean value indicating whether content protection is active. (read-only)","dec":"@property(nonatomic, readonly, getter=isProtectedDataAvailable) BOOL protectedDataAvailable"},"scheduledLocalNotifications":{"abs":"All currently scheduled local notifications.","dec":"@property(nonatomic, copy) NSArray *scheduledLocalNotifications"},"statusBarFrame":{"abs":"The frame rectangle defining the area of the status bar. (read-only)","dec":"@property(nonatomic, readonly) CGRect statusBarFrame"},"statusBarHidden":{"abs":"A Boolean value that determines whether the status bar is hidden.","dec":"@property(nonatomic, getter=isStatusBarHidden) BOOL statusBarHidden"},"statusBarOrientation":{"abs":"The current orientation of the app's status bar.","dec":"@property(nonatomic) UIInterfaceOrientation statusBarOrientation"},"statusBarOrientationAnimationDuration":{"abs":"The animation duration in seconds for the status bar during a 90 degree orientation change. (read-only)","dec":"@property(nonatomic, readonly) NSTimeInterval statusBarOrientationAnimationDuration"},"statusBarStyle":{"abs":"The current style of the status bar.","dec":"@property(nonatomic) UIStatusBarStyle statusBarStyle"},"userInterfaceLayoutDirection":{"abs":"Returns the layout direction of the user interface. (read-only)","dec":"@property(nonatomic, readonly) UIUserInterfaceLayoutDirection userInterfaceLayoutDirection"},"windows":{"abs":"The app's visible and hidden windows. (read-only)","dec":"@property(nonatomic, readonly) NSArray *windows"}},"[+]":{"registerObjectForStateRestoration:restorationIdentifier:":{"abs":"Registers a custom object for use with the state restoration system.","dec":"+ (void) registerObjectForStateRestoration:(id<UIStateRestoring>)object restorationIdentifier:(NSString *)restorationIdentifier"},"sharedApplication":{"abs":"Returns the singleton app instance.","dec":"+ (UIApplication *)sharedApplication"}},"[-]":{"beginBackgroundTaskWithExpirationHandler:":{"abs":"Marks the beginning of a new long-running background task.","dec":"- (UIBackgroundTaskIdentifier)beginBackgroundTaskWithExpirationHandler:(void (^)(void))handler"},"beginBackgroundTaskWithName:expirationHandler:":{"abs":"Marks the beginning of a new long-running background task with the specified name.","dec":"- (UIBackgroundTaskIdentifier)beginBackgroundTaskWithName:(NSString *)taskName expirationHandler:(void(^)(void))handler"},"beginIgnoringInteractionEvents":{"abs":"Tells the receiver to suspend the handling of touch-related events.","dec":"- (void)beginIgnoringInteractionEvents"},"beginReceivingRemoteControlEvents":{"abs":"Tells the app to begin receiving remote-control events.","dec":"- (void)beginReceivingRemoteControlEvents"},"cancelAllLocalNotifications":{"abs":"Cancels the delivery of all scheduled local notifications.","dec":"- (void)cancelAllLocalNotifications"},"cancelLocalNotification:":{"abs":"Cancels the delivery of the specified scheduled local notification.","dec":"- (void)cancelLocalNotification:(UILocalNotification *)notification"},"canOpenURL:":{"abs":"Returns whether an app can open a given URL resource.","dec":"- (BOOL)canOpenURL:(NSURL *)url"},"clearKeepAliveTimeout":{"abs":"Removes a previously installed periodic handler block.","dec":"- (void)clearKeepAliveTimeout"},"completeStateRestoration":{"abs":"Tells the app that your code has finished any asynchronous state restoration.","dec":"- (void)completeStateRestoration"},"enabledRemoteNotificationTypes":{"abs":"Returns the types of notifications the app accepts.","dec":"- (UIRemoteNotificationType)enabledRemoteNotificationTypes"},"endBackgroundTask:":{"abs":"Marks the end of a specific long-running background task.","dec":"- (void)endBackgroundTask:(UIBackgroundTaskIdentifier)identifier"},"endIgnoringInteractionEvents":{"abs":"Tells the receiver to resume the handling of touch-related events.","dec":"- (void)endIgnoringInteractionEvents"},"endReceivingRemoteControlEvents":{"abs":"Tells the app to stop receiving remote-control events.","dec":"- (void)endReceivingRemoteControlEvents"},"extendStateRestoration":{"abs":"Tells the app that your code is restoring state asynchronously.","dec":"- (void)extendStateRestoration"},"ignoreSnapshotOnNextApplicationLaunch":{"abs":"Prevents the app from using the recent snapshot image during the next launch cycle.","dec":"- (void)ignoreSnapshotOnNextApplicationLaunch"},"isIgnoringInteractionEvents":{"abs":"Returns whether the receiver is ignoring events initiated by touches on the screen.","dec":"- (BOOL)isIgnoringInteractionEvents"},"openURL:":{"abs":"Opens the resource at the specified URL.","dec":"- (BOOL)openURL:(NSURL *)url"},"presentLocalNotificationNow:":{"abs":"Presents a local notification immediately.","dec":"- (void)presentLocalNotificationNow:(UILocalNotification *)notification"},"registerForRemoteNotificationTypes:":{"abs":"Register to receive notifications of the specified types from a provider via Apple Push Service.","dec":"- (void)registerForRemoteNotificationTypes:(UIRemoteNotificationType)types"},"scheduleLocalNotification:":{"abs":"Schedules a local notification for delivery at its encapsulated date and time.","dec":"- (void)scheduleLocalNotification:(UILocalNotification *)notification"},"sendAction:to:from:forEvent:":{"abs":"Sends an action message identified by selector to a specified target.","dec":"- (BOOL)sendAction:(SEL)action to:(id)target from:(id)sender forEvent:(UIEvent *)event"},"sendEvent:":{"abs":"Dispatches an event to the appropriate responder objects in the app.","dec":"- (void)sendEvent:(UIEvent *)event"},"setKeepAliveTimeout:handler:":{"abs":"Configures a periodic handler for VoIP apps.","dec":"- (BOOL)setKeepAliveTimeout:(NSTimeInterval)timeout handler:(void (^)(void))keepAliveHandler"},"setMinimumBackgroundFetchInterval:":{"abs":"Specifies the minimum amount of time that must elapse between background fetch operations.","dec":"- (void)setMinimumBackgroundFetchInterval:(NSTimeInterval)minimumBackgroundFetchInterval"},"setNewsstandIconImage:":{"abs":"Sets the icon of a Newsstand app to an image depicting the current issue of a publication.","dec":"- (void)setNewsstandIconImage:(UIImage *)image"},"setStatusBarHidden:withAnimation:":{"abs":"Hides or shows the status bar, optionally animating the transition.","dec":"- (void)setStatusBarHidden:(BOOL)hidden withAnimation:(UIStatusBarAnimation)animation"},"setStatusBarOrientation:animated:":{"abs":"Sets the app's status bar to the specified orientation, optionally animating the transition.","dec":"- (void)setStatusBarOrientation:(UIInterfaceOrientation)interfaceOrientation animated:(BOOL)animated"},"setStatusBarStyle:animated:":{"abs":"Sets the style of the status bar, optionally animating the transition to the new style.","dec":"- (void)setStatusBarStyle:(UIStatusBarStyle)statusBarStyle animated:(BOOL)animated"},"supportedInterfaceOrientationsForWindow:":{"abs":"Returns the default set of interface orientations to use for the view controllers in the specified window.","dec":"- (NSUInteger)supportedInterfaceOrientationsForWindow:(UIWindow *)window"},"unregisterForRemoteNotifications":{"abs":"Unregister for notifications received from Apple Push Service.","dec":"- (void)unregisterForRemoteNotifications"}},"[=]":{"UIApplicationStateActive":"","UIApplicationStateInactive":"","UIApplicationStateBackground":"","UIBackgroundTaskInvalid":"","UIMinimumKeepAliveTimeout":"","UIBackgroundFetchResultNewData":"","UIBackgroundFetchResultNoData":"","UIBackgroundFetchResultFailed":"","UIApplicationBackgroundFetchIntervalMinimum":"","UIApplicationBackgroundFetchIntervalNever":"","UIBackgroundRefreshStatusRestricted":"","UIBackgroundRefreshStatusDenied":"","UIBackgroundRefreshStatusAvailable":"","UIRemoteNotificationTypeNone":"","UIRemoteNotificationTypeBadge":"","UIRemoteNotificationTypeSound":"","UIRemoteNotificationTypeAlert":"","UIRemoteNotificationTypeNewsstandContentAvailability":"","UIInterfaceOrientationPortrait":"","UIInterfaceOrientationPortraitUpsideDown":"","UIInterfaceOrientationLandscapeLeft":"","UIInterfaceOrientationLandscapeRight":"","UIInterfaceOrientationMaskPortrait":"","UIInterfaceOrientationMaskLandscapeLeft":"","UIInterfaceOrientationMaskLandscapeRight":"","UIInterfaceOrientationMaskPortraitUpsideDown":"","UIInterfaceOrientationMaskLandscape":"","UIInterfaceOrientationMaskAll":"","UIInterfaceOrientationMaskAllButUpsideDown":"","UIUserInterfaceLayoutDirectionLeftToRight":"","UIUserInterfaceLayoutDirectionRightToLeft":"","UIStatusBarStyleDefault":"","UIStatusBarStyleLightContent":"","UIStatusBarStyleBlackTranslucent":"","UIStatusBarStyleBlackOpaque":"","UIStatusBarAnimationNone":"","UIStatusBarAnimationFade":"","UIStatusBarAnimationSlide":"","UIApplicationStatusBarOrientationUserInfoKey":"","UIApplicationStatusBarFrameUserInfoKey":"","UIContentSizeCategoryExtraSmall":"","UIContentSizeCategorySmall":"","UIContentSizeCategoryMedium":"","UIContentSizeCategoryLarge":"","UIContentSizeCategoryExtraLarge":"","UIContentSizeCategoryExtraExtraLarge":"","UIContentSizeCategoryExtraExtraExtraLarge":"","UIContentSizeCategoryAccessibilityMedium":"","UIContentSizeCategoryAccessibilityLarge":"","UIContentSizeCategoryAccessibilityExtraLarge":"","UIContentSizeCategoryAccessibilityExtraExtraLarge":"","UIContentSizeCategoryAccessibilityExtraExtraExtraLarge":"","UIContentSizeCategoryNewValueKey":"","UITrackingRunLoopMode":"","UIApplicationInvalidInterfaceOrientationException":""}};

ClassRef.UIAttachmentBehavior = {"[:]":"UIDynamicBehavior : NSObject","[.]":{"anchorPoint":{"abs":"The anchor point for an attachment behavior of type UIAttachmentBehaviorTypeAnchor.","dec":"@property(readwrite, nonatomic) CGPoint anchorPoint"},"attachedBehaviorType":{"abs":"The type of the attachment behavior. (read-only)","dec":"@property(readonly, nonatomic) UIAttachmentBehaviorType attachedBehaviorType"},"damping":{"abs":"The amount of damping to apply to the attachment behavior.","dec":"@property(readwrite, nonatomic) CGFloat damping"},"frequency":{"abs":"The frequency of oscillation for the attachment behavior.","dec":"@property(readwrite, nonatomic) CGFloat frequency"},"items":{"abs":"The dynamic items connected by the attachment behavior. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *items"},"length":{"abs":"The distance, in points, between the two attachment points of the attachment behavior.","dec":"@property(readwrite, nonatomic) CGFloat length"}},"[-]":{"initWithItem:attachedToAnchor:":{"abs":"Initializes an attachment behavior that connects the center point of a dynamic item to an anchor point.","dec":"- (instancetype)initWithItem:(id<UIDynamicItem>)item attachedToAnchor:(CGPoint)point"},"initWithItem:attachedToItem:":{"abs":"Initializes an attachment behavior that connects the center point of a dynamic item to the center point of another dynamic item.","dec":"- (instancetype)initWithItem:(id<UIDynamicItem>)item1 attachedToItem:(id<UIDynamicItem>)item2"},"initWithItem:offsetFromCenter:attachedToAnchor:":{"abs":"Initializes an attachment behavior that connects a specified point in a dynamic item to an anchor point.","dec":"- (instancetype)initWithItem:(id<UIDynamicItem>)item offsetFromCenter:(UIOffset)p1 attachedToAnchor:(CGPoint)point"},"initWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:":{"abs":"Initializes an attachment behavior that connects a specified point in one dynamic item to a specified point in another dynamic item.","dec":"- (instancetype)initWithItem:(id<UIDynamicItem>)item1 offsetFromCenter:(UIOffset)p1 attachedToItem:(id<UIDynamicItem>)item2 offsetFromCenter:(UIOffset)p2"}},"[=]":{"UIAttachmentBehaviorTypeItems":"","UIAttachmentBehaviorTypeAnchor":""}};

ClassRef.UIBarButtonItem = {"[:]":"UIBarItem : NSObject","[.]":{"action":{"abs":"The selector defining the action message to send to the target object when the user taps this bar button item.","dec":"@property(nonatomic) SEL action"},"customView":{"abs":"A custom view representing the item.","dec":"@property(nonatomic, retain) UIView *customView"},"possibleTitles":{"abs":"The set of possible titles to display on the bar button.","dec":"@property(nonatomic, copy) NSSet *possibleTitles"},"style":{"abs":"The style of the item.","dec":"@property(nonatomic) UIBarButtonItemStyle style"},"target":{"abs":"The object that receives an action when the item is selected.","dec":"@property(nonatomic, assign) id target"},"tintColor":{"abs":"The tint color to apply to the button item.","dec":"@property(nonatomic, retain) UIColor *tintColor"},"width":{"abs":"The width of the item.","dec":"@property(nonatomic) CGFloat width"}},"[-]":{"backButtonBackgroundImageForState:barMetrics:":{"abs":"Returns the back button background image for a given control state and bar metrics.","dec":"- (UIImage *)backButtonBackgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics"},"backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:":{"abs":"Returns the back button vertical position offset for given bar metrics.","dec":"- (CGFloat)backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics"},"backButtonTitlePositionAdjustmentForBarMetrics:":{"abs":"Returns the back button title offset for given bar metrics.","dec":"- (UIOffset)backButtonTitlePositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics"},"backgroundImageForState:barMetrics:":{"abs":"Returns the background image for a given state and bar metrics.","dec":"- (UIImage *)backgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics"},"backgroundImageForState:style:barMetrics:":{"abs":"Returns the background image for the specified state, style, and metrics.","dec":"- (UIImage *)backgroundImageForState:(UIControlState)state style:(UIBarButtonItemStyle)style barMetrics:(UIBarMetrics)barMetrics"},"backgroundVerticalPositionAdjustmentForBarMetrics:":{"abs":"Returns the background vertical position offset for given bar metrics.","dec":"- (CGFloat)backgroundVerticalPositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics"},"initWithBarButtonSystemItem:target:action:":{"abs":"Initializes a new item containing the specified system item.","dec":"- (id)initWithBarButtonSystemItem:(UIBarButtonSystemItem)systemItem target:(id)target action:(SEL)action"},"initWithCustomView:":{"abs":"Initializes a new item using the specified custom view.","dec":"- (id)initWithCustomView:(UIView *)customView"},"initWithImage:landscapeImagePhone:style:target:action:":{"abs":"Initializes a new item using the specified images and other properties.","dec":"- (id)initWithImage:(UIImage *)image landscapeImagePhone:(UIImage *)landscapeImagePhone style:(UIBarButtonItemStyle)style target:(id)target action:(SEL)action"},"initWithImage:style:target:action:":{"abs":"Initializes a new item using the specified image and other properties.","dec":"- (id)initWithImage:(UIImage *)image style:(UIBarButtonItemStyle)style target:(id)target action:(SEL)action"},"initWithTitle:style:target:action:":{"abs":"Initializes a new item using the specified title and other properties.","dec":"- (id)initWithTitle:(NSString *)title style:(UIBarButtonItemStyle)style target:(id)target action:(SEL)action"},"setBackButtonBackgroundImage:forState:barMetrics:":{"abs":"Sets the back button background image for a given control state and bar metrics","dec":"- (void)setBackButtonBackgroundImage:(UIImage *)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics"},"setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:":{"abs":"Sets the back button vertical position offset for given bar metrics.","dec":"- (void)setBackButtonBackgroundVerticalPositionAdjustment:(CGFloat)adjustment forBarMetrics:(UIBarMetrics)barMetrics"},"setBackButtonTitlePositionAdjustment:forBarMetrics:":{"abs":"Sets the back button title offset for given bar metrics","dec":"- (void)setBackButtonTitlePositionAdjustment:(UIOffset)adjustment forBarMetrics:(UIBarMetrics)barMetrics"},"setBackgroundImage:forState:barMetrics:":{"abs":"Sets the background image for a given state and bar metrics.","dec":"- (void)setBackgroundImage:(UIImage *)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics"},"setBackgroundImage:forState:style:barMetrics:":{"abs":"Sets the background image for the specified state, style, and metrics.","dec":"- (void)setBackgroundImage:(UIImage *)backgroundImage forState:(UIControlState)state style:(UIBarButtonItemStyle)style barMetrics:(UIBarMetrics)barMetrics"},"setBackgroundVerticalPositionAdjustment:forBarMetrics:":{"abs":"Sets the background vertical position offset for given bar metrics.","dec":"- (void)setBackgroundVerticalPositionAdjustment:(CGFloat)adjustment forBarMetrics:(UIBarMetrics)barMetrics"},"setTitlePositionAdjustment:forBarMetrics:":{"abs":"Sets the title offset for given bar metrics.","dec":"- (void)setTitlePositionAdjustment:(UIOffset)adjustment forBarMetrics:(UIBarMetrics)barMetrics"},"titlePositionAdjustmentForBarMetrics:":{"abs":"Returns the title offset for given bar metrics.","dec":"- (UIOffset)titlePositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics"}},"[=]":{"UIBarButtonSystemItemDone":"","UIBarButtonSystemItemCancel":"","UIBarButtonSystemItemEdit":"","UIBarButtonSystemItemSave":"","UIBarButtonSystemItemAdd":"","UIBarButtonSystemItemFlexibleSpace":"","UIBarButtonSystemItemFixedSpace":"","UIBarButtonSystemItemCompose":"","UIBarButtonSystemItemReply":"","UIBarButtonSystemItemAction":"","UIBarButtonSystemItemOrganize":"","UIBarButtonSystemItemBookmarks":"","UIBarButtonSystemItemSearch":"","UIBarButtonSystemItemRefresh":"","UIBarButtonSystemItemStop":"","UIBarButtonSystemItemCamera":"","UIBarButtonSystemItemTrash":"","UIBarButtonSystemItemPlay":"","UIBarButtonSystemItemPause":"","UIBarButtonSystemItemRewind":"","UIBarButtonSystemItemFastForward":"","UIBarButtonSystemItemUndo":"","UIBarButtonSystemItemRedo":"","UIBarButtonSystemItemPageCurl":"","UIBarButtonItemStylePlain":"","UIBarButtonItemStyleBordered":"","UIBarButtonItemStyleDone":""}};

ClassRef.UIBarItem = {"[:]":"NSObject","[.]":{"enabled":{"abs":"A Boolean value indicating whether the item is enabled.","dec":"@property(nonatomic, getter=isEnabled) BOOL enabled"},"image":{"abs":"The image used to represent the item.","dec":"@property(nonatomic, retain) UIImage *image"},"imageInsets":{"abs":"The image inset or outset for each edge.","dec":"@property(nonatomic) UIEdgeInsets imageInsets"},"landscapeImagePhone":{"abs":"The image to use to represent the item in landscape orientation when using the iPhone appearance idiom.","dec":"@property(nonatomic, retain) UIImage *landscapeImagePhone"},"landscapeImagePhoneInsets":{"abs":"The image inset or outset for each edge of the image in landscape orientation when using the iPhone appearance idiom.","dec":"@property(nonatomic) UIEdgeInsets landscapeImagePhoneInsets"},"tag":{"abs":"The receiver’s tag, an application-supplied integer that you can use to identify bar item objects in your application.","dec":"@property(nonatomic) NSInteger tag"},"title":{"abs":"The title displayed on the item.","dec":"@property(nonatomic, copy) NSString *title"}},"[-]":{"setTitleTextAttributes:forState:":{"abs":"Sets the title’s text attributes for a given control state.","dec":"- (void)setTitleTextAttributes:(NSDictionary *)attributes forState:(UIControlState)state"},"titleTextAttributesForState:":{"abs":"Returns the title’s text attributes for a given control state.","dec":"- (NSDictionary *)titleTextAttributesForState:(UIControlState)state"}}};

ClassRef.UIBezierPath = {"[:]":"NSObject","[.]":{"bounds":{"abs":"The bounding rectangle of the path. (read-only)","dec":"@property(nonatomic, readonly) CGRect bounds"},"CGPath":{"abs":"The Core Graphics representation of the path.","dec":"@property(nonatomic) CGPathRef CGPath"},"currentPoint":{"abs":"The current point in the graphics path. (read-only)","dec":"@property(nonatomic, readonly) CGPoint currentPoint"},"empty":{"abs":"A Boolean value indicating whether the path has any valid elements. (read-only)","dec":"@property(readonly, getter=isEmpty) BOOL empty"},"flatness":{"abs":"The factor that determines the rendering accuracy for curved path segments.","dec":"@property(nonatomic) CGFloat flatness"},"lineCapStyle":{"abs":"The shape of the paths end points when stroked.","dec":"@property(nonatomic) CGLineCap lineCapStyle"},"lineJoinStyle":{"abs":"The shape of the joints between connected segments of a stroked path.","dec":"@property(nonatomic) CGLineJoin lineJoinStyle"},"lineWidth":{"abs":"The line width of the path.","dec":"@property(nonatomic) CGFloat lineWidth"},"miterLimit":{"abs":"The limiting value that helps avoid spikes at junctions between connected line segments.","dec":"@property(nonatomic) CGFloat miterLimit"},"usesEvenOddFillRule":{"abs":"A Boolean indicating whether the even-odd winding rule is in use for drawing paths.","dec":"@property(nonatomic) BOOL usesEvenOddFillRule"}},"[+]":{"bezierPath":{"abs":"Creates and returns a new UIBezierPath object.","dec":"+ (UIBezierPath *)bezierPath"},"bezierPathWithArcCenter:radius:startAngle:endAngle:clockwise:":{"abs":"Creates and returns a new UIBezierPath object initialized with an arc of a circle.","dec":"+ (UIBezierPath *)bezierPathWithArcCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise"},"bezierPathWithCGPath:":{"abs":"Creates and returns a new UIBezierPath object initialized with the contents of a Core Graphics path.","dec":"+ (UIBezierPath *)bezierPathWithCGPath:(CGPathRef)CGPath"},"bezierPathWithOvalInRect:":{"abs":"Creates and returns a new UIBezierPath object initialized with an oval path inscribed in the specified rectangle","dec":"+ (UIBezierPath *)bezierPathWithOvalInRect:(CGRect)rect"},"bezierPathWithRect:":{"abs":"Creates and returns a new UIBezierPath object initialized with a rectangular path.","dec":"+ (UIBezierPath *)bezierPathWithRect:(CGRect)rect"},"bezierPathWithRoundedRect:byRoundingCorners:cornerRadii:":{"abs":"Creates and returns a new UIBezierPath object initialized with a rounded rectangular path.","dec":"+ (UIBezierPath *)bezierPathWithRoundedRect:(CGRect)rect byRoundingCorners:(UIRectCorner)corners cornerRadii:(CGSize)cornerRadii"},"bezierPathWithRoundedRect:cornerRadius:":{"abs":"Creates and returns a new UIBezierPath object initialized with a rounded rectangular path.","dec":"+ (UIBezierPath *)bezierPathWithRoundedRect:(CGRect)rect cornerRadius:(CGFloat)cornerRadius"}},"[-]":{"addArcWithCenter:radius:startAngle:endAngle:clockwise:":{"abs":"Appends an arc to the receiver’s path.","dec":"- (void)addArcWithCenter:(CGPoint)center radius:(CGFloat)radius startAngle:(CGFloat)startAngle endAngle:(CGFloat)endAngle clockwise:(BOOL)clockwise"},"addClip":{"abs":"Intersects the area enclosed by the receiver’s path with the clipping path of the current graphics context and makes the resulting shape the current clipping path.","dec":"- (void)addClip"},"addCurveToPoint:controlPoint1:controlPoint2:":{"abs":"Appends a cubic Bézier curve to the receiver’s path.","dec":"- (void)addCurveToPoint:(CGPoint)endPoint controlPoint1:(CGPoint)controlPoint1 controlPoint2:(CGPoint)controlPoint2"},"addLineToPoint:":{"abs":"Appends a straight line to the receiver’s path.","dec":"- (void)addLineToPoint:(CGPoint)point"},"addQuadCurveToPoint:controlPoint:":{"abs":"Appends a quadratic Bézier curve to the receiver’s path.","dec":"- (void)addQuadCurveToPoint:(CGPoint)endPoint controlPoint:(CGPoint)controlPoint"},"appendPath:":{"abs":"Appends the contents of the specified path object to the receiver’s path.","dec":"- (void)appendPath:(UIBezierPath *)bezierPath"},"applyTransform:":{"abs":"Transforms all points in the path using the specified affine transform matrix.","dec":"- (void)applyTransform:(CGAffineTransform)transform"},"bezierPathByReversingPath":{"abs":"Creates and returns a new bezier path object with the reversed contents of the current path.","dec":"- (UIBezierPath *)bezierPathByReversingPath"},"closePath":{"abs":"Closes the most recently added subpath.","dec":"- (void)closePath"},"containsPoint:":{"abs":"Returns a Boolean value indicating whether the area enclosed by the receiver contains the specified point.","dec":"- (BOOL)containsPoint:(CGPoint)point"},"fill":{"abs":"Paints the region enclosed by the receiver’s path using the current drawing properties.","dec":"- (void)fill"},"fillWithBlendMode:alpha:":{"abs":"Paints the region enclosed by the receiver’s path using the specified blend mode and transparency values.","dec":"- (void)fillWithBlendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha"},"getLineDash:count:phase:":{"abs":"Retrieves the line-stroking pattern for the path.","dec":"- (void)getLineDash:(CGFloat *)pattern count:(NSInteger *)count phase:(CGFloat *)phase"},"moveToPoint:":{"abs":"Moves the receiver’s current point to the specified location.","dec":"- (void)moveToPoint:(CGPoint)point"},"removeAllPoints":{"abs":"Removes all points from the receiver, effectively deleting all subpaths.","dec":"- (void)removeAllPoints"},"setLineDash:count:phase:":{"abs":"Sets the line-stroking pattern for the path.","dec":"- (void)setLineDash:(const CGFloat *)pattern count:(NSInteger)count phase:(CGFloat)phase"},"stroke":{"abs":"Draws a line along the receiver’s path using the current drawing properties.","dec":"- (void)stroke"},"strokeWithBlendMode:alpha:":{"abs":"Draws a line along the receiver’s path using the specified blend mode and transparency values.","dec":"- (void)strokeWithBlendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha"}},"[=]":{"UIRectCornerTopLeft":"","UIRectCornerTopRight":"","UIRectCornerBottomLeft":"","UIRectCornerBottomRight":"","UIRectCornerAllCorners":""}};

ClassRef.UIButton = {"[:]":"UIControl : UIView : UIResponder : NSObject","[.]":{"adjustsImageWhenDisabled":{"abs":"A Boolean value that determines whether the image changes when the button is disabled.","dec":"@property(nonatomic) BOOL adjustsImageWhenDisabled"},"adjustsImageWhenHighlighted":{"abs":"A Boolean value that determines whether the image changes when the button is highlighted.","dec":"@property(nonatomic) BOOL adjustsImageWhenHighlighted"},"buttonType":{"abs":"The button type. (read-only)","dec":"@property(nonatomic, readonly) UIButtonType buttonType"},"contentEdgeInsets":{"abs":"The inset or outset margins for the rectangle surrounding all of the button’s content.","dec":"@property(nonatomic) UIEdgeInsets contentEdgeInsets"},"currentAttributedTitle":{"abs":"The current styled title that is displayed on the button. (read-only)","dec":"@property(nonatomic, readonly, retain) NSAttributedString *currentAttributedTitle"},"currentBackgroundImage":{"abs":"The current background image displayed on the button. (read-only)","dec":"@property(nonatomic, readonly, retain) UIImage *currentBackgroundImage"},"currentImage":{"abs":"The current image displayed on the button. (read-only)","dec":"@property(nonatomic, readonly, retain) UIImage *currentImage"},"currentTitle":{"abs":"The current title that is displayed on the button. (read-only)","dec":"@property(nonatomic, readonly, retain) NSString *currentTitle"},"currentTitleColor":{"abs":"The color used to display the title. (read-only)","dec":"@property(nonatomic, readonly, retain) UIColor *currentTitleColor"},"currentTitleShadowColor":{"abs":"The color of the title’s shadow. (read-only)","dec":"@property(nonatomic, readonly, retain) UIColor *currentTitleShadowColor"},"imageEdgeInsets":{"abs":"The inset or outset margins for the rectangle around the button’s image.","dec":"@property(nonatomic) UIEdgeInsets imageEdgeInsets"},"imageView":{"abs":"The button’s image view. (read-only)","dec":"@property(nonatomic, readonly, retain) UIImageView *imageView"},"reversesTitleShadowWhenHighlighted":{"abs":"A Boolean value that determines whether the title shadow changes when the button is highlighted.","dec":"@property(nonatomic) BOOL reversesTitleShadowWhenHighlighted"},"showsTouchWhenHighlighted":{"abs":"A Boolean value that determines whether tapping the button causes it to glow.","dec":"@property(nonatomic) BOOL showsTouchWhenHighlighted"},"tintColor":{"abs":"The tint color to apply to the button title and image.","dec":"@property(nonatomic, retain) UIColor *tintColor"},"titleEdgeInsets":{"abs":"The inset or outset margins for the rectangle around the button’s title text.","dec":"@property(nonatomic) UIEdgeInsets titleEdgeInsets"},"titleLabel":{"abs":"A view that displays the value of the currentTitle property for a button. (read-only)","dec":"@property(nonatomic, readonly, retain) UILabel *titleLabel"}},"[+]":{"buttonWithType:":{"abs":"Creates and returns a new button of the specified type.","dec":"+ (id)buttonWithType:(UIButtonType)buttonType"}},"[-]":{"attributedTitleForState:":{"abs":"Returns the styled title associated with the specified state.","dec":"- (NSAttributedString *)attributedTitleForState:(UIControlState)state"},"backgroundImageForState:":{"abs":"Returns the background image used for a button state.","dec":"- (UIImage *)backgroundImageForState:(UIControlState)state"},"backgroundRectForBounds:":{"abs":"Returns the rectangle in which the receiver draws its background.","dec":"- (CGRect)backgroundRectForBounds:(CGRect)bounds"},"contentRectForBounds:":{"abs":"Returns the rectangle in which the receiver draws its entire content.","dec":"- (CGRect)contentRectForBounds:(CGRect)bounds"},"imageForState:":{"abs":"Returns the image used for a button state.","dec":"- (UIImage *)imageForState:(UIControlState)state"},"imageRectForContentRect:":{"abs":"Returns the rectangle in which the receiver draws its image.","dec":"- (CGRect)imageRectForContentRect:(CGRect)contentRect"},"setAttributedTitle:forState:":{"abs":"Sets the styled title to use for the specified state.","dec":"- (void)setAttributedTitle:(NSAttributedString *)title forState:(UIControlState)state"},"setBackgroundImage:forState:":{"abs":"Sets the background image to use for the specified button state.","dec":"- (void)setBackgroundImage:(UIImage *)image forState:(UIControlState)state"},"setImage:forState:":{"abs":"Sets the image to use for the specified state.","dec":"- (void)setImage:(UIImage *)image forState:(UIControlState)state"},"setTitle:forState:":{"abs":"Sets the title to use for the specified state.","dec":"- (void)setTitle:(NSString *)title forState:(UIControlState)state"},"setTitleColor:forState:":{"abs":"Sets the color of the title to use for the specified state.","dec":"- (void)setTitleColor:(UIColor *)color forState:(UIControlState)state"},"setTitleShadowColor:forState:":{"abs":"Sets the color of the title shadow to use for the specified state.","dec":"- (void)setTitleShadowColor:(UIColor *)color forState:(UIControlState)state"},"titleColorForState:":{"abs":"Returns the title color used for a state.","dec":"- (UIColor *)titleColorForState:(UIControlState)state"},"titleForState:":{"abs":"Returns the title associated with the specified state.","dec":"- (NSString *)titleForState:(UIControlState)state"},"titleRectForContentRect:":{"abs":"Returns the rectangle in which the receiver draws its title.","dec":"- (CGRect)titleRectForContentRect:(CGRect)contentRect"},"titleShadowColorForState:":{"abs":"Returns the shadow color of the title used for a state.","dec":"- (UIColor *)titleShadowColorForState:(UIControlState)state"}},"[=]":{"UIButtonTypeCustom":"","UIButtonTypeSystem":"","UIButtonTypeDetailDisclosure":"","UIButtonTypeInfoLight":"","UIButtonTypeInfoDark":"","UIButtonTypeContactAdd":"","UIButtonTypeRoundedRect":""}};

ClassRef.UICollectionReusableView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"reuseIdentifier":{"abs":"A string that identifies the purpose of the view. (read-only)","dec":"@property (nonatomic, readonly, copy) NSString *reuseIdentifier"}},"[-]":{"applyLayoutAttributes:":{"abs":"Applies the specified layout attributes to the view.","dec":"- (void)applyLayoutAttributes:(UICollectionViewLayoutAttributes *)layoutAttributes"},"didTransitionFromLayout:toLayout:":{"abs":"Tells your view that the layout object of the collection view changed.","dec":"- (void)didTransitionFromLayout:(UICollectionViewLayout *)oldLayout toLayout:(UICollectionViewLayout *)newLayout"},"prepareForReuse":{"abs":"Performs any clean up necessary to prepare the view for use again.","dec":"- (void)prepareForReuse"},"willTransitionFromLayout:toLayout:":{"abs":"Tells your view that the layout object of the collection view is about to change.","dec":"- (void)willTransitionFromLayout:(UICollectionViewLayout *)oldLayout toLayout:(UICollectionViewLayout *)newLayout"}}};

ClassRef.UICollectionView = {"[:]":"UIScrollView : UIView : UIResponder : NSObject","[.]":{"allowsMultipleSelection":{"abs":"A Boolean value that determines whether users can select more than one item in the collection view.","dec":"@property (nonatomic) BOOL allowsMultipleSelection"},"allowsSelection":{"abs":"A Boolean value that indicates whether users can select items in the collection view.","dec":"@property (nonatomic) BOOL allowsSelection"},"backgroundView":{"abs":"The view that provides the background appearance.","dec":"@property (nonatomic, retain) UIView *backgroundView;"},"collectionViewLayout":{"abs":"The layout used to organize the collected view’s items.","dec":"@property (nonatomic, retain) UICollectionViewLayout *collectionViewLayout;"},"dataSource":{"abs":"The object that provides the data for the collection view.","dec":"@property (nonatomic, assign) id <UICollectionViewDataSource> dataSource;"},"delegate":{"abs":"The object that acts as the delegate of the collection view.","dec":"@property (nonatomic, assign) id <UICollectionViewDelegate> delegate;"}},"[-]":{"cancelInteractiveTransition":{"abs":"Tells the collection view to abort an interactive transition and return to its original layout object.","dec":"- (void)cancelInteractiveTransition"},"cellForItemAtIndexPath:":{"abs":"Returns the visible cell object at the specified index path.","dec":"- (UICollectionViewCell *)cellForItemAtIndexPath:(NSIndexPath *)indexPath"},"deleteItemsAtIndexPaths:":{"abs":"Deletes the items at the specified index paths.","dec":"- (void)deleteItemsAtIndexPaths:(NSArray *)indexPaths"},"deleteSections:":{"abs":"Deletes the sections at the specified indexes.","dec":"- (void)deleteSections:(NSIndexSet *)sections"},"dequeueReusableCellWithReuseIdentifier:forIndexPath:":{"abs":"Returns a reusable cell object located by its identifier","dec":"- (id)dequeueReusableCellWithReuseIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath*)indexPath"},"dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:":{"abs":"Returns a reusable supplementary view located by its identifier and kind.","dec":"- (id)dequeueReusableSupplementaryViewOfKind:(NSString*)elementKind withReuseIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath*)indexPath"},"deselectItemAtIndexPath:animated:":{"abs":"Deselects the item at the specified index.","dec":"- (void)deselectItemAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated"},"finishInteractiveTransition":{"abs":"Tells the collection view to finish an interactive transition by installing the intended target layout.","dec":"- (void)finishInteractiveTransition"},"indexPathForCell:":{"abs":"Returns the index path of the specified cell.","dec":"- (NSIndexPath *)indexPathForCell:(UICollectionViewCell *)cell"},"indexPathForItemAtPoint:":{"abs":"Returns the index path of the item at the specified point in the collection view.","dec":"- (NSIndexPath *)indexPathForItemAtPoint:(CGPoint)point"},"indexPathsForSelectedItems":{"abs":"Returns the index paths for the selected items.","dec":"- (NSArray *)indexPathsForSelectedItems"},"indexPathsForVisibleItems":{"abs":"Returns an array of the visible items in the collection view.","dec":"- (NSArray *)indexPathsForVisibleItems"},"initWithFrame:collectionViewLayout:":{"abs":"Initializes and returns a newly allocated collection view object with the specified frame and layout.","dec":"- (id)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout *)layout"},"insertItemsAtIndexPaths:":{"abs":"Inserts new items at the specified index paths.","dec":"- (void)insertItemsAtIndexPaths:(NSArray *)indexPaths"},"insertSections:":{"abs":"Inserts new sections at the specified indexes.","dec":"- (void)insertSections:(NSIndexSet *)sections"},"layoutAttributesForItemAtIndexPath:":{"abs":"Returns the layout information for the item at the specified index path.","dec":"- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath"},"layoutAttributesForSupplementaryElementOfKind:atIndexPath:":{"abs":"Returns the layout information for the specified supplementary view.","dec":"- (UICollectionViewLayoutAttributes *)layoutAttributesForSupplementaryElementOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath"},"moveItemAtIndexPath:toIndexPath:":{"abs":"Moves an item from one location to another in the collection view.","dec":"- (void)moveItemAtIndexPath:(NSIndexPath *)indexPath toIndexPath:(NSIndexPath *)newIndexPath"},"moveSection:toSection:":{"abs":"Moves a section from one location to another in the collection view.","dec":"- (void)moveSection:(NSInteger)section toSection:(NSInteger)newSection"},"numberOfItemsInSection:":{"abs":"Returns the number of items in the specified section.","dec":"- (NSInteger)numberOfItemsInSection:(NSInteger)section"},"numberOfSections":{"abs":"Returns the number of sections displayed by the collection view.","dec":"- (NSInteger)numberOfSections"},"performBatchUpdates:completion:":{"abs":"Animates multiple insert, delete, reload, and move operations as a group.","dec":"- (void)performBatchUpdates:(void (^)(void))updates completion:(void (^)(BOOL finished))completion"},"registerClass:forCellWithReuseIdentifier:":{"abs":"Register a class for use in creating new collection view cells.","dec":"- (void)registerClass:(Class)cellClass forCellWithReuseIdentifier:(NSString *)identifier"},"registerClass:forSupplementaryViewOfKind:withReuseIdentifier:":{"abs":"Registers a class for use in creating supplementary views for the collection view.","dec":"- (void)registerClass:(Class)viewClass forSupplementaryViewOfKind:(NSString *)elementKind withReuseIdentifier:(NSString *)identifier"},"registerNib:forCellWithReuseIdentifier:":{"abs":"Register a nib file for use in creating new collection view cells.","dec":"- (void)registerNib:(UINib *)nib forCellWithReuseIdentifier:(NSString *)identifier"},"registerNib:forSupplementaryViewOfKind:withReuseIdentifier:":{"abs":"Registers a nib file for use in creating supplementary views for the collection view.","dec":"- (void)registerNib:(UINib *)nib forSupplementaryViewOfKind:(NSString *)kind withReuseIdentifier:(NSString *)identifier"},"reloadData":{"abs":"Reloads all of the data for the collection view.","dec":"- (void)reloadData"},"reloadItemsAtIndexPaths:":{"abs":"Reloads just the items at the specified index paths.","dec":"- (void)reloadItemsAtIndexPaths:(NSArray *)indexPaths"},"reloadSections:":{"abs":"Reloads the data in the specified sections of the collection view.","dec":"- (void)reloadSections:(NSIndexSet *)sections"},"scrollToItemAtIndexPath:atScrollPosition:animated:":{"abs":"Scrolls the collection view contents until the specified item is visible.","dec":"- (void)scrollToItemAtIndexPath:(NSIndexPath *)indexPath atScrollPosition:(UICollectionViewScrollPosition)scrollPosition animated:(BOOL)animated"},"selectItemAtIndexPath:animated:scrollPosition:":{"abs":"Selects the item at the specified index path and optionally scrolls it into view.","dec":"- (void)selectItemAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated scrollPosition:(UICollectionViewScrollPosition)scrollPosition"},"setCollectionViewLayout:animated:":{"abs":"Changes the collection view’s layout and optionally animates the change.","dec":"- (void)setCollectionViewLayout:(UICollectionViewLayout *)layout animated:(BOOL)animated"},"setCollectionViewLayout:animated:completion:":{"abs":"Changes the collection view’s layout and notifies you when the animations complete.","dec":"- (void)setCollectionViewLayout:(UICollectionViewLayout *)layout animated:(BOOL)animated completion:(void (^)(BOOL finished))completion"},"startInteractiveTransitionToCollectionViewLayout:completion:":{"abs":"Changes the collection view’s current layout using an interactive transition effect.","dec":"- (UICollectionViewTransitionLayout *)startInteractiveTransitionToCollectionViewLayout:(UICollectionViewLayout *)layout completion:(UICollectionViewLayoutInteractiveTransitionCompletion) completion"},"visibleCells":{"abs":"Returns an array of visible cells currently displayed by the collection view.","dec":"- (NSArray *)visibleCells"}},"[=]":{"UICollectionViewScrollPositionNone":"","UICollectionViewScrollPositionTop":"","UICollectionViewScrollPositionCenteredVertically":"","UICollectionViewScrollPositionBottom":"","UICollectionViewScrollPositionLeft":"","UICollectionViewScrollPositionCenteredHorizontally":"","UICollectionViewScrollPositionRight":""}};

ClassRef.UICollectionViewCell = {"[:]":"UICollectionReusableView : UIView : UIResponder : NSObject","[.]":{"backgroundView":{"abs":"The view that is displayed behind the cell’s other content.","dec":"@property (nonatomic, retain) UIView *backgroundView"},"contentView":{"abs":"The main view to which you add your cell’s custom content. (read-only)","dec":"@property (nonatomic, readonly) UIView *contentView"},"highlighted":{"abs":"The highlight state of the cell.","dec":"@property (nonatomic, getter=isHighlighted) BOOL highlighted"},"selected":{"abs":"The selection state of the cell.","dec":"@property (nonatomic, getter=isSelected) BOOL selected"},"selectedBackgroundView":{"abs":"The view that is displayed just above the background view when the cell is selected.","dec":"@property (nonatomic, retain) UIView *selectedBackgroundView"}}};

ClassRef.UICollectionViewController = {"[:]":"UIViewController : UIResponder : NSObject","[.]":{"clearsSelectionOnViewWillAppear":{"abs":"A Boolean value indicating if the controller clears the selection when the collection view appears.","dec":"@property (nonatomic) BOOL clearsSelectionOnViewWillAppear"},"collectionView":{"abs":"The collection view object managed by this view controller.","dec":"@property (nonatomic, retain) UICollectionView *collectionView"},"collectionViewLayout":{"abs":"The layout object used to initialize the collection view controller. (read-only)","dec":"@property (nonatomic,readonly) UICollectionViewLayout *collectionViewLayout"},"useLayoutToLayoutNavigationTransitions":{"abs":"A Boolean that indicates whether the collection view controller coordinates with a navigation controller for transitions.","dec":"@property (nonatomic,assign) BOOL useLayoutToLayoutNavigationTransitions"}},"[-]":{"initWithCollectionViewLayout:":{"abs":"Initializes a collection view controller and configures the collection view with the provided layout.","dec":"- (id)initWithCollectionViewLayout:(UICollectionViewLayout *)layout"}}};

ClassRef.UICollectionViewFlowLayout = {"[:]":"UICollectionViewLayout : NSObject","[.]":{"footerReferenceSize":{"abs":"The default sizes to use for section footers.","dec":"@property (nonatomic) CGSize footerReferenceSize;"},"headerReferenceSize":{"abs":"The default sizes to use for section headers.","dec":"@property (nonatomic) CGSize headerReferenceSize;"},"itemSize":{"abs":"The default size to use for cells.","dec":"@property (nonatomic) CGSize itemSize;"},"minimumInteritemSpacing":{"abs":"The minimum spacing to use between items in the same row.","dec":"@property (nonatomic) CGFloat minimumInteritemSpacing;"},"minimumLineSpacing":{"abs":"The minimum spacing to use between lines of items in the grid.","dec":"@property (nonatomic) CGFloat minimumLineSpacing;"},"scrollDirection":{"abs":"The scroll direction of the grid.","dec":"@property (nonatomic) UICollectionViewScrollDirection scrollDirection;"},"sectionInset":{"abs":"The margins used to lay out content in a section","dec":"@property (nonatomic) UIEdgeInsets sectionInset;"}},"[=]":{"UICollectionViewScrollDirectionVertical":"","UICollectionViewScrollDirectionHorizontal":"","UICollectionElementKindSectionHeader":"","UICollectionElementKindSectionFooter":""}};

ClassRef.UICollectionViewFlowLayoutInvalidationContext = {"[:]":"UICollectionViewLayoutInvalidationContext : NSObject","[.]":{"invalidateFlowLayoutAttributes":{"abs":"A Boolean indicating whether to recompute the layout attributes for items and views in the layout.","dec":"@property (nonatomic) BOOL invalidateFlowLayoutAttributes"},"invalidateFlowLayoutDelegateMetrics":{"abs":"A Boolean indicating whether to recompute the size of items and views in the layout.","dec":"@property (nonatomic) BOOL invalidateFlowLayoutDelegateMetrics"}}};

ClassRef.UICollectionViewLayout = {"[:]":"NSObject","[.]":{"collectionView":{"abs":"The collection view object currently using this layout object. (read-only)","dec":"@property (nonatomic, readonly) UICollectionView *collectionView"}},"[+]":{"invalidationContextClass":{"abs":"Returns the class to use when creating an invalidation context for the layout.","dec":"+ (Class)invalidationContextClass"},"layoutAttributesClass":{"abs":"Returns the class to use when creating layout attributes objects.","dec":"+ (Class)layoutAttributesClass"}},"[-]":{"collectionViewContentSize":{"abs":"Returns the width and height of the collection view’s contents.","dec":"- (CGSize)collectionViewContentSize"},"finalizeAnimatedBoundsChange":{"abs":"Cleans up after any animated changes to the view’s bounds or after the insertion or deletion of items.","dec":"- (void)finalizeAnimatedBoundsChange"},"finalizeCollectionViewUpdates":{"abs":"Performs any additional animations or clean up needed during a collection view update.","dec":"- (void)finalizeCollectionViewUpdates"},"finalizeLayoutTransition":{"abs":"Tells the layout object to perform any final steps before the transition animations occur.","dec":"- (void)finalizeLayoutTransition"},"finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:":{"abs":"Returns the final layout information for a decoration view that is about to be removed from the collection view.","dec":"- (UICollectionViewLayoutAttributes *)finalLayoutAttributesForDisappearingDecorationElementOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)elementIndexPath"},"finalLayoutAttributesForDisappearingItemAtIndexPath:":{"abs":"Returns the final layout information for an item that is about to be removed from the collection view.","dec":"- (UICollectionViewLayoutAttributes *)finalLayoutAttributesForDisappearingItemAtIndexPath:(NSIndexPath *)itemIndexPath"},"finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:":{"abs":"Returns the final layout information for a supplementary view that is about to be removed from the collection view.","dec":"- (UICollectionViewLayoutAttributes *)finalLayoutAttributesForDisappearingSupplementaryElementOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)elementIndexPath"},"indexPathsToDeleteForDecorationViewOfKind:":{"abs":"Returns an array of index paths representing the decoration views to remove.","dec":"- (NSArray *)indexPathsToDeleteForDecorationViewOfKind:(NSString *)kind"},"indexPathsToDeleteForSupplementaryViewOfKind:":{"abs":"Returns an array of index paths representing the supplementary views to remove.","dec":"- (NSArray *)indexPathsToDeleteForSupplementaryViewOfKind:(NSString *)kind"},"indexPathsToInsertForDecorationViewOfKind:":{"abs":"Returns an array of index paths representing the decoration views to add.","dec":"- (NSArray *)indexPathsToInsertForDecorationViewOfKind:(NSString *)kind"},"indexPathsToInsertForSupplementaryViewOfKind:":{"abs":"Returns an array of index paths for the supplementary views you want to add to the layout.","dec":"- (NSArray *)indexPathsToInsertForSupplementaryViewOfKind:(NSString *)kind"},"initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:":{"abs":"Returns the starting layout information for a decoration view being inserted into the collection view.","dec":"- (UICollectionViewLayoutAttributes *)initialLayoutAttributesForAppearingDecorationElementOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)elementIndexPath"},"initialLayoutAttributesForAppearingItemAtIndexPath:":{"abs":"Returns the starting layout information for an item being inserted into the collection view.","dec":"- (UICollectionViewLayoutAttributes *)initialLayoutAttributesForAppearingItemAtIndexPath:(NSIndexPath *)itemIndexPath"},"initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:":{"abs":"Returns the starting layout information for a supplementary view being inserted into the collection view.","dec":"- (UICollectionViewLayoutAttributes *)initialLayoutAttributesForAppearingSupplementaryElementOfKind:(NSString *)elementKind atIndexPath:(NSIndexPath *)elementIndexPath"},"invalidateLayout":{"abs":"Invalidates the current layout and triggers a layout update.","dec":"- (void)invalidateLayout"},"invalidateLayoutWithContext:":{"abs":"Invalidates the current layout using the information in the provided context object.","dec":"- (void)invalidateLayoutWithContext:(UICollectionViewLayoutInvalidationContext *)context"},"invalidationContextForBoundsChange:":{"abs":"Returns a context object that defines the portions of the layout that should change when a bounds change occurs.","dec":"- (UICollectionViewLayoutInvalidationContext *)invalidationContextForBoundsChange:(CGRect)newBounds"},"layoutAttributesForDecorationViewOfKind:atIndexPath:":{"abs":"Returns the layout attributes for the specified decoration view.","dec":"- (UICollectionViewLayoutAttributes *)layoutAttributesForDecorationViewOfKind:(NSString*)decorationViewKind atIndexPath:(NSIndexPath *)indexPath"},"layoutAttributesForElementsInRect:":{"abs":"Returns the layout attributes for all of the cells and views in the specified rectangle.","dec":"- (NSArray *)layoutAttributesForElementsInRect:(CGRect)rect"},"layoutAttributesForItemAtIndexPath:":{"abs":"Returns the layout attributes for the item at the specified index path.","dec":"- (UICollectionViewLayoutAttributes *)layoutAttributesForItemAtIndexPath:(NSIndexPath *)indexPath"},"layoutAttributesForSupplementaryViewOfKind:atIndexPath:":{"abs":"Returns the layout attributes for the specified supplementary view.","dec":"- (UICollectionViewLayoutAttributes *)layoutAttributesForSupplementaryViewOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath"},"prepareForAnimatedBoundsChange:":{"abs":"Prepares the layout object for animated changes to the view’s bounds or the insertion or deletion of items.","dec":"- (void)prepareForAnimatedBoundsChange:(CGRect)oldBounds"},"prepareForCollectionViewUpdates:":{"abs":"Notifies the layout object that the contents of the collection view are about to change.","dec":"- (void)prepareForCollectionViewUpdates:(NSArray *)updateItems"},"prepareForTransitionFromLayout:":{"abs":"Tells the layout object to prepare to be installed as the layout for the collection view.","dec":"- (void)prepareForTransitionFromLayout:(UICollectionViewLayout*)oldLayout"},"prepareForTransitionToLayout:":{"abs":"Tells the layout object that it is about to be removed as the layout for the collection view.","dec":"- (void)prepareForTransitionToLayout:(UICollectionViewLayout*)newLayout"},"prepareLayout":{"abs":"Tells the layout object to update the current layout.","dec":"- (void)prepareLayout"},"registerClass:forDecorationViewOfKind:":{"abs":"Registers a class for use in creating decoration views for a collection view.","dec":"- (void)registerClass:(Class)viewClass forDecorationViewOfKind:(NSString *)decorationViewKind"},"registerNib:forDecorationViewOfKind:":{"abs":"Registers a nib file for use in creating decoration views for a collection view.","dec":"- (void)registerNib:(UINib *)nib forDecorationViewOfKind:(NSString *)decorationViewKind"},"shouldInvalidateLayoutForBoundsChange:":{"abs":"Asks the layout object if the new bounds require a layout update.","dec":"- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds"},"targetContentOffsetForProposedContentOffset:":{"abs":"Returns the content offset to use after an animated layout update or change.","dec":"- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset"},"targetContentOffsetForProposedContentOffset:withScrollingVelocity:":{"abs":"Returns the point at which to stop scrolling.","dec":"- (CGPoint)targetContentOffsetForProposedContentOffset:(CGPoint)proposedContentOffset withScrollingVelocity:(CGPoint)velocity"}}};

ClassRef.UICollectionViewLayoutAttributes = {"[:]":"NSObject","[.]":{"alpha":{"abs":"The transparency of the item.","dec":"@property (nonatomic) CGFloat alpha;"},"bounds":{"abs":"The bounds of the item.","dec":"@property (nonatomic) CGRect bounds;"},"center":{"abs":"The center point of the item.","dec":"@property (nonatomic) CGPoint center;"},"frame":{"abs":"The frame rectangle of the item.","dec":"@property (nonatomic) CGRect frame;"},"hidden":{"abs":"Determines whether the item is currently displayed.","dec":"@property (nonatomic, getter=isHidden) BOOL hidden;"},"indexPath":{"abs":"The index path of the item in the collection view.","dec":"@property (nonatomic, retain) NSIndexPath *indexPath;"},"representedElementCategory":{"abs":"The type of the item. (read-only)","dec":"@property (nonatomic, readonly) UICollectionElementCategory representedElementCategory;"},"representedElementKind":{"abs":"The layout-specific identifier for the target view. (read-only)","dec":"@property (nonatomic, readonly) NSString *representedElementKind;"},"size":{"abs":"The size of the item.","dec":"@property (nonatomic) CGSize size;"},"transform":{"abs":"The affine transform of the item","dec":"@property (nonatomic) CGAffineTransform transform"},"transform3D":{"abs":"The 3D transform of the item.","dec":"@property (nonatomic) CATransform3D transform3D;"},"zIndex":{"abs":"Specifies the item’s position on the z axis.","dec":"@property (nonatomic) NSInteger zIndex;"}},"[+]":{"layoutAttributesForCellWithIndexPath:":{"abs":"Creates and returns a layout attributes object that represents a cell with the specified index path.","dec":"+ (instancetype)layoutAttributesForCellWithIndexPath:(NSIndexPath *)indexPath"},"layoutAttributesForDecorationViewOfKind:withIndexPath:":{"abs":"Creates and returns a layout attributes object that represents the specified decoration view.","dec":"+ (instancetype)layoutAttributesForDecorationViewOfKind:(NSString *)decorationViewKind withIndexPath:(NSIndexPath*)indexPath"},"layoutAttributesForSupplementaryViewOfKind:withIndexPath:":{"abs":"Creates and returns a layout attributes object that represents the specified supplementary view.","dec":"+ (instancetype)layoutAttributesForSupplementaryViewOfKind:(NSString *)elementKind withIndexPath:(NSIndexPath *)indexPath"}},"[=]":{"UICollectionElementCategoryCell":"","UICollectionElementCategorySupplementaryView":"","UICollectionElementCategoryDecorationView":""}};

ClassRef.UICollectionViewLayoutInvalidationContext = {"[:]":"NSObject","[.]":{"invalidateDataSourceCounts":{"abs":"A Boolean that indicates whether the layout should ask for new section and item counts. (read-only)","dec":"@property (nonatomic, readonly) BOOL invalidateDataSourceCounts"},"invalidateEverything":{"abs":"A Boolean that indicates that all layout data should be marked as invalid. (read-only)","dec":"@property (nonatomic, readonly) BOOL invalidateEverything"}}};

ClassRef.UICollectionViewTransitionLayout = {"[:]":"UICollectionViewLayout : NSObject","[.]":{"currentLayout":{"abs":"The collection view’s current layout object. (read-only)","dec":"@property (readonly, nonatomic) UICollectionViewLayout *currentLayout;"},"nextLayout":{"abs":"The collection view’s new layout object. (read-only)","dec":"@property (readonly, nonatomic) UICollectionViewLayout *nextLayout;"},"transitionProgress":{"abs":"The completion percentage of the transition.","dec":"@property (assign, nonatomic) CGFloat transitionProgress;"}},"[-]":{"initWithCurrentLayout:nextLayout:":{"abs":"Initializes and returns a transition layout object.","dec":"- (id)initWithCurrentLayout:(UICollectionViewLayout *)currentLayout nextLayout:(UICollectionViewLayout *)newLayout"},"updateValue:forAnimatedKey:":{"abs":"Sets the value for an animatable key.","dec":"- (void)updateValue:(CGFloat)value forAnimatedKey:(NSString *)key"},"valueForAnimatedKey:":{"abs":"Returns the most recently set value for the specified key.","dec":"- (CGFloat)valueForAnimatedKey:(NSString *)key"}}};

ClassRef.UICollectionViewUpdateItem = {"[:]":"NSObject","[.]":{"indexPathAfterUpdate":{"abs":"The index path of the item after the update. (read-only)","dec":"@property (nonatomic, readonly) NSIndexPath *indexPathAfterUpdate"},"indexPathBeforeUpdate":{"abs":"The index path of the item before the update. (read-only)","dec":"@property (nonatomic, readonly) NSIndexPath *indexPathBeforeUpdate"},"updateAction":{"abs":"The action being performed on the item. (read-only)","dec":"@property (nonatomic, readonly) UICollectionUpdateAction updateAction"}},"[=]":{"UICollectionUpdateActionNone":"","UICollectionUpdateActionInsert":"","UICollectionUpdateActionDelete":"","UICollectionUpdateActionReload":"","UICollectionUpdateActionMove":""}};

ClassRef.UICollisionBehavior = {"[:]":"UIDynamicBehavior : NSObject","[.]":{"boundaryIdentifiers":{"abs":"The set of boundary identifiers that you’ve added to the collision behavior. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *boundaryIdentifiers"},"collisionDelegate":{"abs":"The delegate object that you want to respond to collisions for the collision behavior.","dec":"@property(nonatomic, assign, readwrite) id<UICollisionBehaviorDelegate> collisionDelegate"},"collisionMode":{"abs":"The type of edges that participate in collisions for the collision behavior.","dec":"@property(nonatomic, readwrite) UICollisionBehaviorMode collisionMode"},"items":{"abs":"Returns the set of dynamic items you’ve added to the collision behavior. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *items"},"translatesReferenceBoundsIntoBoundary":{"abs":"Specifies whether a boundary based on the reference system is active.","dec":"@property(nonatomic, readwrite) BOOL translatesReferenceBoundsIntoBoundary"}},"[-]":{"addBoundaryWithIdentifier:forPath:":{"abs":"Adds a collision boundary, specified as a Bezier path, to the collision behavior.","dec":"- (void)addBoundaryWithIdentifier:(id<NSCopying>)identifier forPath:(UIBezierPath *)bezierPath"},"addBoundaryWithIdentifier:fromPoint:toPoint:":{"abs":"Adds a collision boundary, specified as a line segment, to the collision behavior.","dec":"- (void)addBoundaryWithIdentifier:(id<NSCopying>)identifier fromPoint:(CGPoint)p1 toPoint:(CGPoint)p2"},"addItem:":{"abs":"Adds a dynamic item to the collision behavior’s item array.","dec":"- (void)addItem:(id<UIDynamicItem>)item"},"boundaryWithIdentifier:":{"abs":"Returns a specified Bezier-path boundary.","dec":"- (UIBezierPath *)boundaryWithIdentifier:(id<NSCopying>)identifier"},"initWithItems:":{"abs":"Initializes a collision behavior with an array of dynamic items.","dec":"- (instancetype)initWithItems:(NSArray *)items"},"removeAllBoundaries":{"abs":"Removes all previously-specified collision boundaries from the collision behavior.","dec":"- (void)removeAllBoundaries"},"removeBoundaryWithIdentifier:":{"abs":"Removes a specific collision boundary from the collision behavior.","dec":"- (void)removeBoundaryWithIdentifier:(id<NSCopying>)identifier"},"removeItem:":{"abs":"Removes a specific dynamic item from the collision behavior.","dec":"- (void)removeItem:(id<UIDynamicItem>)item"},"setTranslatesReferenceBoundsIntoBoundaryWithInsets:":{"abs":"Specifies a collision boundary based on the bounds of the animation reference system, with optional insets.","dec":"- (void)setTranslatesReferenceBoundsIntoBoundaryWithInsets:(UIEdgeInsets)insets"}},"[=]":{"UICollisionBehaviorModeItems":"","UICollisionBehaviorModeBoundaries":"","UICollisionBehaviorModeEverything":""}};

ClassRef.UIColor = {"[:]":"NSObject","[.]":{"CGColor":{"abs":"The Quartz color reference that corresponds to the receiver’s color. (read-only)","dec":"@property(nonatomic, readonly) CGColorRef CGColor"},"CIColor":{"abs":"The Core Image color associated with the receiver. (read-only)","dec":"@property(nonatomic, readonly) CIColor *CIColor"}},"[+]":{"blackColor":{"abs":"Returns a color object whose grayscale value is 0.0 and whose alpha value is 1.0.","dec":"+ (UIColor *)blackColor"},"blueColor":{"abs":"Returns a color object whose RGB values are 0.0, 0.0, and 1.0 and whose alpha value is 1.0.","dec":"+ (UIColor *)blueColor"},"brownColor":{"abs":"Returns a color object whose RGB values are 0.6, 0.4, and 0.2 and whose alpha value is 1.0.","dec":"+ (UIColor *)brownColor"},"clearColor":{"abs":"Returns a color object whose grayscale and alpha values are both 0.0.","dec":"+ (UIColor *)clearColor"},"colorWithCGColor:":{"abs":"Creates and returns a color object using the specified Quartz color reference.","dec":"+ (UIColor *)colorWithCGColor:(CGColorRef)cgColor"},"colorWithCIColor:":{"abs":"Converts a Core Image color object to its UIColor equivalent","dec":"+ (UIColor *)colorWithCIColor:(CIColor *)ciColor"},"colorWithHue:saturation:brightness:alpha:":{"abs":"Creates and returns a color object using the specified opacity and HSB color space component values.","dec":"+ (UIColor *)colorWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha"},"colorWithPatternImage:":{"abs":"Creates and returns a color object using the specified image.","dec":"+ (UIColor *)colorWithPatternImage:(UIImage *)image"},"colorWithRed:green:blue:alpha:":{"abs":"Creates and returns a color object using the specified opacity and RGB component values.","dec":"+ (UIColor *)colorWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha"},"colorWithWhite:alpha:":{"abs":"Creates and returns a color object using the specified opacity and grayscale values.","dec":"+ (UIColor *)colorWithWhite:(CGFloat)white alpha:(CGFloat)alpha"},"cyanColor":{"abs":"Returns a color object whose RGB values are 0.0, 1.0, and 1.0 and whose alpha value is 1.0.","dec":"+ (UIColor *)cyanColor"},"darkGrayColor":{"abs":"Returns a color object whose grayscale value is 1/3 and whose alpha value is 1.0.","dec":"+ (UIColor *)darkGrayColor"},"darkTextColor":{"abs":"Returns the system color used for displaying text on a light background.","dec":"+ (UIColor *)darkTextColor"},"grayColor":{"abs":"Returns a color object whose grayscale value is 0.5 and whose alpha value is 1.0.","dec":"+ (UIColor *)grayColor"},"greenColor":{"abs":"Returns a color object whose RGB values are 0.0, 1.0, and 0.0 and whose alpha value is 1.0.","dec":"+ (UIColor *)greenColor"},"groupTableViewBackgroundColor":{"abs":"Returns the system color used for the background of a grouped table.","dec":"+ (UIColor *)groupTableViewBackgroundColor"},"lightGrayColor":{"abs":"Returns a color object whose grayscale value is 2/3 and whose alpha value is 1.0.","dec":"+ (UIColor *)lightGrayColor"},"lightTextColor":{"abs":"Returns the system color used for displaying text on a dark background.","dec":"+ (UIColor *)lightTextColor"},"magentaColor":{"abs":"Returns a color object whose RGB values are 1.0, 0.0, and 1.0 and whose alpha value is 1.0.","dec":"+ (UIColor *)magentaColor"},"orangeColor":{"abs":"Returns a color object whose RGB values are 1.0, 0.5, and 0.0 and whose alpha value is 1.0.","dec":"+ (UIColor *)orangeColor"},"purpleColor":{"abs":"Returns a color object whose RGB values are 0.5, 0.0, and 0.5 and whose alpha value is 1.0.","dec":"+ (UIColor *)purpleColor"},"redColor":{"abs":"Returns a color object whose RGB values are 1.0, 0.0, and 0.0 and whose alpha value is 1.0.","dec":"+ (UIColor *)redColor"},"whiteColor":{"abs":"Returns a color object whose grayscale value is 1.0 and whose alpha value is 1.0.","dec":"+ (UIColor *)whiteColor"},"yellowColor":{"abs":"Returns a color object whose RGB values are 1.0, 1.0, and 0.0 and whose alpha value is 1.0.","dec":"+ (UIColor *)yellowColor"}},"[-]":{"colorWithAlphaComponent:":{"abs":"Creates and returns a color object that has the same color space and component values as the receiver, but has the specified alpha component.","dec":"- (UIColor *)colorWithAlphaComponent:(CGFloat)alpha"},"getHue:saturation:brightness:alpha:":{"abs":"Returns the components that make up the color in the HSB color space.","dec":"- (BOOL)getHue:(CGFloat *)hue saturation:(CGFloat *)saturation brightness:(CGFloat *)brightness alpha:(CGFloat *)alpha"},"getRed:green:blue:alpha:":{"abs":"Returns the components that make up the color in the RGB color space.","dec":"- (BOOL)getRed:(CGFloat *)red green:(CGFloat *)green blue:(CGFloat *)blue alpha:(CGFloat *)alpha"},"getWhite:alpha:":{"abs":"Returns the grayscale components of the color.","dec":"- (BOOL)getWhite:(CGFloat *)white alpha:(CGFloat *)alpha"},"initWithCGColor:":{"abs":"Initializes and returns a color object using the specified Quartz color reference.","dec":"- (UIColor *)initWithCGColor:(CGColorRef)cgColor"},"initWithCIColor:":{"abs":"Initializes and returns a color object using the specified Core Image color.","dec":"- (UIColor *)initWithCIColor:(CIColor *)ciColor"},"initWithHue:saturation:brightness:alpha:":{"abs":"Initializes and returns a color object using the specified opacity and HSB color space component values.","dec":"- (UIColor *)initWithHue:(CGFloat)hue saturation:(CGFloat)saturation brightness:(CGFloat)brightness alpha:(CGFloat)alpha"},"initWithPatternImage:":{"abs":"Initializes and returns a color object using the specified Quartz color reference.","dec":"- (UIColor *)initWithPatternImage:(UIImage *)image"},"initWithRed:green:blue:alpha:":{"abs":"Initializes and returns a color object using the specified opacity and RGB component values.","dec":"- (UIColor *)initWithRed:(CGFloat)red green:(CGFloat)green blue:(CGFloat)blue alpha:(CGFloat)alpha"},"initWithWhite:alpha:":{"abs":"Initializes and returns a color object using the specified opacity and grayscale values.","dec":"- (UIColor *)initWithWhite:(CGFloat)white alpha:(CGFloat)alpha"},"set":{"abs":"Sets the color of subsequent stroke and fill operations to the color that the receiver represents.","dec":"- (void)set"},"setFill":{"abs":"Sets the color of subsequent fill operations to the color that the receiver represents.","dec":"- (void)setFill"},"setStroke":{"abs":"Sets the color of subsequent stroke operations to the color that the receiver represents.","dec":"- (void)setStroke"}}};

ClassRef.UIControl = {"[:]":"UIView : UIResponder : NSObject","[.]":{"contentHorizontalAlignment":{"abs":"The horizontal alignment of content (text or image) within the receiver.","dec":"@property(nonatomic) UIControlContentHorizontalAlignment contentHorizontalAlignment"},"contentVerticalAlignment":{"abs":"The vertical alignment of content (text or image) within the receiver.","dec":"@property(nonatomic) UIControlContentVerticalAlignment contentVerticalAlignment"},"enabled":{"abs":"A Boolean value that determines whether the receiver is enabled.","dec":"@property(nonatomic, getter=isEnabled) BOOL enabled"},"highlighted":{"abs":"A Boolean value that determines whether the receiver is highlighted.","dec":"@property(nonatomic, getter=isHighlighted) BOOL highlighted"},"selected":{"abs":"A Boolean value that determines the receiver’s selected state.","dec":"@property(nonatomic, getter=isSelected) BOOL selected"},"state":{"abs":"A bitmask value that indicates the state of the receiver. (read-only)","dec":"@property(nonatomic, readonly) UIControlState state"},"touchInside":{"abs":"A Boolean value that indicates whether a touch is inside the bounds of the receiver. (read-only)","dec":"@property(nonatomic, readonly, getter=isTouchInside) BOOL touchInside"},"tracking":{"abs":"A Boolean value that indicates whether the receiver is currently tracking touches related to an event. (read-only)","dec":"@property(nonatomic, readonly, getter=isTracking) BOOL tracking"}},"[-]":{"actionsForTarget:forControlEvent:":{"abs":"Returns the actions that are associated with a target and a particular control event.","dec":"- (NSArray *)actionsForTarget:(id)target forControlEvent:(UIControlEvents)controlEvent"},"addTarget:action:forControlEvents:":{"abs":"Adds a target and action for a particular event (or events) to an internal dispatch table.","dec":"- (void)addTarget:(id)target action:(SEL)action forControlEvents:(UIControlEvents)controlEvents"},"allControlEvents":{"abs":"Returns all control events associated with the receiver.","dec":"- (UIControlEvents)allControlEvents"},"allTargets":{"abs":"Returns all target objects associated with the receiver.","dec":"- (NSSet *)allTargets"},"beginTrackingWithTouch:withEvent:":{"abs":"Sent to the control when a touch related to the given event enters the control’s bounds.","dec":"- (BOOL)beginTrackingWithTouch:(UITouch *)touch withEvent:(UIEvent *)event"},"cancelTrackingWithEvent:":{"abs":"Tells the control to cancel tracking related to the given event.","dec":"- (void)cancelTrackingWithEvent:(UIEvent *)event"},"continueTrackingWithTouch:withEvent:":{"abs":"Sent continuously to the control as it tracks a touch related to the given event within the control’s bounds.","dec":"- (BOOL)continueTrackingWithTouch:(UITouch *)touch withEvent:(UIEvent *)event"},"endTrackingWithTouch:withEvent:":{"abs":"Sent to the control when the last touch for the given event completely ends, telling it to stop tracking.","dec":"- (void)endTrackingWithTouch:(UITouch *)touch withEvent:(UIEvent *)event"},"removeTarget:action:forControlEvents:":{"abs":"Removes a target and action for a particular event (or events) from an internal dispatch table.","dec":"- (void)removeTarget:(id)target action:(SEL)action forControlEvents:(UIControlEvents)controlEvents"},"sendAction:to:forEvent:":{"abs":"In response to a given event, forwards an action message to the application object for dispatching to a target.","dec":"- (void)sendAction:(SEL)action to:(id)target forEvent:(UIEvent *)event"},"sendActionsForControlEvents:":{"abs":"Sends action messages for the given control events.","dec":"- (void)sendActionsForControlEvents:(UIControlEvents)controlEvents"}},"[=]":{"UIControlEventTouchDown":"","UIControlEventTouchDownRepeat":"","UIControlEventTouchDragInside":"","UIControlEventTouchDragOutside":"","UIControlEventTouchDragEnter":"","UIControlEventTouchDragExit":"","UIControlEventTouchUpInside":"","UIControlEventTouchUpOutside":"","UIControlEventTouchCancel":"","UIControlEventValueChanged":"","UIControlEventEditingDidBegin":"","UIControlEventEditingChanged":"","UIControlEventEditingDidEnd":"","UIControlEventEditingDidEndOnExit":"","UIControlEventAllTouchEvents":"","UIControlEventAllEditingEvents":"","UIControlEventApplicationReserved":"","UIControlEventSystemReserved":"","UIControlEventAllEvents":"","UIControlContentVerticalAlignmentCenter":"","UIControlContentVerticalAlignmentTop":"","UIControlContentVerticalAlignmentBottom":"","UIControlContentVerticalAlignmentFill":"","UIControlContentHorizontalAlignmentCenter":"","UIControlContentHorizontalAlignmentLeft":"","UIControlContentHorizontalAlignmentRight":"","UIControlContentHorizontalAlignmentFill":"","UIControlStateNormal":"","UIControlStateHighlighted":"","UIControlStateDisabled":"","UIControlStateSelected":"","UIControlStateApplication":"","UIControlStateReserved":""}};

ClassRef.UIDatePicker = {"[:]":"UIControl : UIView : UIResponder : NSObject","[.]":{"calendar":{"abs":"The calendar to use for the date picker.","dec":"@property(nonatomic, copy) NSCalendar *calendar"},"countDownDuration":{"abs":"The seconds from which the countdown timer counts down.","dec":"@property(nonatomic) NSTimeInterval countDownDuration"},"date":{"abs":"The date displayed by the date picker.","dec":"@property(nonatomic, retain) NSDate *date"},"datePickerMode":{"abs":"The mode of the date picker.","dec":"@property(nonatomic) UIDatePickerMode datePickerMode"},"locale":{"abs":"The locale used by the date picker.","dec":"@property(nonatomic, retain) NSLocale *locale"},"maximumDate":{"abs":"The maximum date that a date picker can show.","dec":"@property(nonatomic, retain) NSDate *maximumDate"},"minimumDate":{"abs":"The minimum date that a date picker can show.","dec":"@property(nonatomic, retain) NSDate *minimumDate"},"minuteInterval":{"abs":"The interval at which the date picker should display minutes.","dec":"@property(nonatomic) NSInteger minuteInterval"},"timeZone":{"abs":"The time zone reflected in the date displayed by the date picker.","dec":"@property(nonatomic, retain) NSTimeZone *timeZone"}},"[-]":{"setDate:animated:":{"abs":"Sets the date to display in the date picker, with an option to animate the setting.","dec":"- (void)setDate:(NSDate *)date animated:(BOOL)animated"}},"[=]":{"UIDatePickerModeTime":"","UIDatePickerModeDate":"","UIDatePickerModeDateAndTime":"","UIDatePickerModeCountDownTimer":""}};

ClassRef.UIDevice = {"[:]":"NSObject","[.]":{"batteryLevel":{"abs":"The battery charge level for the device. (read-only)","dec":"@property(nonatomic, readonly) float batteryLevel"},"batteryMonitoringEnabled":{"abs":"A Boolean value indicating whether battery monitoring is enabled (YES) or not (NO).","dec":"@property(nonatomic, getter=isBatteryMonitoringEnabled) BOOL batteryMonitoringEnabled"},"batteryState":{"abs":"The battery state for the device. (read-only)","dec":"@property(nonatomic, readonly) UIDeviceBatteryState batteryState"},"generatesDeviceOrientationNotifications":{"abs":"A Boolean value that indicates whether the receiver generates orientation notifications (YES) or not (NO). (read-only)","dec":"@property(nonatomic, readonly, getter=isGeneratingDeviceOrientationNotifications) BOOL generatesDeviceOrientationNotifications"},"identifierForVendor":{"abs":"An alphanumeric string that uniquely identifies a device to the app’s vendor. (read-only)","dec":"@property(nonatomic, readonly, retain) NSUUID *identifierForVendor"},"localizedModel":{"abs":"The model of the device as a localized string. (read-only)","dec":"@property(nonatomic, readonly, retain) NSString *localizedModel"},"model":{"abs":"The model of the device. (read-only)","dec":"@property(nonatomic, readonly, retain) NSString *model"},"multitaskingSupported":{"abs":"A Boolean value indicating whether multitasking is supported on the current device. (read-only)","dec":"@property(nonatomic, readonly, getter=isMultitaskingSupported) BOOL multitaskingSupported"},"name":{"abs":"The name identifying the device. (read-only)","dec":"@property(nonatomic, readonly, retain) NSString *name"},"orientation":{"abs":"Returns the physical orientation of the device. (read-only)","dec":"@property(nonatomic, readonly) UIDeviceOrientation orientation"},"proximityMonitoringEnabled":{"abs":"A Boolean value indicating whether proximity monitoring is enabled (YES) or not (NO).","dec":"@property(nonatomic, getter=isProximityMonitoringEnabled) BOOL proximityMonitoringEnabled"},"proximityState":{"abs":"A Boolean value indicating whether the proximity sensor is close to the user (YES) or not (NO). (read-only)","dec":"@property(nonatomic, readonly) BOOL proximityState"},"systemName":{"abs":"The name of the operating system running on the device represented by the receiver. (read-only)","dec":"@property(nonatomic, readonly, retain) NSString *systemName"},"systemVersion":{"abs":"The current version of the operating system. (read-only)","dec":"@property(nonatomic, readonly, retain) NSString *systemVersion"},"userInterfaceIdiom":{"abs":"The style of interface to use on the current device. (read-only)","dec":"@property(nonatomic, readonly) UIUserInterfaceIdiom userInterfaceIdiom"}},"[+]":{"currentDevice":{"abs":"Returns an object representing the current device.","dec":"+ (UIDevice *)currentDevice"}},"[-]":{"beginGeneratingDeviceOrientationNotifications":{"abs":"Begins the generation of notifications of device orientation changes.","dec":"- (void)beginGeneratingDeviceOrientationNotifications"},"endGeneratingDeviceOrientationNotifications":{"abs":"Ends the generation of notifications of device orientation changes.","dec":"- (void)endGeneratingDeviceOrientationNotifications"},"playInputClick":{"abs":"Plays an input click in an enabled input view.","dec":"- (void)playInputClick"}},"[=]":{"UIDeviceBatteryStateUnknown":"","UIDeviceBatteryStateUnplugged":"","UIDeviceBatteryStateCharging":"","UIDeviceBatteryStateFull":"","UIDeviceOrientationUnknown":"","UIDeviceOrientationPortrait":"","UIDeviceOrientationPortraitUpsideDown":"","UIDeviceOrientationLandscapeLeft":"","UIDeviceOrientationLandscapeRight":"","UIDeviceOrientationFaceUp":"","UIDeviceOrientationFaceDown":"","UIUserInterfaceIdiomPhone":"","UIUserInterfaceIdiomPad":""}};

ClassRef.UIDictationPhrase = {"[:]":"NSObject","[.]":{"alternativeInterpretations":{"abs":"An array of alternative textual interpretations of a dictated phrase. (read-only)","dec":"@property (nonatomic, readonly) NSArray *alternativeInterpretations"},"text":{"abs":"The most likely textual interpretation of a dictated phrase. (read-only)","dec":"@property (nonatomic, readonly) NSString *text"}}};

ClassRef.UIDocument = {"[:]":"NSObject","[.]":{"documentState":{"abs":"Returns the current state of the document. (read-only)","dec":"@property(readonly) UIDocumentState documentState"},"fileModificationDate":{"abs":"The date and time the document file was last modified.","dec":"@property(copy) NSDate *fileModificationDate"},"fileType":{"abs":"The file type of the document. (read-only)","dec":"@property(readonly, copy) NSString *fileType"},"fileURL":{"abs":"The file URL with which the document was initialized. (read-only)","dec":"@property(readonly) NSURL *fileURL"},"localizedName":{"abs":"The localized name of the document. (read-only)","dec":"@property(readonly, copy) NSString *localizedName"},"undoManager":{"abs":"The undo manager for the document.","dec":"@property(retain) NSUndoManager *undoManager"}},"[-]":{"autosaveWithCompletionHandler:":{"abs":"Called by UIKit to initiate automatic saving of documents with unsaved changes.","dec":"- (void)autosaveWithCompletionHandler:(void (^)(BOOL success))completionHandler"},"changeCountTokenForSaveOperation:":{"abs":"Overridden to return a change token for a specific save operation.","dec":"- (id)changeCountTokenForSaveOperation:(UIDocumentSaveOperation)saveOperation"},"closeWithCompletionHandler:":{"abs":"Asynchronously closes the document after saving any changes.","dec":"- (void)closeWithCompletionHandler:(void (^)(BOOL success))completionHandler"},"contentsForType:error:":{"abs":"Override this method to return the document data to be saved.","dec":"- (id)contentsForType:(NSString *)typeName error:(NSError **)outError"},"disableEditing":{"abs":"Overridden to disable editing when it is unsafe to make changes to a document.","dec":"- (void)disableEditing"},"enableEditing":{"abs":"Overridden to enable editing when it is safe again to make changes to a document.","dec":"- (void)enableEditing"},"fileAttributesToWriteToURL:forSaveOperation:error:":{"abs":"Returns a dictionary of file attributes to associate with the document file when writing or updating it.","dec":"- (NSDictionary *)fileAttributesToWriteToURL:(NSURL *)url forSaveOperation:(UIDocumentSaveOperation)saveOperation error:(NSError **)outError"},"fileNameExtensionForType:saveOperation:":{"abs":"Returns a file extension to append to the file URL of the document file being written.","dec":"- (NSString *)fileNameExtensionForType:(NSString *)typeName saveOperation:(UIDocumentSaveOperation)saveOperation"},"finishedHandlingError:recovered:":{"abs":"Tells UIKit that you have finished handled the error.","dec":"- (void)finishedHandlingError:(NSError *)error recovered:(BOOL)recovered"},"handleError:userInteractionPermitted:":{"abs":"Called or overridden to handle an error that occurs during an attempt to read, save, or revert a document.","dec":"- (void)handleError:(NSError *)error userInteractionPermitted:(BOOL)userInteractionPermitted"},"hasUnsavedChanges":{"abs":"Returns whether the document has any unsaved changes.","dec":"- (BOOL)hasUnsavedChanges"},"initWithFileURL:":{"abs":"Returns a document object initialized with its file-system location.","dec":"- (id)initWithFileURL:(NSURL *)url"},"loadFromContents:ofType:error:":{"abs":"Override this method to load the document data into the app’s data model.","dec":"- (BOOL)loadFromContents:(id)contents ofType:(NSString *)typeName error:(NSError **)outError"},"openWithCompletionHandler:":{"abs":"Opens a document asynchronously.","dec":"- (void)openWithCompletionHandler:(void (^)(BOOL success))completionHandler"},"performAsynchronousFileAccessUsingBlock:":{"abs":"Schedules a document-reading or document-writing operation on a concurrent background queue.","dec":"- (void)performAsynchronousFileAccessUsingBlock:(void (^)(void))block"},"readFromURL:error:":{"abs":"Reads the document data in a file at a specified location in the application sandbox.","dec":"- (BOOL)readFromURL:(NSURL *)url error:(NSError **)outError"},"revertToContentsOfURL:completionHandler:":{"abs":"Reverts a document to the most recent document data stored on-disk.","dec":"- (void)revertToContentsOfURL:(NSURL *)url completionHandler:(void (^)(BOOL success))completionHandler"},"saveToURL:forSaveOperation:completionHandler:":{"abs":"Saves document data to the specified location in the application sandbox.","dec":"- (void)saveToURL:(NSURL *)url forSaveOperation:(UIDocumentSaveOperation)saveOperation completionHandler:(void (^)(BOOL success))completionHandler"},"savingFileType":{"abs":"Returns the file type to use for saving a document.","dec":"- (NSString *)savingFileType"},"updateChangeCount:":{"abs":"Update the change counter by indicating the kind of change.","dec":"- (void)updateChangeCount:(UIDocumentChangeKind)change"},"updateChangeCountWithToken:forSaveOperation:":{"abs":"Overridden to update the change count with reference to a change-count token passed in by UIKit.","dec":"- (void)updateChangeCountWithToken:(id)changeCountToken forSaveOperation:(UIDocumentSaveOperation)saveOperation"},"userInteractionNoLongerPermittedForError:":{"abs":"Sent when it is no longer safe to proceed without immediately handling the error.","dec":"- (void)userInteractionNoLongerPermittedForError:(NSError *)error"},"writeContents:andAttributes:safelyToURL:forSaveOperation:error:":{"abs":"Ensures that document data is written safely to a specified location in the application sandbox.","dec":"- (BOOL)writeContents:(id)contents andAttributes:(NSDictionary *)additionalFileAttributes safelyToURL:(NSURL *)url forSaveOperation:(UIDocumentSaveOperation)saveOperation error:(NSError **)outError"},"writeContents:toURL:forSaveOperation:originalContentsURL:error:":{"abs":"Writes the document data to disk at the sandbox location indicated by a file URL.","dec":"- (BOOL)writeContents:(id)contents toURL:(NSURL *)url forSaveOperation:(UIDocumentSaveOperation)saveOperation originalContentsURL:(NSURL *)originalContentsURL error:(NSError **)outError"}},"[=]":{"UIDocumentChangeDone":"","UIDocumentChangeUndone":"","UIDocumentChangeRedone":"","UIDocumentChangeCleared":"","UIDocumentSaveForCreating":"","UIDocumentSaveForOverwriting":"","UIDocumentStateNormal":"","UIDocumentStateClosed":"","UIDocumentStateInConflict":"","UIDocumentStateSavingError":"","UIDocumentStateEditingDisabled":""}};

ClassRef.UIDocumentInteractionController = {"[:]":"NSObject","[.]":{"annotation":{"abs":"Custom property list information for the target file.","dec":"@property(nonatomic,retain) id annotation"},"delegate":{"abs":"The delegate you want to receive document interaction notifications.","dec":"@property(nonatomic,assign) id<UIDocumentInteractionControllerDelegate> delegate"},"gestureRecognizers":{"abs":"The system-supplied gesture recognizers for presenting a document interaction controller. (read-only)","dec":"@property(nonatomic,readonly) NSArray *gestureRecognizers"},"icons":{"abs":"The images associated with the target file. (read-only)","dec":"@property(nonatomic,readonly) NSArray *icons"},"name":{"abs":"The name of the target file.","dec":"@property(nonatomic,copy) NSString *name"},"URL":{"abs":"The URL identifying the target file on the local filesystem.","dec":"@property(nonatomic,retain) NSURL *URL"},"UTI":{"abs":"The type of the target file.","dec":"@property(nonatomic,copy) NSString *UTI"}},"[+]":{"interactionControllerWithURL:":{"abs":"Creates and returns a new UIDocumentationInteractionController object initialized with the specified URL.","dec":"+ (UIDocumentInteractionController *)interactionControllerWithURL:(NSURL *)url"}},"[-]":{"dismissMenuAnimated:":{"abs":"Dismisses the currently active menu.","dec":"- (void)dismissMenuAnimated:(BOOL)animated"},"dismissPreviewAnimated:":{"abs":"Dismisses the currently active document preview.","dec":"- (void)dismissPreviewAnimated:(BOOL)animated"},"presentOpenInMenuFromBarButtonItem:animated:":{"abs":"Displays a menu for opening the document and anchors that menu to the specified bar button item.","dec":"- (BOOL)presentOpenInMenuFromBarButtonItem:(UIBarButtonItem *)item animated:(BOOL)animated"},"presentOpenInMenuFromRect:inView:animated:":{"abs":"Displays a menu for opening the document and anchors that menu to the specified view.","dec":"- (BOOL)presentOpenInMenuFromRect:(CGRect)rect inView:(UIView *)view animated:(BOOL)animated"},"presentOptionsMenuFromBarButtonItem:animated:":{"abs":"Displays an options menu and anchors it to the specified bar button item.","dec":"- (BOOL)presentOptionsMenuFromBarButtonItem:(UIBarButtonItem *)item animated:(BOOL)animated"},"presentOptionsMenuFromRect:inView:animated:":{"abs":"Displays an options menu and anchors it to the specified location in the view.","dec":"- (BOOL)presentOptionsMenuFromRect:(CGRect)rect inView:(UIView *)view animated:(BOOL)animated"},"presentPreviewAnimated:":{"abs":"Displays a full-screen preview of the target document.","dec":"- (BOOL)presentPreviewAnimated:(BOOL)animated"}}};

ClassRef.UIDynamicAnimator = {"[:]":"NSObject","[.]":{"behaviors":{"abs":"The dynamic behaviors managed by a dynamic animator. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *behaviors"},"delegate":{"abs":"The delegate for responding to pausing or resumption of animation.","dec":"@property(nonatomic, assign) id<UIDynamicAnimatorDelegate> delegate"},"referenceView":{"abs":"The view that a dynamic animator was initialized with. (read-only)","dec":"@property(nonatomic, readonly) UIView *referenceView"},"running":{"abs":"Returns YES if the dynamic animator is running. (read-only)","dec":"@property(nonatomic, readonly, getter=isRunning) BOOL running"}},"[-]":{"addBehavior:":{"abs":"Adds a dynamic behavior to a dynamic animator.","dec":"- (void)addBehavior:(UIDynamicBehavior *)behavior"},"elapsedTime":{"abs":"Returns the time interval since the dynamic animator started running.","dec":"- (NSTimeInterval)elapsedTime"},"initWithCollectionViewLayout:":{"abs":"Initializes a dynamic animator with a specified collection view layout.","dec":"- (instancetype)initWithCollectionViewLayout:(UICollectionViewLayout *)layout"},"initWithReferenceView:":{"abs":"Initializes a dynamic animator with a specified view as its reference view.","dec":"- (instancetype)initWithReferenceView:(UIView *)view"},"itemsInRect:":{"abs":"Returns the dynamic items, from the animator’s behaviors, that intersect a specified rectangle.","dec":"- (NSArray *)itemsInRect:(CGRect)rect"},"layoutAttributesForCellAtIndexPath:":{"abs":"A convenience method for returning the layout attributes for a collection view cell.","dec":"- (UICollectionViewLayoutAttributes *)layoutAttributesForCellAtIndexPath:(NSIndexPath *)indexPath"},"layoutAttributesForDecorationViewOfKind:atIndexPath:":{"abs":"A convenience method for returning the layout attributes for a collection view decoration view.","dec":"- (UICollectionViewLayoutAttributes *)layoutAttributesForDecorationViewOfKind:(NSString *)decorationViewKind atIndexPath:(NSIndexPath *)indexPath"},"layoutAttributesForSupplementaryViewOfKind:atIndexPath:":{"abs":"A convenience method for returning the layout attributes for a collection view supplementary view.","dec":"- (UICollectionViewLayoutAttributes *)layoutAttributesForSupplementaryViewOfKind:(NSString *)kind atIndexPath:(NSIndexPath *)indexPath"},"removeAllBehaviors":{"abs":"Removes all of the dynamic behaviors from a dynamic animator.","dec":"- (void)removeAllBehaviors"},"removeBehavior:":{"abs":"Removes a specified dynamic behavior from a dynamic animator.","dec":"- (void)removeBehavior:(UIDynamicBehavior *)behavior"},"updateItemUsingCurrentState:":{"abs":"Asks a dynamic animator to read the current state of a dynamic item, replacing the animator’s internal representation of the item’s state.","dec":"- (void)updateItemUsingCurrentState:(id<UIDynamicItem>)item"}}};

ClassRef.UIDynamicBehavior = {"[:]":"NSObject","[.]":{"action":{"abs":"The block you want to execute during dynamic animation.","dec":"@property(nonatomic, copy) void (^action)(void)"},"childBehaviors":{"abs":"Returns the array of dynamic behaviors that are children of a custom dynamic behavior. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *childBehaviors"},"dynamicAnimator":{"abs":"The dynamic animator that the dynamic behavior is associated with. (read-only)","dec":"@property(nonatomic, readonly) UIDynamicAnimator *dynamicAnimator"}},"[-]":{"addChildBehavior:":{"abs":"Adds a dynamic behavior, as a child, to a custom dynamic behavior.","dec":"- (void)addChildBehavior:(UIDynamicBehavior *)behavior"},"removeChildBehavior:":{"abs":"Removes a child dynamic behavior from a custom dynamic behavior.","dec":"- (void)removeChildBehavior:(UIDynamicBehavior *)behavior"},"willMoveToAnimator:":{"abs":"Called when the dynamic behavior is added to, or removed from, a dynamic animator.","dec":"- (void)willMoveToAnimator:(UIDynamicAnimator *)dynamicAnimator"}}};

ClassRef.UIDynamicItemBehavior = {"[:]":"UIDynamicBehavior : NSObject","[.]":{"allowsRotation":{"abs":"Specifies whether rotation is allowed for the behavior’s dynamic items.","dec":"@property(readwrite, nonatomic) BOOL allowsRotation"},"angularResistance":{"abs":"The angular resistance for the behavior’s dynamic items.","dec":"@property(readwrite, nonatomic) CGFloat angularResistance"},"density":{"abs":"The relative mass density of the behavior’s dynamic items.","dec":"@property(readwrite, nonatomic) CGFloat density"},"elasticity":{"abs":"The amount of elasticity applied to collisions for the behavior’s dynamic items.","dec":"@property(readwrite, nonatomic) CGFloat elasticity"},"friction":{"abs":"The linear resistance for the behavior’s dynamic items when two slide against each other.","dec":"@property(readwrite, nonatomic) CGFloat friction"},"items":{"abs":"Returns the set of dynamic items you’ve added to the dynamic item behavior. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *items"},"resistance":{"abs":"The linear resistance for the behavior’s dynamic items, which reduces their linear velocity over time.","dec":"@property(readwrite, nonatomic) CGFloat resistance"}},"[-]":{"addAngularVelocity:forItem:":{"abs":"Adds a specified angular velocity to a dynamic item.","dec":"- (void)addAngularVelocity:(CGFloat)velocity forItem:(id<UIDynamicItem>)item"},"addItem:":{"abs":"Adds a dynamic item to the dynamic item behavior’s item array.","dec":"- (void)addItem:(id<UIDynamicItem>)item"},"addLinearVelocity:forItem:":{"abs":"Adds a specified linear velocity to a dynamic item.","dec":"- (void)addLinearVelocity:(CGPoint)velocity forItem:(id<UIDynamicItem>)item"},"angularVelocityForItem:":{"abs":"Returns the angular velocity for a specified dynamic item.","dec":"- (CGFloat)angularVelocityForItem:(id<UIDynamicItem>)item"},"initWithItems:":{"abs":"Initializes a dynamic item behavior with an array of dynamic items.","dec":"- (instancetype)initWithItems:(NSArray *)items"},"linearVelocityForItem:":{"abs":"Returns the linear velocity for a specified dynamic item.","dec":"- (CGPoint)linearVelocityForItem:(id<UIDynamicItem>)item"},"removeItem:":{"abs":"Removes a specific dynamic item from the dynamic item behavior.","dec":"- (void)removeItem:(id<UIDynamicItem>)item"}}};

ClassRef.UIEvent = {"[:]":"NSObject","[.]":{"subtype":{"abs":"Returns the subtype of the event. (read-only)","dec":"@property(readonly) UIEventSubtype subtype"},"timestamp":{"abs":"The time when the event occurred. (read-only)","dec":"@property(nonatomic, readonly) NSTimeInterval timestamp"},"type":{"abs":"Returns the type of the event. (read-only)","dec":"@property(readonly) UIEventType type"}},"[-]":{"allTouches":{"abs":"Returns all touch objects associated with the receiver.","dec":"- (NSSet *)allTouches"},"touchesForGestureRecognizer:":{"abs":"Returns the touch objects that are being delivered to the specified gesture recognizer.","dec":"- (NSSet *)touchesForGestureRecognizer:(UIGestureRecognizer *)gesture"},"touchesForView:":{"abs":"Returns the touch objects that belong to a given view for the event represented by the receiver.","dec":"- (NSSet *)touchesForView:(UIView *)view"},"touchesForWindow:":{"abs":"Returns the touch objects that belong to a given window for the event represented by the receiver.","dec":"- (NSSet *)touchesForWindow:(UIWindow *)window"}},"[=]":{"UIEventTypeTouches":"","UIEventTypeMotion":"","UIEventTypeRemoteControl":"","UIEventSubtypeNone":"","UIEventSubtypeMotionShake":"","UIEventSubtypeRemoteControlPlay":"","UIEventSubtypeRemoteControlPause":"","UIEventSubtypeRemoteControlStop":"","UIEventSubtypeRemoteControlTogglePlayPause":"","UIEventSubtypeRemoteControlNextTrack":"","UIEventSubtypeRemoteControlPreviousTrack":"","UIEventSubtypeRemoteControlBeginSeekingBackward":"","UIEventSubtypeRemoteControlEndSeekingBackward":"","UIEventSubtypeRemoteControlBeginSeekingForward":"","UIEventSubtypeRemoteControlEndSeekingForward":""}};

ClassRef.UIFont = {"[:]":"NSObject","[.]":{"ascender":{"abs":"The top y-coordinate, offset from the baseline, of the receiver’s longest ascender. (read-only)","dec":"@property(nonatomic, readonly) CGFloat ascender"},"capHeight":{"abs":"The receiver’s cap height information. (read-only)","dec":"@property(nonatomic, readonly) CGFloat capHeight"},"descender":{"abs":"The bottom y-coordinate, offset from the baseline, of the receiver’s longest descender. (read-only)","dec":"@property(nonatomic, readonly) CGFloat descender"},"familyName":{"abs":"The font family name. (read-only)","dec":"@property(nonatomic, readonly, retain) NSString *familyName"},"fontName":{"abs":"The font face name. (read-only)","dec":"@property(nonatomic, readonly, retain) NSString *fontName"},"leading":{"abs":"The receiver’s leading information. (read-only) (Deprecated. Use the lineHeight property instead.)","dec":"@property(nonatomic, readonly) CGFloat leading"},"lineHeight":{"abs":"The height of text lines (measured in points). (read-only)","dec":"@property(nonatomic, readonly) CGFloat lineHeight"},"pointSize":{"abs":"The receiver’s point size, or the effective vertical point size for a font with a nonstandard matrix. (read-only)","dec":"@property(nonatomic, readonly) CGFloat pointSize"},"xHeight":{"abs":"The x-height of the receiver. (read-only)","dec":"@property(nonatomic, readonly) CGFloat xHeight"}},"[+]":{"boldSystemFontOfSize:":{"abs":"Returns the font object used for standard interface items that are rendered in boldface type in the specified size.","dec":"+ (UIFont *)boldSystemFontOfSize:(CGFloat)fontSize"},"buttonFontSize":{"abs":"Returns the standard font size used for buttons.","dec":"+ (CGFloat)buttonFontSize"},"familyNames":{"abs":"Returns an array of font family names available on the system.","dec":"+ (NSArray *)familyNames"},"fontNamesForFamilyName:":{"abs":"Returns an array of font names available in a particular font family.","dec":"+ (NSArray *)fontNamesForFamilyName:(NSString *)familyName"},"fontWithDescriptor:size:":{"abs":"Returns a font matching the given font descriptor.","dec":"+ (UIFont *)fontWithDescriptor:(UIFontDescriptor *)descriptor size:(CGFloat)pointSize"},"fontWithName:size:":{"abs":"Creates and returns a font object for the specified font name and size.","dec":"+ (UIFont *)fontWithName:(NSString *)fontName size:(CGFloat)fontSize"},"italicSystemFontOfSize:":{"abs":"Returns the font object used for standard interface items that are rendered in italic type in the specified size.","dec":"+ (UIFont *)italicSystemFontOfSize:(CGFloat)fontSize"},"labelFontSize":{"abs":"Returns the standard font size used for labels.","dec":"+ (CGFloat)labelFontSize"},"preferredFontForTextStyle:":{"abs":"Returns an instance of the font associated with the text style and scaled appropriately for the user's selected content size category.","dec":"+ (UIFont *)preferredFontForTextStyle:(NSString *)style"},"smallSystemFontSize":{"abs":"Returns the size of the standard small system font.","dec":"+ (CGFloat)smallSystemFontSize"},"systemFontOfSize:":{"abs":"Returns the font object used for standard interface items in the specified size.","dec":"+ (UIFont *)systemFontOfSize:(CGFloat)fontSize"},"systemFontSize":{"abs":"Returns the size of the standard system font.","dec":"+ (CGFloat)systemFontSize"}},"[-]":{"fontDescriptor":{"abs":"Returns a font descriptor that describes the font.","dec":"- (UIFontDescriptor *)fontDescriptor"},"fontWithSize:":{"abs":"Returns a font object that is the same as the receiver but which has the specified size instead.","dec":"- (UIFont *)fontWithSize:(CGFloat)fontSize"}}};

ClassRef.UIFontDescriptor = {"[:]":"NSObject","[.]":{"matrix":{"abs":"The current transform matrix of the receiver. (read-only)","dec":"@property(nonatomic, readonly) CGAffineTransform matrix"},"pointSize":{"abs":"The point size of the receiver. (read-only)","dec":"@property(nonatomic, readonly) CGFloat pointSize"},"postscriptName":{"abs":"The PostScript name of the receiver. (read-only)","dec":"@property(nonatomic, readonly) NSString *postscriptName"},"symbolicTraits":{"abs":"A bit mask that describes the traits of the receiver. (read-only)","dec":"@property(nonatomic, readonly) UIFontDescriptorSymbolicTraits symbolicTraits"}},"[+]":{"fontDescriptorWithFontAttributes:":{"abs":"Returns a font descriptor with a dictionary of attributes.","dec":"+ (UIFontDescriptor *)fontDescriptorWithFontAttributes:(NSDictionary *)attributes"},"fontDescriptorWithName:matrix:":{"abs":"Returns a font descriptor with the UIFontDescriptorNameAttribute and UIFontDescriptorMatrixAttribute dictionary attributes set to the given values.","dec":"+ (UIFontDescriptor *)fontDescriptorWithName:(NSString *)fontName matrix:(CGAffineTransform)matrix"},"fontDescriptorWithName:size:":{"abs":"Returns a font descriptor with the UIFontDescriptorNameAttribute and UIFontDescriptorSizeAttribute dictionary attributes set to the given values.","dec":"+ (UIFontDescriptor *)fontDescriptorWithName:(NSString *)fontName size:(CGFloat)size"},"preferredFontDescriptorWithTextStyle:":{"abs":"Returns a font descriptor containing the given text style and the user's selected content size category.","dec":"+ (UIFontDescriptor *)preferredFontDescriptorWithTextStyle:(NSString *)style"}},"[-]":{"fontAttributes":{"abs":"Returns the receiver’s dictionary of attributes.","dec":"- (NSDictionary *)fontAttributes"},"fontDescriptorByAddingAttributes:":{"abs":"Returns a new font descriptor that is the same as the receiver but with the specified attributes taking precedence over the existing ones.","dec":"- (UIFontDescriptor *)fontDescriptorByAddingAttributes:(NSDictionary *)attributes"},"fontDescriptorWithFace:":{"abs":"Returns a new font descriptor that is the same as the receiver but with the specified face.","dec":"- (UIFontDescriptor *)fontDescriptorWithFace:(NSString *)newFace"},"fontDescriptorWithFamily:":{"abs":"Returns a new font descriptor whose attributes are the same as the receiver but from the specified family.","dec":"- (UIFontDescriptor *)fontDescriptorWithFamily:(NSString *)newFamily"},"fontDescriptorWithMatrix:":{"abs":"Returns a new font descriptor that is the same as the receiver but with the specified matrix.","dec":"- (UIFontDescriptor *)fontDescriptorWithMatrix:(CGAffineTransform)matrix"},"fontDescriptorWithSize:":{"abs":"Returns a new font descriptor that is the same as the receiver but with the specified point size.","dec":"- (UIFontDescriptor *)fontDescriptorWithSize:(CGFloat)newPointSize"},"fontDescriptorWithSymbolicTraits:":{"abs":"Returns a new font descriptor that is the same as the receiver but with the specified symbolic traits taking precedence over the existing ones.","dec":"- (UIFontDescriptor *)fontDescriptorWithSymbolicTraits:(UIFontDescriptorSymbolicTraits)symbolicTraits"},"initWithFontAttributes:":{"abs":"Initializes and returns a new font descriptor with the specified attributes.","dec":"- (instancetype)initWithFontAttributes:(NSDictionary *)attributes"},"matchingFontDescriptorsWithMandatoryKeys:":{"abs":"Returns all the fonts available on the system whose specified attributes match those of the receiver.","dec":"- (NSArray *)matchingFontDescriptorsWithMandatoryKeys:(NSSet *)mandatoryKeys"},"objectForKey:":{"abs":"Returns the font attribute specified by the given key.","dec":"- (id)objectForKey:(NSString *)anAttribute"}},"[=]":{"UIFontTextStyleHeadline":"","UIFontTextStyleSubheadline":"","UIFontTextStyleBody":"","UIFontTextStyleFootnote":"","UIFontTextStyleCaption1":"","UIFontTextStyleCaption2":"","UIFontDescriptorTraitItalic":"","UIFontDescriptorTraitBold":"","UIFontDescriptorTraitExpanded":"","UIFontDescriptorTraitCondensed":"","UIFontDescriptorTraitMonoSpace":"","UIFontDescriptorTraitVertical":"","UIFontDescriptorTraitUIOptimized":"","UIFontDescriptorTraitTightLeading":"","UIFontDescriptorTraitLooseLeading":"","UIFontDescriptorClassMask":"","UIFontDescriptorClassUnknown":"","UIFontDescriptorClassOldStyleSerifs":"","UIFontDescriptorClassTransitionalSerifs":"","UIFontDescriptorClassModernSerifs":"","UIFontDescriptorClassClarendonSerifs":"","UIFontDescriptorClassSlabSerifs":"","UIFontDescriptorClassFreeformSerifs":"","UIFontDescriptorClassSansSerif":"","UIFontDescriptorClassOrnamentals":"","UIFontDescriptorClassScripts":"","UIFontDescriptorClassSymbolic":"","UIFontDescriptorFamilyAttribute":"","UIFontDescriptorNameAttribute":"","UIFontDescriptorFaceAttribute":"","UIFontDescriptorSizeAttribute":"","UIFontDescriptorVisibleNameAttribute":"","UIFontDescriptorMatrixAttribute":"","UIFontDescriptorCharacterSetAttribute":"","UIFontDescriptorCascadeListAttribute":"","UIFontDescriptorTraitsAttribute":"","UIFontDescriptorFixedAdvanceAttribute":"","UIFontDescriptorFeatureSettingsAttribute":"","UIFontDescriptorTextStyleAttribute":"","UIFontSymbolicTrait":"","UIFontWeightTrait":"","UIFontWidthTrait":"","UIFontSlantTrait":"","UIFontFeatureTypeIdentifierKey":"","UIFontFeatureSelectorIdentifierKey":""}};

ClassRef.UIGestureRecognizer = {"[:]":"NSObject","[.]":{"cancelsTouchesInView":{"abs":"A Boolean value affecting whether touches are delivered to a view when a gesture is recognized.","dec":"@property(nonatomic) BOOL cancelsTouchesInView"},"delaysTouchesBegan":{"abs":"A Boolean value determining whether the receiver delays sending touches in a begin phase to its view.","dec":"@property(nonatomic) BOOL delaysTouchesBegan"},"delaysTouchesEnded":{"abs":"A Boolean value determining whether the receiver delays sending touches in a end phase to its view.","dec":"@property(nonatomic) BOOL delaysTouchesEnded"},"delegate":{"abs":"The delegate of the gesture recognizer.","dec":"@property(nonatomic, assign) id<UIGestureRecognizerDelegate> delegate"},"enabled":{"abs":"A Boolean property that indicates whether the gesture recognizer is enabled.","dec":"@property(nonatomic, getter=isEnabled) BOOL enabled"},"state":{"abs":"The current state of the gesture recognizer. (read-only)","dec":"@property(nonatomic, readonly) UIGestureRecognizerState state"},"view":{"abs":"The view the gesture recognizer is attached to. (read-only)","dec":"@property(nonatomic, readonly) UIView *view"}},"[-]":{"addTarget:action:":{"abs":"Adds a target and an action to a gesture-recognizer object.","dec":"- (void)addTarget:(id)target action:(SEL)action"},"canBePreventedByGestureRecognizer:":{"abs":"Overridden to indicate that the specified gesture recognizer can prevent the receiver from recognizing a gesture.","dec":"- (BOOL)canBePreventedByGestureRecognizer:(UIGestureRecognizer *)preventingGestureRecognizer"},"canPreventGestureRecognizer:":{"abs":"Overridden to indicate that the receiver can prevent the specified gesture recognizer from recognizing its gesture.","dec":"- (BOOL)canPreventGestureRecognizer:(UIGestureRecognizer *)preventedGestureRecognizer"},"ignoreTouch:forEvent:":{"abs":"Tells the gesture recognizer to ignore a specific touch of the given event.","dec":"- (void)ignoreTouch:(UITouch *)touch forEvent:(UIEvent *)event"},"initWithTarget:action:":{"abs":"Initializes an allocated gesture-recognizer object with a target and an action selector.","dec":"- (id)initWithTarget:(id)target action:(SEL)action"},"locationInView:":{"abs":"Returns the point computed as the location in a given view of the gesture represented by the receiver.","dec":"- (CGPoint)locationInView:(UIView *)view"},"locationOfTouch:inView:":{"abs":"Returns the location of one of the gesture’s touches in the local coordinate system of a given view.","dec":"- (CGPoint)locationOfTouch:(NSUInteger)touchIndex inView:(UIView *)view"},"numberOfTouches":{"abs":"Returns the number of touches involved in the gesture represented by the receiver.","dec":"- (NSUInteger)numberOfTouches"},"removeTarget:action:":{"abs":"Removes a target and an action from a gesture-recognizer object.","dec":"- (void)removeTarget:(id)target action:(SEL)action"},"requireGestureRecognizerToFail:":{"abs":"Creates a dependency relationship between the receiver and another gesture recognizer.","dec":"- (void)requireGestureRecognizerToFail:(UIGestureRecognizer *)otherGestureRecognizer"},"reset":{"abs":"Overridden to reset internal state when a gesture recognition attempt completes.","dec":"- (void)reset"},"shouldBeRequiredToFailByGestureRecognizer:":{"abs":"Overridden to indicate that the receiver should be required to fail by the specified gesture recognizer.","dec":"- (BOOL)shouldBeRequiredToFailByGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer"},"shouldRequireFailureOfGestureRecognizer:":{"abs":"Overridden to indicate that the receiver requires the specified gesture recognizer to fail.","dec":"- (BOOL)shouldRequireFailureOfGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer"},"touchesBegan:withEvent:":{"abs":"Sent to the receiver when one or more fingers touch down in the associated view.","dec":"- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event"},"touchesCancelled:withEvent:":{"abs":"Sent to the receiver when a system event (such as a low-memory warning) cancels a touch event.","dec":"- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event"},"touchesEnded:withEvent:":{"abs":"Sent to the receiver when one or more fingers lift from the associated view.","dec":"- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event"},"touchesMoved:withEvent:":{"abs":"Sent to the receiver when one or more fingers move in the associated view.","dec":"- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event"}},"[=]":{"UIGestureRecognizerStatePossible":"","UIGestureRecognizerStateBegan":"","UIGestureRecognizerStateChanged":"","UIGestureRecognizerStateEnded":"","UIGestureRecognizerStateCancelled":"","UIGestureRecognizerStateFailed":"","UIGestureRecognizerStateRecognized":""}};

ClassRef.UIGravityBehavior = {"[:]":"UIDynamicBehavior : NSObject","[.]":{"angle":{"abs":"The angle, in radians, of the gravity vector for the behavior.","dec":"@property(readwrite, nonatomic) CGFloat angle"},"gravityDirection":{"abs":"The direction for the gravity behavior’s gravity vector, expressed as an (x, y) pair.","dec":"@property(readwrite, nonatomic) CGVector gravityDirection"},"items":{"abs":"Returns the set of dynamic items you’ve added to the gravity behavior. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *items"},"magnitude":{"abs":"The magnitude of the gravity vector for the gravity behavior.","dec":"@property(readwrite, nonatomic) CGFloat magnitude"}},"[-]":{"addItem:":{"abs":"Adds a dynamic item to the gravity behavior’s item array.","dec":"- (void)addItem:(id<UIDynamicItem>)item"},"initWithItems:":{"abs":"Initializes a gravity behavior with an array of dynamic items.","dec":"- (instancetype)initWithItems:(NSArray *)items"},"removeItem:":{"abs":"Removes a specific dynamic item from the gravity behavior.","dec":"- (void)removeItem:(id<UIDynamicItem>)item"},"setAngle:magnitude:":{"abs":"Sets the angle and magnitude of the gravity vector for the behavior.","dec":"- (void)setAngle:(CGFloat)angle magnitude:(CGFloat)magnitude"}}};

ClassRef.UIImage = {"[:]":"NSObject","[.]":{"alignmentRectInsets":{"abs":"The alignment metadata used to position the image during layout. (read-only)","dec":"@property(nonatomic, readonly) UIEdgeInsets alignmentRectInsets"},"capInsets":{"abs":"The end-cap insets. (read-only)","dec":"@property(nonatomic, readonly) UIEdgeInsets capInsets"},"CGImage":{"abs":"The underlying Quartz image data. (read-only)","dec":"@property(nonatomic, readonly) CGImageRef CGImage"},"CIImage":{"abs":"The underlying Core Image data. (read-only)","dec":"@property(nonatomic, readonly) CIImage *CIImage"},"duration":{"abs":"Returns the time interval used to display an animated image. (read-only)","dec":"@property(nonatomic, readonly) NSTimeInterval duration"},"imageOrientation":{"abs":"The orientation of the receiver’s image. (read-only)","dec":"@property(nonatomic, readonly) UIImageOrientation imageOrientation"},"images":{"abs":"For an animated image, this property holds the complete array of UIImage objects that make up the animation. (read-only)","dec":"@property(nonatomic, readonly) NSArray *images"},"renderingMode":{"abs":"Determines how an image is rendered. (read-only)","dec":"@property(nonatomic, readonly) UIImageRenderingMode renderingMode"},"resizingMode":{"abs":"The resizing mode of the image. (read-only)","dec":"@property(nonatomic, readonly) UIImageResizingMode resizingMode"},"scale":{"abs":"The scale factor of the image. (read-only)","dec":"@property(nonatomic, readonly) CGFloat scale"},"size":{"abs":"The dimensions of the image, taking orientation into account. (read-only)","dec":"@property(nonatomic, readonly) CGSize size"}},"[+]":{"animatedImageNamed:duration:":{"abs":"Creates and returns an animated image.","dec":"+ (UIImage *)animatedImageNamed:(NSString *)name duration:(NSTimeInterval)duration"},"animatedImageWithImages:duration:":{"abs":"Creates and returns an animated image from an existing set of images.","dec":"+ (UIImage *)animatedImageWithImages:(NSArray *)images duration:(NSTimeInterval)duration"},"animatedResizableImageNamed:capInsets:duration:":{"abs":"Creates and returns an animated image with end caps.","dec":"+ (UIImage *)animatedResizableImageNamed:(NSString *)name capInsets:(UIEdgeInsets)capInsets duration:(NSTimeInterval)duration"},"animatedResizableImageNamed:capInsets:resizingMode:duration:":{"abs":"Creates and returns an animated image with end caps and a specific resizing mode.","dec":"+ (UIImage *)animatedResizableImageNamed:(NSString *)name capInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode duration:(NSTimeInterval)duration"},"imageNamed:":{"abs":"Returns the image object associated with the specified filename.","dec":"+ (UIImage *)imageNamed:(NSString *)name"},"imageWithCGImage:":{"abs":"Creates and returns an image object representing the specified Quartz image.","dec":"+ (UIImage *)imageWithCGImage:(CGImageRef)cgImage"},"imageWithCGImage:scale:orientation:":{"abs":"Creates and returns an image object with the specified scale and orientation factors.","dec":"+ (UIImage *)imageWithCGImage:(CGImageRef)imageRef scale:(CGFloat)scale orientation:(UIImageOrientation)orientation"},"imageWithCIImage:":{"abs":"Creates and returns an image object that contains a Core Image object.","dec":"+ (UIImage *)imageWithCIImage:(CIImage *)ciImage"},"imageWithCIImage:scale:orientation:":{"abs":"Creates and returns an image object based on a Core Image object and the specified attributes.","dec":"+ (UIImage *)imageWithCIImage:(CIImage *)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation"},"imageWithContentsOfFile:":{"abs":"Creates and returns an image object by loading the image data from the file at the specified path.","dec":"+ (UIImage *)imageWithContentsOfFile:(NSString *)path"},"imageWithData:":{"abs":"Creates and returns an image object that uses the specified image data.","dec":"+ (UIImage *)imageWithData:(NSData *)data"},"imageWithData:scale:":{"abs":"Creates and returns an image object that uses the specified image data and scale factor.","dec":"+ (UIImage *)imageWithData:(NSData *)data scale:(CGFloat)scale"}},"[-]":{"drawAsPatternInRect:":{"abs":"Draws a tiled Quartz pattern using the receiver’s contents as the tile pattern.","dec":"- (void)drawAsPatternInRect:(CGRect)rect"},"drawAtPoint:":{"abs":"Draws the image at the specified point in the current context.","dec":"- (void)drawAtPoint:(CGPoint)point"},"drawAtPoint:blendMode:alpha:":{"abs":"Draws the entire image at the specified point using the custom compositing options.","dec":"- (void)drawAtPoint:(CGPoint)point blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha"},"drawInRect:":{"abs":"Draws the entire image in the specified rectangle, scaling it as needed to fit.","dec":"- (void)drawInRect:(CGRect)rect"},"drawInRect:blendMode:alpha:":{"abs":"Draws the entire image in the specified rectangle and using the specified compositing options.","dec":"- (void)drawInRect:(CGRect)rect blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha"},"imageWithAlignmentRectInsets:":{"abs":"Returns a new version of the image that uses the specified alignment insets.","dec":"- (UIImage *)imageWithAlignmentRectInsets:(UIEdgeInsets)alignmentInsets"},"imageWithRenderingMode:":{"abs":"Creates and returns a new image object with the specified rendering mode.","dec":"- (UIImage *)imageWithRenderingMode:(UIImageRenderingMode)renderingMode"},"initWithCGImage:":{"abs":"Initializes and returns the image object with the specified Quartz image reference.","dec":"- (id)initWithCGImage:(CGImageRef)CGImage"},"initWithCGImage:scale:orientation:":{"abs":"Initializes and returns an image object with the specified scale and orientation factors","dec":"- (id)initWithCGImage:(CGImageRef)imageRef scale:(CGFloat)scale orientation:(UIImageOrientation)orientation"},"initWithCIImage:":{"abs":"Initializes and returns an image object with the specified Core Image object.","dec":"- (id)initWithCIImage:(CIImage *)ciImage"},"initWithCIImage:scale:orientation:":{"abs":"Initializes and returns an image object with the specified Core Image object and properties.","dec":"- (id)initWithCIImage:(CIImage *)ciImage scale:(CGFloat)scale orientation:(UIImageOrientation)orientation"},"initWithContentsOfFile:":{"abs":"Initializes and returns the image object with the contents of the specified file.","dec":"- (id)initWithContentsOfFile:(NSString *)path"},"initWithData:":{"abs":"Initializes and returns the image object with the specified data.","dec":"- (id)initWithData:(NSData *)data"},"initWithData:scale:":{"abs":"Initializes and returns the image object with the specified data and scale factor.","dec":"- (id)initWithData:(NSData *)data scale:(CGFloat)scale"},"resizableImageWithCapInsets:":{"abs":"Creates and returns a new image object with the specified cap insets.","dec":"- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets"},"resizableImageWithCapInsets:resizingMode:":{"abs":"Creates and returns a new image object with the specified cap insets and options.","dec":"- (UIImage *)resizableImageWithCapInsets:(UIEdgeInsets)capInsets resizingMode:(UIImageResizingMode)resizingMode"}},"[=]":{"UIImageOrientationUp":"","UIImageOrientationDown":"","UIImageOrientationLeft":"","UIImageOrientationRight":"","UIImageOrientationUpMirrored":"","UIImageOrientationDownMirrored":"","UIImageOrientationLeftMirrored":"","UIImageOrientationRightMirrored":"","UIImageResizingModeTile":"","UIImageResizingModeStretch":"","UIImageRenderingModeAutomatic":"","UIImageRenderingModeAlwaysOriginal":"","UIImageRenderingModeAlwaysTemplate":""}};

ClassRef.UIImagePickerController = {"[:]":"UINavigationController : UIViewController : UIResponder : NSObject","[.]":{"allowsEditing":{"abs":"A Boolean value indicating whether the user is allowed to edit a selected still image or movie.","dec":"@property (nonatomic) BOOL allowsEditing"},"cameraCaptureMode":{"abs":"The capture mode used by the camera.","dec":"@property (nonatomic) UIImagePickerControllerCameraCaptureMode cameraCaptureMode"},"cameraDevice":{"abs":"The camera used by the image picker controller.","dec":"@property (nonatomic) UIImagePickerControllerCameraDevice cameraDevice"},"cameraFlashMode":{"abs":"The flash mode used by the active camera.","dec":"@property (nonatomic) UIImagePickerControllerCameraFlashMode cameraFlashMode"},"cameraOverlayView":{"abs":"The custom view to display on top of the default image picker interface.","dec":"@property (nonatomic, retain) UIView *cameraOverlayView"},"cameraViewTransform":{"abs":"The transform to apply to the camera’s preview image.","dec":"@property (nonatomic) CGAffineTransform cameraViewTransform"},"delegate":{"abs":"The image picker’s delegate object.","dec":"@property (nonatomic, assign) id<UINavigationControllerDelegate, UIImagePickerControllerDelegate> delegate"},"mediaTypes":{"abs":"An array indicating the media types to be accessed by the media picker controller.","dec":"@property (nonatomic, copy) NSArray *mediaTypes"},"showsCameraControls":{"abs":"Indicates whether the image picker displays the default camera controls.","dec":"@property (nonatomic) BOOL showsCameraControls"},"sourceType":{"abs":"The type of picker interface to be displayed by the controller.","dec":"@property (nonatomic) UIImagePickerControllerSourceType sourceType"},"videoMaximumDuration":{"abs":"The maximum duration, in seconds, for a video recording.","dec":"@property (nonatomic) NSTimeInterval videoMaximumDuration"},"videoQuality":{"abs":"The video recording and transcoding quality.","dec":"@property (nonatomic) UIImagePickerControllerQualityType videoQuality"}},"[+]":{"availableCaptureModesForCameraDevice:":{"abs":"Returns an array of NSNumber objects indicating the capture modes supported by a given camera device.","dec":"+ (NSArray *)availableCaptureModesForCameraDevice:(UIImagePickerControllerCameraDevice)cameraDevice"},"availableMediaTypesForSourceType:":{"abs":"Returns an array of the available media types for the specified source type.","dec":"+ (NSArray *)availableMediaTypesForSourceType:(UIImagePickerControllerSourceType)sourceType"},"isCameraDeviceAvailable:":{"abs":"Returns a Boolean value that indicates whether a given camera is available.","dec":"+ (BOOL)isCameraDeviceAvailable:(UIImagePickerControllerCameraDevice)cameraDevice"},"isFlashAvailableForCameraDevice:":{"abs":"Indicates whether a given camera has flash illumination capability.","dec":"+ (BOOL)isFlashAvailableForCameraDevice:(UIImagePickerControllerCameraDevice)cameraDevice"},"isSourceTypeAvailable:":{"abs":"Returns a Boolean value indicating whether the device supports picking media using the specified source type.","dec":"+ (BOOL)isSourceTypeAvailable:(UIImagePickerControllerSourceType)sourceType"}},"[-]":{"startVideoCapture":{"abs":"Starts video capture using the camera specified by the UIImagePickerControllerCameraDevice property.","dec":"- (BOOL)startVideoCapture"},"stopVideoCapture":{"abs":"Stops video capture.","dec":"- (void)stopVideoCapture"},"takePicture":{"abs":"Captures a still image using the camera.","dec":"- (void)takePicture"}},"[=]":{"UIImagePickerControllerSourceTypePhotoLibrary":"","UIImagePickerControllerSourceTypeCamera":"","UIImagePickerControllerSourceTypeSavedPhotosAlbum":"","UIImagePickerControllerQualityTypeHigh":"","UIImagePickerControllerQualityType640x480":"","UIImagePickerControllerQualityTypeMedium":"","UIImagePickerControllerQualityTypeLow":"","UIImagePickerControllerQualityTypeIFrame1280x720":"","UIImagePickerControllerQualityTypeIFrame960x540":"","UIImagePickerControllerCameraDeviceRear":"","UIImagePickerControllerCameraDeviceFront":"","UIImagePickerControllerCameraCaptureModePhoto":"","UIImagePickerControllerCameraCaptureModeVideo":"","UIImagePickerControllerCameraFlashModeOff":"","UIImagePickerControllerCameraFlashModeAuto":"","UIImagePickerControllerCameraFlashModeOn":""}};

ClassRef.UIImageView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"animationDuration":{"abs":"The amount of time it takes to go through one cycle of the images.","dec":"@property(nonatomic) NSTimeInterval animationDuration"},"animationImages":{"abs":"An array of UIImage objects to use for an animation.","dec":"@property(nonatomic, copy) NSArray *animationImages"},"animationRepeatCount":{"abs":"Specifies the number of times to repeat the animation.","dec":"@property(nonatomic) NSInteger animationRepeatCount"},"highlighted":{"abs":"A Boolean value that determines whether the image is highlighted.","dec":"@property(nonatomic, getter=isHighlighted) BOOL highlighted"},"highlightedAnimationImages":{"abs":"An array of UIImage objects to use for an animation when the view is highlighted.","dec":"@property(nonatomic, copy) NSArray *highlightedAnimationImages"},"highlightedImage":{"abs":"The highlighted image displayed in the image view.","dec":"@property(nonatomic, retain) UIImage *highlightedImage"},"image":{"abs":"The image displayed in the image view.","dec":"@property(nonatomic, retain) UIImage *image"},"tintColor":{"abs":"A color used to tint template images in the view hierarchy.","dec":"@property(nonatomic, retain) UIColor *tintColor"},"userInteractionEnabled":{"abs":"A Boolean value that determines whether user events are ignored and removed from the event queue.","dec":"@property(nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled"}},"[-]":{"initWithImage:":{"abs":"Returns an image view initialized with the specified image.","dec":"- (id)initWithImage:(UIImage *)image"},"initWithImage:highlightedImage:":{"abs":"Returns an image view initialized with the specified regular and highlighted images.","dec":"- (id)initWithImage:(UIImage *)image highlightedImage:(UIImage *)highlightedImage"},"isAnimating":{"abs":"Returns a Boolean value indicating whether the animation is running.","dec":"- (BOOL)isAnimating"},"startAnimating":{"abs":"Starts animating the images in the receiver.","dec":"- (void)startAnimating"},"stopAnimating":{"abs":"Stops animating the images in the receiver.","dec":"- (void)stopAnimating"}}};

ClassRef.UIInputView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"inputViewStyle":{"abs":"The style applied to the content of the view. (read-only)","dec":"@property (nonatomic, readonly) UIInputViewStyle inputViewStyle"}},"[-]":{"initWithFrame:inputViewStyle:":{"abs":"Initializes and returns an input view using the specified style information.","dec":"- (id)initWithFrame:(CGRect)frame inputViewStyle:(UIInputViewStyle)inputViewStyle"}},"[=]":{"UIInputViewStyleDefault":"","UIInputViewStyleKeyboard":""}};

ClassRef.UIInterpolatingMotionEffect = {"[:]":"UIMotionEffect : NSObject","[.]":{"keyPath":{"abs":"The key path you want to modify on the view. (read-only)","dec":"@property (readonly, nonatomic) NSString *keyPath;"},"maximumRelativeValue":{"abs":"The value that maps to the maximum viewer offset.","dec":"@property (retain, nonatomic) id maximumRelativeValue;"},"minimumRelativeValue":{"abs":"The value that maps to the minimum viewer offset.","dec":"@property (retain, nonatomic) id minimumRelativeValue;"},"type":{"abs":"The tilt direction to monitor. (read-only)","dec":"@property (readonly, nonatomic) UIInterpolatingMotionEffectType type;"}},"[-]":{"initWithKeyPath:type:":{"abs":"Initializes and returns an interpolating motion effect object configured for the specific tilt direction.","dec":"- (instancetype)initWithKeyPath:(NSString *)keyPath type:(UIInterpolatingMotionEffectType)type"}},"[=]":{"UIInterpolatingMotionEffectTypeTiltAlongHorizontalAxis":"","UIInterpolatingMotionEffectTypeTiltAlongVerticalAxis":""}};

ClassRef.UIKeyCommand = {"[:]":"NSObject","[.]":{"input":{"abs":"The string of characters corresponding to the keys that must be pressed to match this key command. (read-only)","dec":"@property(nonatomic, readonly) NSString *input"},"modifierFlags":{"abs":"The bit mask of modifier flags that must be pressed to match this key command. (read-only)","dec":"@property(nonatomic, readonly) UIKeyModifierFlags modifierFlags"}},"[+]":{"keyCommandWithInput:modifierFlags:action:":{"abs":"Creates and returns a new key command object that matches the specified input.","dec":"+ (UIKeyCommand *)keyCommandWithInput:(NSString *)input modifierFlags:(UIKeyModifierFlags)modifierFlags action:(SEL)action"}},"[=]":{"UIKeyModifierAlphaShift":"","UIKeyModifierShift":"","UIKeyModifierControl":"","UIKeyModifierAlternate":"","UIKeyModifierCommand":"","UIKeyModifierNumericPad":"","UIKeyInputUpArrow":"","UIKeyInputDownArrow":"","UIKeyInputLeftArrow":"","UIKeyInputRightArrow":"","UIKeyInputEscape":""}};

ClassRef.UILabel = {"[:]":"UIView : UIResponder : NSObject","[.]":{"adjustsFontSizeToFitWidth":{"abs":"A Boolean value indicating whether the font size should be reduced in order to fit the title string into the label’s bounding rectangle.","dec":"@property(nonatomic) BOOL adjustsFontSizeToFitWidth"},"attributedText":{"abs":"The styled text displayed by the label.","dec":"@property(nonatomic,copy) NSAttributedString *attributedText"},"baselineAdjustment":{"abs":"Controls how text baselines are adjusted when text needs to shrink to fit in the label.","dec":"@property(nonatomic) UIBaselineAdjustment baselineAdjustment"},"enabled":{"abs":"The enabled state to use when drawing the label’s text.","dec":"@property(nonatomic, getter=isEnabled) BOOL enabled"},"font":{"abs":"The font of the text.","dec":"@property(nonatomic, retain) UIFont *font"},"highlighted":{"abs":"A Boolean value indicating whether the receiver should be drawn with a highlight.","dec":"@property(nonatomic, getter=isHighlighted) BOOL highlighted"},"highlightedTextColor":{"abs":"The highlight color applied to the label’s text.","dec":"@property(nonatomic, retain) UIColor *highlightedTextColor"},"lineBreakMode":{"abs":"The technique to use for wrapping and truncating the label’s text.","dec":"@property(nonatomic) NSLineBreakMode lineBreakMode"},"minimumScaleFactor":{"abs":"The minimum scale factor supported for the label’s text.","dec":"@property(nonatomic) CGFloat minimumScaleFactor"},"numberOfLines":{"abs":"The maximum number of lines to use for rendering text.","dec":"@property(nonatomic) NSInteger numberOfLines"},"preferredMaxLayoutWidth":{"abs":"The preferred maximum width (in points) for a multiline label.","dec":"@property(nonatomic) CGFloat preferredMaxLayoutWidth"},"shadowColor":{"abs":"The shadow color of the text.","dec":"@property(nonatomic, retain) UIColor *shadowColor"},"shadowOffset":{"abs":"The shadow offset (measured in points) for the text.","dec":"@property(nonatomic) CGSize shadowOffset"},"text":{"abs":"The text displayed by the label.","dec":"@property(nonatomic, copy) NSString *text"},"textAlignment":{"abs":"The technique to use for aligning the text.","dec":"@property(nonatomic) NSTextAlignment textAlignment"},"textColor":{"abs":"The color of the text.","dec":"@property(nonatomic, retain) UIColor *textColor"},"userInteractionEnabled":{"abs":"A Boolean value that determines whether user events are ignored and removed from the event queue.","dec":"@property(nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled"}},"[-]":{"drawTextInRect:":{"abs":"Draws the receiver’s text (or its shadow) in the specified rectangle.","dec":"- (void)drawTextInRect:(CGRect)rect"},"textRectForBounds:limitedToNumberOfLines:":{"abs":"Returns the drawing rectangle for the label’s text.","dec":"- (CGRect)textRectForBounds:(CGRect)bounds limitedToNumberOfLines:(NSInteger)numberOfLines"}}};

ClassRef.UILocalizedIndexedCollation = {"[:]":"NSObject","[.]":{"sectionIndexTitles":{"abs":"Returns the list of section-index titles for the table view (read-only)","dec":"@property(nonatomic, readonly) NSArray *sectionIndexTitles"},"sectionTitles":{"abs":"Returns the list of section titles for the table view. (read-only)","dec":"@property(nonatomic, readonly) NSArray *sectionTitles"}},"[+]":{"currentCollation":{"abs":"Returns a indexed-collation instance for the current table view.","dec":"+ (id)currentCollation"}},"[-]":{"sectionForObject:collationStringSelector:":{"abs":"Returns an integer identifying the section in which a model object belongs.","dec":"- (NSInteger)sectionForObject:(id)object collationStringSelector:(SEL)selector"},"sectionForSectionIndexTitleAtIndex:":{"abs":"Returns the section that the table view should scroll to for the given index title.","dec":"- (NSInteger)sectionForSectionIndexTitleAtIndex:(NSInteger)indexTitleIndex"},"sortedArrayFromArray:collationStringSelector:":{"abs":"Sorts the objects within a section by their localized titles.","dec":"- (NSArray *)sortedArrayFromArray:(NSArray *)array collationStringSelector:(SEL)selector"}}};

ClassRef.UILocalNotification = {"[:]":"NSObject","[.]":{"alertAction":{"abs":"The title of the action button or slider.","dec":"@property(nonatomic, copy) NSString *alertAction"},"alertBody":{"abs":"The message displayed in the notification alert.","dec":"@property(nonatomic, copy) NSString *alertBody"},"alertLaunchImage":{"abs":"Identifies the image used as the launch image when the user taps (or slides) the action button (or slider).","dec":"@property(nonatomic,copy) NSString *alertLaunchImage"},"applicationIconBadgeNumber":{"abs":"The number to display as the application’s icon badge.","dec":"@property(nonatomic) NSInteger applicationIconBadgeNumber"},"fireDate":{"abs":"The date and time when the system should deliver the notification.","dec":"@property(nonatomic, copy) NSDate *fireDate"},"hasAction":{"abs":"A Boolean value that controls whether the notification shows or hides the alert action.","dec":"@property(nonatomic) BOOL hasAction"},"repeatCalendar":{"abs":"The calendar the system should refer to when it reschedules a repeating notification.","dec":"@property(nonatomic, copy) NSCalendar *repeatCalendar"},"repeatInterval":{"abs":"The calendar interval at which to reschedule the notification.","dec":"@property(nonatomic) NSCalendarUnit repeatInterval"},"soundName":{"abs":"The name of the file containing the sound to play when an alert is displayed.","dec":"@property(nonatomic, copy) NSString *soundName"},"timeZone":{"abs":"The time zone of the notification’s fire date.","dec":"@property(nonatomic, copy) NSTimeZone *timeZone"},"userInfo":{"abs":"A dictionary for passing custom information to the notified application.","dec":"@property(nonatomic, copy) NSDictionary *userInfo"}},"[=]":{"UILocalNotificationDefaultSoundName":""}};

ClassRef.UILongPressGestureRecognizer = {"[:]":"UIGestureRecognizer : NSObject","[.]":{"allowableMovement":{"abs":"The maximum movement of the fingers on the view before the gesture fails.","dec":"@property(nonatomic) CGFloat allowableMovement"},"minimumPressDuration":{"abs":"The minimum period fingers must press on the view for the gesture to be recognized.","dec":"@property(nonatomic) CFTimeInterval minimumPressDuration"},"numberOfTapsRequired":{"abs":"The number of taps on the view required for the gesture to be recognized.","dec":"@property (nonatomic) NSUInteger numberOfTapsRequired"},"numberOfTouchesRequired":{"abs":"The number of fingers that must be pressed on the view for the gesture to be recognized.","dec":"@property(nonatomic) NSInteger numberOfTouchesRequired"}}};

ClassRef.UIManagedDocument = {"[:]":"UIDocument : NSObject","[.]":{"managedObjectContext":{"abs":"The document’s managed object context. (read-only)","dec":"@property(nonatomic, retain, readonly) NSManagedObjectContext *managedObjectContext"},"managedObjectModel":{"abs":"The document’s managed object model. (read-only)","dec":"@property(nonatomic, retain, readonly) NSManagedObjectModel *managedObjectModel"},"modelConfiguration":{"abs":"A model configuration name to be passed when configuring the persistent store.","dec":"@property(nonatomic, copy) NSString *modelConfiguration"},"persistentStoreOptions":{"abs":"Options used when creating the document’s persistent store.","dec":"@property(nonatomic, copy) NSDictionary *persistentStoreOptions"}},"[+]":{"persistentStoreName":{"abs":"Returns the name for the persistent store file inside the document’s file package.","dec":"+ (NSString *)persistentStoreName"}},"[-]":{"additionalContentForURL:error:":{"abs":"Handles writing non-Core Data content to the additional content directory in the document’s file package.","dec":"- (id)additionalContentForURL:(NSURL *)absoluteURL error:(NSError **)error"},"configurePersistentStoreCoordinatorForURL:ofType:modelConfiguration:storeOptions:error:":{"abs":"Creates or loads the document’s persistent store.","dec":"- (BOOL)configurePersistentStoreCoordinatorForURL:(NSURL *)storeURL ofType:(NSString *)fileType modelConfiguration:(NSString *)configuration storeOptions:(NSDictionary *)storeOptions error:(NSError **)error"},"persistentStoreTypeForFileType:":{"abs":"Returns the Core Data store type for a given document file type.","dec":"- (NSString *)persistentStoreTypeForFileType:(NSString *)fileType"},"readAdditionalContentFromURL:error:":{"abs":"Handles reading non-Core Data content in the additional content directory in the document’s file package.","dec":"- (BOOL)readAdditionalContentFromURL:(NSURL *)absoluteURL error:(NSError **)error"},"writeAdditionalContent:toURL:originalContentsURL:error:":{"abs":"Handles writing non-Core Data content to the document’s file package.","dec":"- (BOOL)writeAdditionalContent:(id)content toURL:(NSURL *)absoluteURL originalContentsURL:(NSURL *)absoluteOriginalContentsURL error:(NSError **)error"}}};

ClassRef.UIMarkupTextPrintFormatter = {"[:]":"UIPrintFormatter : NSObject","[.]":{"markupText":{"abs":"The HTML markup text for the print formatter.","dec":"@property(nonatomic, copy) NSString *markupText"}},"[-]":{"initWithMarkupText:":{"abs":"Returns a markup-text print formatter initialized with an HTML string.","dec":"- (id)initWithMarkupText:(NSString *)markupText"}}};

ClassRef.UIMenuController = {"[:]":"NSObject","[.]":{"arrowDirection":{"abs":"The direction the arrow of the editing menu is pointing.","dec":"@property UIMenuControllerArrowDirection arrowDirection"},"menuFrame":{"abs":"Returns the frame of the editing menu. (read-only)","dec":"@property(nonatomic, readonly) CGRect menuFrame"},"menuItems":{"abs":"The custom menu items for the editing menu.","dec":"@property(copy) NSArray *menuItems"},"menuVisible":{"abs":"The visibility of the editing menu.","dec":"@property(nonatomic, getter=isMenuVisible) BOOL menuVisible"}},"[+]":{"sharedMenuController":{"abs":"Returns the menu controller.","dec":"+ (UIMenuController *)sharedMenuController"}},"[-]":{"setMenuVisible:animated:":{"abs":"Shows or hides the editing menu, optionally animating the action.","dec":"- (void)setMenuVisible:(BOOL)menuVisible animated:(BOOL)animated"},"setTargetRect:inView:":{"abs":"Sets the area in a view above or below which the editing menu is positioned.","dec":"- (void)setTargetRect:(CGRect)targetRect inView:(UIView *)targetView"},"update":{"abs":"Updates the appearance and enabled state of menu commands.","dec":"- (void)update"}},"[=]":{"UIMenuControllerArrowDefault":"","UIMenuControllerArrowUp":"","UIMenuControllerArrowDown":"","UIMenuControllerArrowLeft":"","UIMenuControllerArrowRight":""}};

ClassRef.UIMenuItem = {"[:]":"NSObject","[.]":{"action":{"abs":"A selector identifying the method of the responder object to invoke for handling of the menu command.","dec":"@property SEL action"},"title":{"abs":"The title of the menu item.","dec":"@property(copy) NSString *title"}},"[-]":{"initWithTitle:action:":{"abs":"Creates and returns a menu-item object initialized with the given title and action.","dec":"- (id)initWithTitle:(NSString *)title action:(SEL)action"}}};

ClassRef.UIMotionEffect = {"[:]":"NSObject","[-]":{"keyPathsAndRelativeValuesForViewerOffset:":{"abs":"For a given set of offset values, returns the view properties (and corresponding values) to update.","dec":"- (NSDictionary *)keyPathsAndRelativeValuesForViewerOffset:(UIOffset)viewerOffset"}}};

ClassRef.UIMotionEffectGroup = {"[:]":"UIMotionEffect : NSObject","[.]":{"motionEffects":{"abs":"An array of motion effect objects to apply as a group to the view.","dec":"@property (copy, nonatomic) NSArray *motionEffects;"}}};

ClassRef.UINavigationBar = {"[:]":"UIView : UIResponder : NSObject","[.]":{"backIndicatorImage":{"abs":"The image shown beside the back button.","dec":"@property(nonatomic, retain) UIImage *backIndicatorImage"},"backIndicatorTransitionMaskImage":{"abs":"The image used as a mask for content during push and pop transitions.","dec":"@property(nonatomic, retain) UIImage *backIndicatorTransitionMaskImage"},"backItem":{"abs":"The navigation item that is immediately below the topmost item on navigation bar’s stack. (read-only)","dec":"@property(nonatomic, readonly, retain) UINavigationItem *backItem"},"barStyle":{"abs":"The navigation bar style that specifies its appearance.","dec":"@property(nonatomic, assign) UIBarStyle barStyle"},"barTintColor":{"abs":"The tint color to apply to the navigation bar background.","dec":"@property(nonatomic, retain) UIColor *barTintColor"},"delegate":{"abs":"The navigation bar’s delegate object.","dec":"@property(nonatomic, assign) id delegate"},"items":{"abs":"An array of navigation items managed by the navigation bar.","dec":"@property(nonatomic, copy) NSArray *items"},"shadowImage":{"abs":"The shadow image to be used for the navigation bar.","dec":"@property(nonatomic, retain) UIImage *shadowImage"},"tintColor":{"abs":"The tint color to apply to the navigation items and bar button items.","dec":"@property(nonatomic, retain) UIColor *tintColor"},"titleTextAttributes":{"abs":"Display attributes for the bar’s title text.","dec":"@property(nonatomic, copy) NSDictionary *titleTextAttributes"},"topItem":{"abs":"The navigation item at the top of the navigation bar’s stack. (read-only)","dec":"@property(nonatomic, readonly, retain) UINavigationItem *topItem"},"translucent":{"abs":"A Boolean value indicating whether the navigation bar is translucent (YES) or not (NO).","dec":"@property(nonatomic, assign, getter=isTranslucent) BOOL translucent"}},"[-]":{"backgroundImageForBarMetrics:":{"abs":"Returns the background image for given bar metrics.","dec":"- (UIImage *)backgroundImageForBarMetrics:(UIBarMetrics)barMetrics"},"backgroundImageForBarPosition:barMetrics:":{"abs":"Returns the background image to use for a given bar position and set of metrics.","dec":"- (UIImage *)backgroundImageForBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics"},"popNavigationItemAnimated:":{"abs":"Pops the top item from the receiver’s stack and updates the navigation bar.","dec":"- (UINavigationItem *)popNavigationItemAnimated:(BOOL)animated"},"pushNavigationItem:animated:":{"abs":"Pushes the given navigation item onto the receiver’s stack and updates the navigation bar.","dec":"- (void)pushNavigationItem:(UINavigationItem *)item animated:(BOOL)animated"},"setBackgroundImage:forBarMetrics:":{"abs":"Sets the background image for given bar metrics.","dec":"- (void)setBackgroundImage:(UIImage *)backgroundImage forBarMetrics:(UIBarMetrics)barMetrics"},"setBackgroundImage:forBarPosition:barMetrics:":{"abs":"Sets the background image to use for a given bar position and set of metrics.","dec":"- (void)setBackgroundImage:(UIImage *)backgroundImage forBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics"},"setItems:animated:":{"abs":"Replaces the navigation items currently managed by the navigation bar with the specified items.","dec":"- (void)setItems:(NSArray *)items animated:(BOOL)animated"},"setTitleVerticalPositionAdjustment:forBarMetrics:":{"abs":"Sets the title’s vertical position adjustment for given bar metrics.","dec":"- (void)setTitleVerticalPositionAdjustment:(CGFloat)adjustment forBarMetrics:(UIBarMetrics)barMetrics"},"titleVerticalPositionAdjustmentForBarMetrics:":{"abs":"Returns the title’s vertical position adjustment for given bar metrics.","dec":"- (CGFloat)titleVerticalPositionAdjustmentForBarMetrics:(UIBarMetrics)barMetrics"}}};

ClassRef.UINavigationController = {"[:]":"UIViewController : UIResponder : NSObject","[.]":{"delegate":{"abs":"The delegate of the navigation controller object.","dec":"@property(nonatomic, assign) id<UINavigationControllerDelegate> delegate"},"interactivePopGestureRecognizer":{"abs":"The gesture recognizer responsible for popping the top view controller off the navigation stack. (read-only)","dec":"@property(nonatomic, readonly) UIGestureRecognizer *interactivePopGestureRecognizer"},"navigationBar":{"abs":"The navigation bar managed by the navigation controller. (read-only)","dec":"@property(nonatomic, readonly) UINavigationBar *navigationBar"},"navigationBarHidden":{"abs":"A Boolean value that indicates whether the navigation bar is hidden.","dec":"@property(nonatomic, getter=isNavigationBarHidden) BOOL navigationBarHidden"},"toolbar":{"abs":"The custom toolbar associated with the navigation controller. (read-only)","dec":"@property(nonatomic,readonly) UIToolbar *toolbar"},"toolbarHidden":{"abs":"A Boolean indicating whether the navigation controller’s built-in toolbar is visible.","dec":"@property(nonatomic,getter=isToolbarHidden) BOOL toolbarHidden"},"topViewController":{"abs":"The view controller at the top of the navigation stack. (read-only)","dec":"@property(nonatomic, readonly, retain) UIViewController *topViewController"},"viewControllers":{"abs":"The view controllers currently on the navigation stack.","dec":"@property(nonatomic, copy) NSArray *viewControllers"},"visibleViewController":{"abs":"The view controller associated with the currently visible view in the navigation interface. (read-only)","dec":"@property(nonatomic, readonly, retain) UIViewController *visibleViewController"}},"[-]":{"initWithNavigationBarClass:toolbarClass:":{"abs":"Initializes and returns a newly created navigation controller that uses your custom bar subclasses.","dec":"- (instancetype)initWithNavigationBarClass:(Class)navigationBarClass toolbarClass:(Class)toolbarClass"},"initWithRootViewController:":{"abs":"Initializes and returns a newly created navigation controller.","dec":"- (id)initWithRootViewController:(UIViewController *)rootViewController"},"popToRootViewControllerAnimated:":{"abs":"Pops all the view controllers on the stack except the root view controller and updates the display.","dec":"- (NSArray *)popToRootViewControllerAnimated:(BOOL)animated"},"popToViewController:animated:":{"abs":"Pops view controllers until the specified view controller is at the top of the navigation stack.","dec":"- (NSArray *)popToViewController:(UIViewController *)viewController animated:(BOOL)animated"},"popViewControllerAnimated:":{"abs":"Pops the top view controller from the navigation stack and updates the display.","dec":"- (UIViewController *)popViewControllerAnimated:(BOOL)animated"},"pushViewController:animated:":{"abs":"Pushes a view controller onto the receiver’s stack and updates the display.","dec":"- (void)pushViewController:(UIViewController *)viewController animated:(BOOL)animated"},"setNavigationBarHidden:animated:":{"abs":"Sets whether the navigation bar is hidden.","dec":"- (void)setNavigationBarHidden:(BOOL)hidden animated:(BOOL)animated"},"setToolbarHidden:animated:":{"abs":"Changes the visibility of the navigation controller’s built-in toolbar.","dec":"- (void)setToolbarHidden:(BOOL)hidden animated:(BOOL)animated"},"setViewControllers:animated:":{"abs":"Replaces the view controllers currently managed by the navigation controller with the specified items.","dec":"- (void)setViewControllers:(NSArray *)viewControllers animated:(BOOL)animated"}},"[=]":{"UINavigationControllerHideShowBarDuration":""}};

ClassRef.UINavigationItem = {"[:]":"NSObject","[.]":{"backBarButtonItem":{"abs":"The bar button item to use when a back button is needed on the navigation bar.","dec":"@property(nonatomic, retain) UIBarButtonItem *backBarButtonItem"},"hidesBackButton":{"abs":"A Boolean value that determines whether the back button is hidden.","dec":"@property(nonatomic, assign) BOOL hidesBackButton"},"leftBarButtonItem":{"abs":"A custom bar button item displayed on the left of the navigation bar when the receiver is the top navigation item.","dec":"@property(nonatomic, retain) UIBarButtonItem *leftBarButtonItem"},"leftBarButtonItems":{"abs":"An array of custom bar button items to display on the left side of the navigation bar when the receiver is the top navigation item.","dec":"@property(nonatomic, copy) NSArray *leftBarButtonItems"},"leftItemsSupplementBackButton":{"abs":"A Boolean value indicating whether the left items are displayed in addition to the back button.","dec":"@property BOOL leftItemsSupplementBackButton"},"prompt":{"abs":"A single line of text displayed at the top of the navigation bar.","dec":"@property(nonatomic, copy) NSString *prompt"},"rightBarButtonItem":{"abs":"A custom bar button item displayed on the right of the navigation bar when the receiver is the top navigation item.","dec":"@property(nonatomic, retain) UIBarButtonItem *rightBarButtonItem"},"rightBarButtonItems":{"abs":"An array of custom bar button items to display on the right side of the navigation bar when the receiver is the top navigation item.","dec":"@property(nonatomic, copy) NSArray *rightBarButtonItems"},"title":{"abs":"The navigation item’s title displayed in the center of the navigation bar.","dec":"@property(nonatomic, copy) NSString *title"},"titleView":{"abs":"A custom view displayed in the center of the navigation bar when the receiver is the top item.","dec":"@property(nonatomic, retain) UIView *titleView"}},"[-]":{"initWithTitle:":{"abs":"Returns a navigation item initialized with the specified title.","dec":"- (id)initWithTitle:(NSString *)title"},"setHidesBackButton:animated:":{"abs":"Sets whether the back button is hidden, optionally animating the transition.","dec":"- (void)setHidesBackButton:(BOOL)hidesBackButton animated:(BOOL)animated"},"setLeftBarButtonItem:animated:":{"abs":"Sets the custom bar button item, optionally animating the transition to the new item.","dec":"- (void)setLeftBarButtonItem:(UIBarButtonItem *)item animated:(BOOL)animated"},"setLeftBarButtonItems:animated:":{"abs":"Sets the left bar button items, optionally animating the transition to the new items.","dec":"- (void)setLeftBarButtonItems:(NSArray *)items animated:(BOOL)animated"},"setRightBarButtonItem:animated:":{"abs":"Sets the custom bar button item, optionally animating the transition to the view.","dec":"- (void)setRightBarButtonItem:(UIBarButtonItem *)item animated:(BOOL)animated"},"setRightBarButtonItems:animated:":{"abs":"Sets the right bar button items, optionally animating the transition to the new items.","dec":"- (void)setRightBarButtonItems:(NSArray *)items animated:(BOOL)animated"}}};

ClassRef.UINib = {"[:]":"NSObject","[+]":{"nibWithData:bundle:":{"abs":"Creates an UINib object from nib data stored in memory.","dec":"+ (UINib *)nibWithData:(NSData *)data bundle:(NSBundle *)bundleOrNil"},"nibWithNibName:bundle:":{"abs":"Returns an UINib object initialized to the nib file in the specified bundle.","dec":"+ (UINib *)nibWithNibName:(NSString *)name bundle:(NSBundle *)bundleOrNil"}},"[-]":{"instantiateWithOwner:options:":{"abs":"Unarchives and instantiates the in-memory contents of the receiver’s nib file, creating a distinct object tree and set of top level objects.","dec":"- (NSArray *)instantiateWithOwner:(id)ownerOrNil options:(NSDictionary *)optionsOrNil"}}};

ClassRef.UIPageControl = {"[:]":"UIControl : UIView : UIResponder : NSObject","[.]":{"currentPage":{"abs":"The current page, shown by the receiver as a white dot.","dec":"@property(nonatomic) NSInteger currentPage"},"currentPageIndicatorTintColor":{"abs":"The tint color to be used for the current page indicator.","dec":"@property(nonatomic,retain) UIColor *currentPageIndicatorTintColor"},"defersCurrentPageDisplay":{"abs":"A Boolean value that controls when the current page is displayed.","dec":"@property(nonatomic) BOOL defersCurrentPageDisplay"},"hidesForSinglePage":{"abs":"A Boolean value that controls whether the page control is hidden when there is only one page.","dec":"@property(nonatomic) BOOL hidesForSinglePage"},"numberOfPages":{"abs":"The number of pages the receiver shows (as dots).","dec":"@property(nonatomic) NSInteger numberOfPages"},"pageIndicatorTintColor":{"abs":"The tint color to be used for the page indicator.","dec":"@property(nonatomic,retain) UIColor *pageIndicatorTintColor"}},"[-]":{"sizeForNumberOfPages:":{"abs":"Returns the size the receiver’s bounds should be to accommodate the given number of pages.","dec":"- (CGSize)sizeForNumberOfPages:(NSInteger)pageCount"},"updateCurrentPageDisplay":{"abs":"Updates the page indicator to the current page.","dec":"- (void)updateCurrentPageDisplay"}}};

ClassRef.UIPageViewController = {"[:]":"UIViewController : UIResponder : NSObject","[.]":{"dataSource":{"abs":"The object that provides view controllers.","dec":"@property(nonatomic, assign) id<UIPageViewControllerDataSource> dataSource"},"delegate":{"abs":"The delegate object.","dec":"@property(nonatomic, assign) id<UIPageViewControllerDelegate> delegate"},"doubleSided":{"abs":"A Boolean value that indicates whether content appears on the back of pages.","dec":"@property(nonatomic, getter=isDoubleSided) BOOL doubleSided"},"gestureRecognizers":{"abs":"An array of UIGestureRecognizer objects that are configured to handle user interaction. (read-only)","dec":"@property(nonatomic, readonly) NSArray *gestureRecognizers"},"navigationOrientation":{"abs":"The direction along which navigation occurs. (read-only)","dec":"@property(nonatomic, readonly) UIPageViewControllerNavigationOrientation navigationOrientation"},"spineLocation":{"abs":"The location of the spine. (read-only)","dec":"@property(nonatomic, readonly) UIPageViewControllerSpineLocation spineLocation"},"transitionStyle":{"abs":"The style used to transition between view controllers. (read-only)","dec":"@property(nonatomic, readonly) UIPageViewControllerTransitionStyle transitionStyle"},"viewControllers":{"abs":"The view controllers displayed by the page view controller. (read-only)","dec":"@property(nonatomic, readonly) NSArray *viewControllers"}},"[-]":{"initWithTransitionStyle:navigationOrientation:options:":{"abs":"Initializes a newly created page view controller.","dec":"- (id)initWithTransitionStyle:(UIPageViewControllerTransitionStyle)style navigationOrientation:(UIPageViewControllerNavigationOrientation)navigationOrientation options:(NSDictionary *)options"},"setViewControllers:direction:animated:completion:":{"abs":"Sets the view controllers to be displayed.","dec":"- (void)setViewControllers:(NSArray *)viewControllers direction:(UIPageViewControllerNavigationDirection)direction animated:(BOOL)animated completion:(void (^)(BOOL finished))completion"}},"[=]":{"UIPageViewControllerNavigationOrientationHorizontal":"","UIPageViewControllerNavigationOrientationVertical":"","UIPageViewControllerNavigationDirectionForward":"","UIPageViewControllerNavigationDirectionReverse":"","UIPageViewControllerTransitionStylePageCurl":"","UIPageViewControllerTransitionStyleScroll":"","UIPageViewControllerOptionSpineLocationKey":"","UIPageViewControllerOptionInterPageSpacingKey":"","UIPageViewControllerSpineLocationNone":"","UIPageViewControllerSpineLocationMin":"","UIPageViewControllerSpineLocationMid":"","UIPageViewControllerSpineLocationMax":""}};

ClassRef.UIPanGestureRecognizer = {"[:]":"UIGestureRecognizer : NSObject","[.]":{"maximumNumberOfTouches":{"abs":"The maximum number of fingers that can be touching the view for this gesture to be recognized.","dec":"@property(nonatomic) NSUInteger maximumNumberOfTouches"},"minimumNumberOfTouches":{"abs":"The minimum number of fingers that can be touching the view for this gesture to be recognized.","dec":"@property(nonatomic) NSUInteger minimumNumberOfTouches"}},"[-]":{"setTranslation:inView:":{"abs":"Sets the translation value in the coordinate system of the specified view.","dec":"- (void)setTranslation:(CGPoint)translation inView:(UIView *)view"},"translationInView:":{"abs":"The translation of the pan gesture in the coordinate system of the specified view.","dec":"- (CGPoint)translationInView:(UIView *)view"},"velocityInView:":{"abs":"The velocity of the pan gesture in the coordinate system of the specified view.","dec":"- (CGPoint)velocityInView:(UIView *)view"}}};

ClassRef.UIPasteboard = {"[:]":"NSObject","[.]":{"changeCount":{"abs":"The number of times the pasteboard’s contents have changed. (read-only)","dec":"@property(readonly, nonatomic) NSInteger changeCount"},"color":{"abs":"The color object of the first pasteboard item.","dec":"@property(nonatomic, copy) UIColor *color"},"colors":{"abs":"An array of color objects in all pasteboard items.","dec":"@property(nonatomic, copy) NSArray *colors"},"image":{"abs":"The image object of the first pasteboard item.","dec":"@property(nonatomic, copy) UIImage *image"},"images":{"abs":"An array of image objects in all pasteboard items.","dec":"@property(nonatomic, copy) NSArray *images"},"items":{"abs":"The pasteboard items on the pasteboard.","dec":"@property(nonatomic,copy) NSArray *items"},"name":{"abs":"The name of the pasteboard. (read-only)","dec":"@property(readonly, nonatomic) NSString *name"},"numberOfItems":{"abs":"Returns the number of items in the pasteboard (read-only)","dec":"@property(readonly, nonatomic) NSInteger numberOfItems"},"persistent":{"abs":"A Boolean value that indicates whether the pasteboard is persistent.","dec":"@property(getter=isPersistent, nonatomic) BOOL persistent"},"string":{"abs":"The string value of the first pasteboard item.","dec":"@property(nonatomic, copy) NSString *string"},"strings":{"abs":"An array of strings in all pasteboard items.","dec":"@property(nonatomic, copy) NSArray *strings"},"URL":{"abs":"The URL object of the first pasteboard item.","dec":"@property(nonatomic, copy) NSURL *URL"},"URLs":{"abs":"An array of URL objects in all pasteboard items.","dec":"@property(nonatomic, copy) NSArray *URLs"}},"[+]":{"generalPasteboard":{"abs":"Returns the general pasteboard, which is used for general copy-paste operations","dec":"+ (UIPasteboard *)generalPasteboard"},"pasteboardWithName:create:":{"abs":"Returns a pasteboard identified by name, optionally creating it if it doesn’t exist.","dec":"+ (UIPasteboard *)pasteboardWithName:(NSString *)pasteboardName create:(BOOL)create"},"pasteboardWithUniqueName":{"abs":"Returns an app pasteboard identified by a unique system-generated name.","dec":"+ (UIPasteboard *)pasteboardWithUniqueName"},"removePasteboardWithName:":{"abs":"Invalidates the designated app pasteboard.","dec":"+ (void)removePasteboardWithName:(NSString *)pasteboardName"}},"[-]":{"addItems:":{"abs":"Appends pasteboard items to the current contents of the pasteboard.","dec":"- (void)addItems:(NSArray *)items"},"containsPasteboardTypes:":{"abs":"Returns whether the pasteboard holds data of the specified representation type.","dec":"- (BOOL)containsPasteboardTypes:(NSArray *)pasteboardTypes"},"containsPasteboardTypes:inItemSet:":{"abs":"Returns whether the specified pasteboard items contain data of the given representation types.","dec":"- (BOOL)containsPasteboardTypes:(NSArray *)pasteboardTypes inItemSet:(NSIndexSet *)itemSet"},"dataForPasteboardType:":{"abs":"Returns the data in the pasteboard for the given representation type.","dec":"- (NSData *)dataForPasteboardType:(NSString *)pasteboardType"},"dataForPasteboardType:inItemSet:":{"abs":"Returns the data objects in the indicated pasteboard items that have the given representation type.","dec":"- (NSArray *)dataForPasteboardType:(NSString *)pasteboardType inItemSet:(NSIndexSet *)itemSet"},"itemSetWithPasteboardTypes:":{"abs":"Returns an index set identifying pasteboard items having the specified representation types.","dec":"- (NSIndexSet *)itemSetWithPasteboardTypes:(NSArray *)pasteboardTypes"},"PasteboardType:":{"abs":"Returns an object in the pasteboard for the given representation type.","dec":"- (id)valueForPasteboardType:(NSString *)pasteboardType"},"pasteboardTypes":{"abs":"Returns the types of the first item on the pasteboard.","dec":"- (NSArray *)pasteboardTypes"},"pasteboardTypesForItemSet:":{"abs":"Returns an array of representation types for each specified pasteboard item.","dec":"- (NSArray *)pasteboardTypesForItemSet:(NSIndexSet *)itemSet"},"setData:forPasteboardType:":{"abs":"Puts data in the pasteboard for the specified representation type.","dec":"- (void)setData:(NSData *)data forPasteboardType:(NSString *)pasteboardType"},"setValue:forPasteboardType:":{"abs":"Puts an object in the pasteboard for the specified representation type.","dec":"- (void)setValue:(id)value forPasteboardType:(NSString *)pasteboardType"},"valuesForPasteboardType:inItemSet:":{"abs":"Returns the objects in the indicated pasteboard items that have the given representation type.","dec":"- (NSArray *)valuesForPasteboardType:(NSString *)pasteboardType inItemSet:(NSIndexSet *)itemSet"}},"[=]":{"UIPasteboardNameGeneral":"","UIPasteboardNameFind":"","UIPasteboardTypeListString":"","UIPasteboardTypeListURL":"","UIPasteboardTypeListImage":"","UIPasteboardTypeListColor":"","UIPasteboardChangedTypesAddedKey":"","UIPasteboardChangedTypesRemovedKey":""}};

ClassRef.UIPercentDrivenInteractiveTransition = {"[:]":"NSObject","[.]":{"completionCurve":{"abs":"Indicates the animation completion curve for an interactive transition.","dec":"@property(nonatomic, assign) UIViewAnimationCurve completionCurve"},"completionSpeed":{"abs":"The speed of the transition animation.","dec":"@property(nonatomic, assign) CGFloat completionSpeed"},"duration":{"abs":"The overall duration (in seconds) of the transition animation. (read-only)","dec":"@property(readonly) CGFloat duration"},"percentComplete":{"abs":"The amount of the transition (specified as a percentage of the overall duration) that is complete. (read-only)","dec":"@property(readonly) CGFloat percentComplete"}},"[-]":{"cancelInteractiveTransition":{"abs":"Notifies the system that user interactions canceled the transition.","dec":"- (void)cancelInteractiveTransition"},"finishInteractiveTransition":{"abs":"Notifies the system that user interactions signaled the completion of the transition.","dec":"- (void)finishInteractiveTransition"},"updateInteractiveTransition:":{"abs":"Updates the completion percentage of the transition.","dec":"- (void)updateInteractiveTransition:(CGFloat)percentComplete"}}};

ClassRef.UIPickerView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"dataSource":{"abs":"The data source for the picker view.","dec":"@property(nonatomic, assign) id<UIPickerViewDataSource> dataSource"},"delegate":{"abs":"The delegate for the picker view.","dec":"@property(nonatomic, assign) id<UIPickerViewDelegate> delegate"},"numberOfComponents":{"abs":"Gets the number of components for the picker view. (read-only)","dec":"@property(nonatomic, readonly) NSInteger numberOfComponents"},"showsSelectionIndicator":{"abs":"A Boolean value that determines whether the selection indicator is displayed.","dec":"@property(nonatomic) BOOL showsSelectionIndicator"}},"[-]":{"numberOfRowsInComponent:":{"abs":"Returns the number of rows for a component.","dec":"- (NSInteger)numberOfRowsInComponent:(NSInteger)component"},"reloadAllComponents":{"abs":"Reloads all components of the picker view.","dec":"- (void)reloadAllComponents"},"reloadComponent:":{"abs":"Reloads a particular component of the picker view.","dec":"- (void)reloadComponent:(NSInteger)component"},"rowSizeForComponent:":{"abs":"Returns the size of a row for a component.","dec":"- (CGSize)rowSizeForComponent:(NSInteger)component"},"selectedRowInComponent:":{"abs":"Returns the index of the selected row in a given component.","dec":"- (NSInteger)selectedRowInComponent:(NSInteger)component"},"selectRow:inComponent:animated:":{"abs":"Selects a row in a specified component of the picker view.","dec":"- (void)selectRow:(NSInteger)row inComponent:(NSInteger)component animated:(BOOL)animated"},"viewForRow:forComponent:":{"abs":"Returns the view used by the picker view for a given row and component.","dec":"- (UIView *)viewForRow:(NSInteger)row forComponent:(NSInteger)component"}}};

ClassRef.UIPinchGestureRecognizer = {"[:]":"UIGestureRecognizer : NSObject","[.]":{"scale":{"abs":"The scale factor relative to the points of the two touches in screen coordinates.","dec":"@property(nonatomic) CGFloat scale"},"velocity":{"abs":"The velocity of the pinch in scale factor per second. (read-only)","dec":"@property(nonatomic, readonly) CGFloat velocity"}}};

ClassRef.UIPopoverBackgroundView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"arrowDirection":{"abs":"The direction in which the popover arrow is pointing.","dec":"@property (nonatomic, readwrite) UIPopoverArrowDirection arrowDirection"},"arrowOffset":{"abs":"The distance (measured in points) from the center of the view to the center line of the arrow.","dec":"@property (nonatomic, readwrite) CGFloat arrowOffset"}},"[+]":{"arrowBase":{"abs":"The width of the arrow triangle at its base.","dec":"+ (CGFloat)arrowBase"},"arrowHeight":{"abs":"The height of the arrow (measured in points) from its base to its tip.","dec":"+ (CGFloat)arrowHeight"},"contentViewInsets":{"abs":"The insets for the content portion of the popover.","dec":"+ (UIEdgeInsets)contentViewInsets"},"wantsDefaultContentAppearance":{"abs":"Determines whether the default content appearance should be used for the popover.","dec":"+ (BOOL)wantsDefaultContentAppearance"}}};

ClassRef.UIPopoverController = {"[:]":"NSObject","[.]":{"backgroundColor":{"abs":"The color of the popover’s backdrop view.","dec":"@property (nonatomic, copy) UIColor *backgroundColor"},"contentViewController":{"abs":"The view controller responsible for the content portion of the popover.","dec":"@property (nonatomic, retain) UIViewController *contentViewController"},"delegate":{"abs":"The delegate you want to receive popover controller messages.","dec":"@property (nonatomic, assign) id <UIPopoverControllerDelegate> delegate"},"passthroughViews":{"abs":"An array of views that the user can interact with while the popover is visible.","dec":"@property (nonatomic, copy) NSArray *passthroughViews"},"popoverArrowDirection":{"abs":"The direction of the popover’s arrow. (read-only)","dec":"@property (nonatomic, readonly) UIPopoverArrowDirection popoverArrowDirection"},"popoverBackgroundViewClass":{"abs":"The class to use for displaying the popover background content.","dec":"@property (nonatomic, readwrite, retain) Class popoverBackgroundViewClass"},"popoverContentSize":{"abs":"The size of the popover’s content view.","dec":"@property (nonatomic) CGSize popoverContentSize"},"popoverLayoutMargins":{"abs":"The margins that define the portion of the screen in which it is permissible to display the popover.","dec":"@property (nonatomic, readwrite) UIEdgeInsets popoverLayoutMargins"},"popoverVisible":{"abs":"A Boolean value indicating whether the popover is currently visible. (read-only)","dec":"@property (nonatomic, readonly, getter=isPopoverVisible) BOOL popoverVisible"}},"[-]":{"dismissPopoverAnimated:":{"abs":"Dismisses the popover programmatically.","dec":"- (void)dismissPopoverAnimated:(BOOL)animated"},"initWithContentViewController:":{"abs":"Returns an initialized popover controller object.","dec":"- (id)initWithContentViewController:(UIViewController *)viewController"},"presentPopoverFromBarButtonItem:permittedArrowDirections:animated:":{"abs":"Displays the popover and anchors it to the specified bar button item.","dec":"- (void)presentPopoverFromBarButtonItem:(UIBarButtonItem *)item permittedArrowDirections:(UIPopoverArrowDirection)arrowDirections animated:(BOOL)animated"},"presentPopoverFromRect:inView:permittedArrowDirections:animated:":{"abs":"Displays the popover and anchors it to the specified location in the view.","dec":"- (void)presentPopoverFromRect:(CGRect)rect inView:(UIView *)view permittedArrowDirections:(UIPopoverArrowDirection)arrowDirections animated:(BOOL)animated"},"setContentViewController:animated:":{"abs":"Sets the view controller responsible for the content portion of the popover.","dec":"- (void)setContentViewController:(UIViewController *)viewController animated:(BOOL)animated"},"setPopoverContentSize:animated:":{"abs":"Changes the size of the popover’s content view.","dec":"- (void)setPopoverContentSize:(CGSize)size animated:(BOOL)animated"}},"[=]":{"UIPopoverArrowDirectionUp":"","UIPopoverArrowDirectionDown":"","UIPopoverArrowDirectionLeft":"","UIPopoverArrowDirectionRight":"","UIPopoverArrowDirectionAny":"","UIPopoverArrowDirectionUnknown":""}};

ClassRef.UIPrintFormatter = {"[:]":"NSObject","[.]":{"contentInsets":{"abs":"The distances the edges of content are inset from the printing rectangle.","dec":"@property(nonatomic) UIEdgeInsets contentInsets"},"maximumContentHeight":{"abs":"The maximum height of the content area.","dec":"@property(nonatomic) CGFloat maximumContentHeight"},"maximumContentWidth":{"abs":"The maximum width of the content area.","dec":"@property(nonatomic) CGFloat maximumContentWidth"},"pageCount":{"abs":"The number of pages to be printed. (read-only)","dec":"@property(nonatomic, readonly) NSInteger pageCount"},"printPageRenderer":{"abs":"Returns the page renderer with which the receiver is associated.","dec":"@property(readonly) UIPrintPageRenderer *printPageRenderer"},"startPage":{"abs":"The index of the first page that the print formatter lays out.","dec":"@property(nonatomic) NSInteger startPage"}},"[-]":{"drawInRect:forPageAtIndex:":{"abs":"Draws the portion of a print formatter’s content that goes in the given area for the specified page","dec":"- (void)drawInRect:(CGRect)rect forPageAtIndex:(NSInteger)pageIndex"},"rectForPageAtIndex:":{"abs":"Returns the area enclosing a specified page of content.","dec":"- (CGRect)rectForPageAtIndex:(NSIndex)pageIndex"},"removeFromPrintPageRenderer":{"abs":"Removes the print formatter from the page renderer.","dec":"- (void)removeFromPrintPageRenderer"}}};

ClassRef.UIPrintInfo = {"[:]":"NSObject","[.]":{"duplex":{"abs":"Specifies the duplex mode to use for the print job.","dec":"@property(nonatomic) UIPrintInfoDuplex duplex"},"jobName":{"abs":"The name of the print job.","dec":"@property(nonatomic, copy) NSString *jobName"},"orientation":{"abs":"The orientation of the printed content, portrait or landscape.","dec":"@property(nonatomic) UIPrintInfoOrientation orientation"},"outputType":{"abs":"The kind of printable content.","dec":"@property(nonatomic) UIPrintInfoOutputType outputType"},"printerID":{"abs":"An identifier of the printer to use for the print job.","dec":"@property(nonatomic, copy) NSString *printerID"}},"[+]":{"printInfo":{"abs":"Returns a print-information object initialized with default values.","dec":"+ (UIPrintInfo *)printInfo"},"printInfoWithDictionary:":{"abs":"Returns a print-information object that is initialized with the data in the passed-in dictionary.","dec":"+ (UIPrintInfo *)printInfoWithDictionary:(NSDictionary *)dictionary"}},"[-]":{"dictionaryRepresentation":{"abs":"Returns a dictionary representation of a print-information object.","dec":"- (NSDictionary *)dictionaryRepresentation"}},"[=]":{"UIPrintInfoDuplexNone":"","UIPrintInfoDuplexLongEdge":"","UIPrintInfoDuplexShortEdge":"","UIPrintInfoOrientationPortrait":"","UIPrintInfoOrientationLandscape":"","UIPrintInfoOutputGeneral":"","UIPrintInfoOutputPhoto":"","UIPrintInfoOutputGrayscale":"","UIPrintInfoOutputPhotoGrayscale":""}};

ClassRef.UIPrintInteractionController = {"[:]":"NSObject","[.]":{"delegate":{"abs":"The delegate of the print interaction controller.","dec":"@property(nonatomic, assign) id<UIPrintInteractionControllerDelegate> delegate"},"printFormatter":{"abs":"An object that lays out the content of pages based on the kind of content.","dec":"@property(nonatomic, retain) UIPrintFormatter *printFormatter"},"printInfo":{"abs":"An object encapsulating information about the print job.","dec":"@property(nonatomic, retain) UIPrintInfo *printInfo"},"printingItem":{"abs":"A single ready-to-print object.","dec":"@property(nonatomic, copy) id printingItem"},"printingItems":{"abs":"An array of ready-to-print objects.","dec":"@property(nonatomic, copy) NSArray *printingItems"},"printPageRenderer":{"abs":"An object that draws pages of printable content when requested by UIKit.","dec":"@property(nonatomic, retain) UIPrintPageRenderer *printPageRenderer"},"printPaper":{"abs":"An object representing the paper size and printing area for the print job. (read-only)","dec":"@property(nonatomic, readonly) UIPrintPaper *printPaper"},"showsNumberOfCopies":{"abs":"A Boolean value that determines whether the printing options include the number of copies.","dec":"@property(nonatomic) BOOL showsNumberOfCopies"},"showsPageRange":{"abs":"A Boolean value that determines whether the printing options include a page-range control.","dec":"@property(nonatomic) BOOL showsPageRange"}},"[+]":{"canPrintData:":{"abs":"Returns whether UIKit can print the contents of a data object.","dec":"+ (BOOL)canPrintData:(NSData *)data"},"canPrintURL:":{"abs":"Returns whether UIKit can print the file referenced by a URL.","dec":"+ (BOOL)canPrintURL:(NSURL *)url"},"isPrintingAvailable":{"abs":"Returns a Boolean indicating whether the device supports printing.","dec":"+ (BOOL)isPrintingAvailable"},"printableUTIs":{"abs":"Returns a set of the Uniform Type Identifiers for the types of data that UIKit can print.","dec":"+ (NSSet *)printableUTIs"},"sharedPrintController":{"abs":"Returns the shared print-interaction controller object.","dec":"+ (UIPrintInteractionController *)sharedPrintController"}},"[-]":{"dismissAnimated:":{"abs":"Dismisses the printing-options sheet or popover.","dec":"- (void)dismissAnimated:(BOOL)animated"},"presentAnimated:completionHandler:":{"abs":"Presents the iPhone printing user interface in a sheet that can be animated to slide up from the bottom of the screen.","dec":"- (BOOL)presentAnimated:(BOOL)animated completionHandler:(UIPrintInteractionCompletionHandler)completion"},"presentFromBarButtonItem:animated:completionHandler:":{"abs":"Presents the iPad printing user interface in a popover view that can be animated from a bar-button item.","dec":"- (BOOL)presentFromBarButtonItem:(UIBarButtonItem *)item animated:(BOOL)animated completionHandler:(UIPrintInteractionCompletionHandler)completion"},"presentFromRect:inView:animated:completionHandler:":{"abs":"Presents the iPad printing user interface in a popover view that can be animated from any area in a view.","dec":"- (BOOL)presentFromRect:(CGRect)rect inView:(UIView *)view animated:(BOOL)animated completionHandler:(UIPrintInteractionCompletionHandler)completion"}},"[=]":{"UIPrintErrorDomain":"","UIPrintingNotAvailableError":"","UIPrintNoContentError":"","UIPrintUnknownImageFormatError":"","UIPrintJobFailedError":""}};

ClassRef.UIPrintPageRenderer = {"[:]":"NSObject","[.]":{"footerHeight":{"abs":"The height of the page footer.","dec":"@property CGFloat footerHeight"},"headerHeight":{"abs":"The height of the page header.","dec":"@property CGFloat headerHeight"},"paperRect":{"abs":"The size of the paper used for printing. (read-only)","dec":"@property(readonly) CGRect paperRect"},"printableRect":{"abs":"The area in which printing can occur. (read-only)","dec":"@property(readonly) CGRect printableRect"},"printFormatters":{"abs":"The print formatters associated with the page renderer.","dec":"@property(copy) NSArray *printFormatters"}},"[-]":{"addPrintFormatter:startingAtPageAtIndex:":{"abs":"Adds a print formatter to the page renderer starting at the specified page.","dec":"- (void)addPrintFormatter:(UIPrintFormatter *)formatter startingAtPageAtIndex:(NSInteger)pageIndex"},"drawContentForPageAtIndex:inRect:":{"abs":"Overridden to draw the content of the given page.","dec":"- (void)drawContentForPageAtIndex:(NSInteger)index inRect:(CGRect)contentRect"},"drawFooterForPageAtIndex:inRect:":{"abs":"Overridden to draw the footer of the given page.","dec":"- (void)drawFooterForPageAtIndex:(NSInteger)index inRect:(CGRect)footerRect"},"drawHeaderForPageAtIndex:inRect:":{"abs":"Overridden to draw the header of the given page.","dec":"- (void)drawHeaderForPageAtIndex:(NSInteger)index inRect:(CGRect)headerRect"},"drawPageAtIndex:inRect:":{"abs":"Overridden to draw a given page of content for the printer.","dec":"- (void)drawPageAtIndex:(NSInteger)index inRect:(CGRect)pageRect"},"drawPrintFormatter:forPageAtIndex:":{"abs":"Overridden to add custom drawing to the drawing provided by a given print formatter for a page.","dec":"- (void)drawPrintFormatter:(UIPrintFormatter *)printFormatter forPageAtIndex:(NSInteger)index"},"numberOfPages":{"abs":"The number of pages to render.","dec":"- (NSInteger)numberOfPages"},"prepareForDrawingPages:":{"abs":"Overridden by the page renderer to prepare for drawing a range of pages.","dec":"- (void)prepareForDrawingPages:(NSRange)range"},"printFormattersForPageAtIndex:":{"abs":"Returns the print formatters associated with a specified page.","dec":"- (NSArray *)printFormattersForPageAtIndex:(NSInteger)pageIndex"}}};

ClassRef.UIPrintPaper = {"[:]":"NSObject","[.]":{"paperSize":{"abs":"The size of the sheet to be used for printing. (read-only)","dec":"@property(readonly) CGSize paperSize"},"printableRect":{"abs":"The rectangle that represents the portion of the paper that can be imaged upon. (read-only)","dec":"@property(readonly) CGRect printableRect"}},"[+]":{"bestPaperForPageSize:withPapersFromArray:":{"abs":"Returns the print-paper object that UIKit determines to be the best for a print job based on the given page size and the paper size–imageable area combinations specific to the printer.","dec":"+ (UIPrintPaper *)bestPaperForPageSize:(CGSize)pageSize withPapersFromArray:(NSArray *)paperList"}}};

ClassRef.UIProgressView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"progress":{"abs":"The current progress shown by the receiver.","dec":"@property(nonatomic) float progress"},"progressImage":{"abs":"An image to use for the portion of the progress bar that is filled.","dec":"@property(nonatomic, retain) UIImage *progressImage"},"progressTintColor":{"abs":"The color shown for the portion of the progress bar that is filled.","dec":"@property(nonatomic, retain) UIColor *progressTintColor"},"progressViewStyle":{"abs":"The current graphical style of the receiver.","dec":"@property(nonatomic) UIProgressViewStyle progressViewStyle"},"trackImage":{"abs":"An image to use for the portion of the track that is not filled.","dec":"@property(nonatomic, retain) UIImage *trackImage"},"trackTintColor":{"abs":"The color shown for the portion of the progress bar that is not filled.","dec":"@property(nonatomic, retain) UIColor *trackTintColor"}},"[-]":{"initWithProgressViewStyle:":{"abs":"Initializes and returns an progress-view object.","dec":"- (id)initWithProgressViewStyle:(UIProgressViewStyle)style"},"setProgress:animated:":{"abs":"Adjusts the current progress shown by the receiver, optionally animating the change.","dec":"- (void)setProgress:(float)progress animated:(BOOL)animated"}},"[=]":{"UIProgressViewStyleDefault":"","UIProgressViewStyleBar":""}};

ClassRef.UIPushBehavior = {"[:]":"UIDynamicBehavior : NSObject","[.]":{"active":{"abs":"The state of the push behavior’s force: either active or inactive.","dec":"@property(nonatomic, readwrite) BOOL active"},"angle":{"abs":"The angle, in radians, of the force vector for the behavior.","dec":"@property(readwrite, nonatomic) CGFloat angle"},"items":{"abs":"Returns the set of dynamic items you’ve added to the push behavior. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *items"},"magnitude":{"abs":"The magnitude of the force vector for the push behavior.","dec":"@property(readwrite, nonatomic) CGFloat magnitude"},"mode":{"abs":"Returns the force mode for the push behavior. (read-only)","dec":"@property(nonatomic, readonly) UIPushBehaviorMode mode"},"pushDirection":{"abs":"The direction of the force vector for the behavior, expressed as x and y components and using standard UIKit geometry.","dec":"@property(readwrite, nonatomic) CGVector pushDirection"}},"[-]":{"addItem:":{"abs":"Adds a dynamic item to the behavior’s dynamic item array.","dec":"- (void)addItem:(id<UIDynamicItem>)item"},"initWithItems:mode:":{"abs":"Initializes a push behavior with an array of dynamic items.","dec":"- (instancetype)initWithItems:(NSArray *)items mode:(UIPushBehaviorMode)mode"},"removeItem:":{"abs":"Removes a specific dynamic item from the behavior.","dec":"- (void)removeItem:(id<UIDynamicItem>)item"},"setAngle:magnitude:":{"abs":"Sets the angle and magnitude of the force vector for the behavior.","dec":"- (void)setAngle:(CGFloat)angle magnitude:(CGFloat)magnitude"},"setTargetOffsetFromCenter:forItem:":{"abs":"Sets the offset, from the center of a dynamic item, at which to apply the push behavior’s force vector.","dec":"- (void)setTargetOffsetFromCenter:(UIOffset)o forItem:(id<UIDynamicItem>)item"},"targetOffsetFromCenterForItem:":{"abs":"Returns the offset, from the center of a dynamic item, at which the push behavior’s force vector is applied.","dec":"- (UIOffset)targetOffsetFromCenterForItem:(id<UIDynamicItem>)item"}},"[=]":{"UIPushBehaviorModeContinuous":"","UIPushBehaviorModeInstantaneous":""}};

ClassRef.UIReferenceLibraryViewController = {"[:]":"UIViewController : UIResponder : NSObject","[+]":{"dictionaryHasDefinitionForTerm:":{"abs":"Returns whether a definition is available for the given term.","dec":"+ (BOOL)dictionaryHasDefinitionForTerm:(NSString *)term"}},"[-]":{"initWithTerm:":{"abs":"Initializes a newly created reference-library view controller to display the definition of the given term.","dec":"- (id)initWithTerm:(NSString *)term"}}};

ClassRef.UIRefreshControl = {"[:]":"UIControl : UIView : UIResponder : NSObject","[.]":{"attributedTitle":{"abs":"The styled title text to display in the refresh control.","dec":"@property (nonatomic, retain) NSAttributedString *attributedTitle"},"refreshing":{"abs":"A Boolean value indicating whether a refresh operation has been triggered and is in progress. (read-only)","dec":"@property (nonatomic, readonly, getter=isRefreshing) BOOL refreshing"},"tintColor":{"abs":"The tint color for the refresh control.","dec":"@property (nonatomic, retain) UIColor *tintColor"}},"[-]":{"beginRefreshing":{"abs":"Tells the control that a refresh operation was started programmatically.","dec":"- (void)beginRefreshing"},"endRefreshing":{"abs":"Tells the control that a refresh operation has ended.","dec":"- (void)endRefreshing"},"init":{"abs":"Initializes and returns a standard refresh control.","dec":"- (id)init"}}};

ClassRef.UIResponder = {"[:]":"NSObject","[.]":{"inputAccessoryView":{"abs":"The custom accessory view to display when the object becomes the first responder. (read-only)","dec":"@property(readonly, retain) UIView *inputAccessoryView"},"inputView":{"abs":"The custom input view to display when the object becomes the first responder. (read-only)","dec":"@property(readonly, retain) UIView *inputView"},"keyCommands":{"abs":"The key commands that trigger actions on this responder. (read-only)","dec":"@property(nonatomic, readonly) NSArray *keyCommands"},"textInputContextIdentifier":{"abs":"An identifier signifying that the responder should preserve its text input mode information. (read-only)","dec":"@property(readonly, retain) NSString *textInputContextIdentifier"},"textInputMode":{"abs":"The text input mode for this responder object. (read-only)","dec":"@property(readonly, retain) UITextInputMode *textInputMode"},"undoManager":{"abs":"Returns the nearest shared undo manager in the responder chain. (read-only)","dec":"@property(nonatomic, readonly) NSUndoManager *undoManager"}},"[+]":{"clearTextInputContextIdentifier:":{"abs":"Clears text input mode information from the app’s user defaults.","dec":"+ (void)clearTextInputContextIdentifier:(NSString *)identifier"}},"[-]":{"becomeFirstResponder":{"abs":"Notifies the receiver that it is about to become first responder in its window.","dec":"- (BOOL)becomeFirstResponder"},"canBecomeFirstResponder":{"abs":"Returns a Boolean value indicating whether the receiver can become first responder.","dec":"- (BOOL)canBecomeFirstResponder"},"canPerformAction:withSender:":{"abs":"Requests the receiving responder to enable or disable the specified command in the user interface.","dec":"- (BOOL)canPerformAction:(SEL)action withSender:(id)sender"},"canResignFirstResponder":{"abs":"Returns a Boolean value indicating whether the receiver is willing to relinquish first-responder status.","dec":"- (BOOL)canResignFirstResponder"},"isFirstResponder":{"abs":"Returns a Boolean value indicating whether the receiver is the first responder.","dec":"- (BOOL)isFirstResponder"},"motionBegan:withEvent:":{"abs":"Tells the receiver that a motion event has begun.","dec":"- (void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event"},"motionCancelled:withEvent:":{"abs":"Tells the receiver that a motion event has been cancelled.","dec":"- (void)motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent *)event"},"motionEnded:withEvent:":{"abs":"Tells the receiver that a motion event has ended.","dec":"- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event"},"nextResponder":{"abs":"Returns the receiver's next responder, or nil if it has none.","dec":"- (UIResponder *)nextResponder"},"reloadInputViews":{"abs":"Updates the custom input and accessory views when the object is the first responder.","dec":"- (void)reloadInputViews"},"remoteControlReceivedWithEvent:":{"abs":"Sent to the receiver when a remote-control event is received.","dec":"- (void)remoteControlReceivedWithEvent:(UIEvent *)event"},"resignFirstResponder":{"abs":"Notifies the receiver that it has been asked to relinquish its status as first responder in its window.","dec":"- (BOOL)resignFirstResponder"},"targetForAction:withSender:":{"abs":"Returns the target object that responds to an action.","dec":"- (id)targetForAction:(SEL)action withSender:(id)sender"},"touchesBegan:withEvent:":{"abs":"Tells the receiver when one or more fingers touch down in a view or window.","dec":"- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event"},"touchesCancelled:withEvent:":{"abs":"Sent to the receiver when a system event (such as a low-memory warning) cancels a touch event.","dec":"- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event"},"touchesEnded:withEvent:":{"abs":"Tells the receiver when one or more fingers are raised from a view or window.","dec":"- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event"},"touchesMoved:withEvent:":{"abs":"Tells the receiver when one or more fingers associated with an event move within a view or window.","dec":"- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event"}}};

ClassRef.UIRotationGestureRecognizer= {"[:]":"UIGestureRecognizer : NSObject","[.]":{"rotation":{"abs":"The rotation of the gesture in radians.","dec":"@property(nonatomic) CGFloat rotation"},"velocity":{"abs":"The velocity of the rotation gesture in radians per second. (read-only)","dec":"@property(nonatomic, readonly) CGFloat velocity"}}};

ClassRef.UIScreen = {"[:]":"NSObject","[.]":{"applicationFrame":{"abs":"The frame rectangle for the app window. (read-only)","dec":"@property(nonatomic, readonly) CGRect applicationFrame"},"availableModes":{"abs":"The display modes that can be associated with the receiver. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *availableModes"},"bounds":{"abs":"Contains the bounding rectangle of the screen, measured in points. (read-only)","dec":"@property(nonatomic, readonly) CGRect bounds"},"brightness":{"abs":"The brightness level of the screen.","dec":"@property(nonatomic) CGFloat brightness"},"currentMode":{"abs":"The current screen mode associated with the receiver.","dec":"@property(nonatomic, retain) UIScreenMode *currentMode"},"mirroredScreen":{"abs":"The screen being mirrored by an external display. (read-only)","dec":"@property(nonatomic, readonly, retain) UIScreen *mirroredScreen"},"overscanCompensation":{"abs":"For an external screen, this property sets the desired technique to compensate for overscan.","dec":"@property(nonatomic) UIScreenOverscanCompensation overscanCompensation"},"preferredMode":{"abs":"The preferred display mode for the receiver. (read-only)","dec":"@property(nonatomic, readonly, retain) UIScreenMode *preferredMode"},"scale":{"abs":"The natural scale factor associated with the screen. (read-only)","dec":"@property(nonatomic, readonly) CGFloat scale"},"wantsSoftwareDimming":{"abs":"A Boolean value that indicates whether the screen may be dimmed lower than the hardware is normally capable of by emulating it in software.","dec":"@property(nonatomic) BOOL wantsSoftwareDimming"}},"[+]":{"mainScreen":{"abs":"Returns the screen object representing the device’s screen.","dec":"+ (UIScreen *)mainScreen"},"screens":{"abs":"Returns an array containing all of the screens attached to the device.","dec":"+ (NSArray *)screens"}},"[-]":{"displayLinkWithTarget:selector:":{"abs":"Returns a display link object for the current screen.","dec":"- (CADisplayLink *)displayLinkWithTarget:(id)target selector:(SEL)sel"},"snapshotViewAfterScreenUpdates:":{"abs":"Returns a snapshot view based on the current screen contents.","dec":"- (UIView *)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates"}},"[=]":{"UIScreenOverscanCompensationScale":"","UIScreenOverscanCompensationInsetBounds":"","UIScreenOverscanCompensationInsetApplicationFrame":""}};

ClassRef.UIScreenEdgePanGestureRecognizer = {"[:]":"UIPanGestureRecognizer : UIGestureRecognizer : NSObject","[.]":{"edges":{"abs":"The acceptable starting edges for the gesture.","dec":"@property (readwrite, nonatomic, assign) UIRectEdge edges;"}}};

ClassRef.UIScreenMode = {"[:]":"NSObject","[.]":{"pixelAspectRatio":{"abs":"The aspect ratio of a single pixel. (read-only)","dec":"@property(readonly,nonatomic) CGFloat pixelAspectRatio"},"size":{"abs":"The screen size, measured in pixels. (read-only)","dec":"@property(readonly,nonatomic) CGSize size"}}};

ClassRef.UIScrollView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"alwaysBounceHorizontal":{"abs":"A Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view.","dec":"@property(nonatomic) BOOL alwaysBounceHorizontal"},"alwaysBounceVertical":{"abs":"A Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content.","dec":"@property(nonatomic) BOOL alwaysBounceVertical"},"bounces":{"abs":"A Boolean value that controls whether the scroll view bounces past the edge of content and back again.","dec":"@property(nonatomic) BOOL bounces"},"bouncesZoom":{"abs":"A Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits.","dec":"@property(nonatomic) BOOL bouncesZoom"},"canCancelContentTouches":{"abs":"A Boolean value that controls whether touches in the content view always lead to tracking.","dec":"@property(nonatomic) BOOL canCancelContentTouches"},"contentInset":{"abs":"The distance that the content view is inset from the enclosing scroll view.","dec":"@property(nonatomic) UIEdgeInsets contentInset"},"contentOffset":{"abs":"The point at which the origin of the content view is offset from the origin of the scroll view.","dec":"@property(nonatomic) CGPoint contentOffset"},"contentSize":{"abs":"The size of the content view.","dec":"@property(nonatomic) CGSize contentSize"},"decelerating":{"abs":"Returns whether the content is moving in the scroll view after the user lifted their finger. (read-only)","dec":"@property(nonatomic, readonly, getter=isDecelerating) BOOL decelerating"},"decelerationRate":{"abs":"A floating-point value that determines the rate of deceleration after the user lifts their finger.","dec":"@property(nonatomic) CGFloat decelerationRate"},"delaysContentTouches":{"abs":"A Boolean value that determines whether the scroll view delays the handling of touch-down gestures.","dec":"@property(nonatomic) BOOL delaysContentTouches"},"delegate":{"abs":"The delegate of the scroll-view object.","dec":"@property(nonatomic, assign) id<UIScrollViewDelegate> delegate"},"directionalLockEnabled":{"abs":"A Boolean value that determines whether scrolling is disabled in a particular direction.","dec":"@property(nonatomic, getter=isDirectionalLockEnabled) BOOL directionalLockEnabled"},"dragging":{"abs":"A Boolean value that indicates whether the user has begun scrolling the content. (read-only)","dec":"@property(nonatomic, readonly, getter=isDragging) BOOL dragging"},"indicatorStyle":{"abs":"The style of the scroll indicators.","dec":"@property(nonatomic) UIScrollViewIndicatorStyle indicatorStyle"},"keyboardDismissMode":{"abs":"The manner in which the keyboard is dismissed when a drag begins in the scroll view.","dec":"@property(nonatomic) UIScrollViewKeyboardDismissMode keyboardDismissMode"},"maximumZoomScale":{"abs":"A floating-point value that specifies the maximum scale factor that can be applied to the scroll view's content.","dec":"@property(nonatomic) CGFloat maximumZoomScale"},"minimumZoomScale":{"abs":"A floating-point value that specifies the minimum scale factor that can be applied to the scroll view's content.","dec":"@property(nonatomic) CGFloat minimumZoomScale"},"pagingEnabled":{"abs":"A Boolean value that determines whether paging is enabled for the scroll view.","dec":"@property(nonatomic, getter=isPagingEnabled) BOOL pagingEnabled"},"panGestureRecognizer":{"abs":"The underlying gesture recognizer for pan gestures. (read-only)","dec":"@property(nonatomic, readonly) UIPanGestureRecognizer *panGestureRecognizer"},"pinchGestureRecognizer":{"abs":"The underlying gesture recognizer for pinch gestures. (read-only)","dec":"@property(nonatomic, readonly) UIPinchGestureRecognizer *pinchGestureRecognizer"},"scrollEnabled":{"abs":"A Boolean value that determines whether scrolling is enabled.","dec":"@property(nonatomic, getter=isScrollEnabled) BOOL scrollEnabled"},"scrollIndicatorInsets":{"abs":"The distance the scroll indicators are inset from the edge of the scroll view.","dec":"@property(nonatomic) UIEdgeInsets scrollIndicatorInsets"},"scrollsToTop":{"abs":"A Boolean value that controls whether the scroll-to-top gesture is enabled.","dec":"@property(nonatomic) BOOL scrollsToTop"},"showsHorizontalScrollIndicator":{"abs":"A Boolean value that controls whether the horizontal scroll indicator is visible.","dec":"@property(nonatomic) BOOL showsHorizontalScrollIndicator"},"showsVerticalScrollIndicator":{"abs":"A Boolean value that controls whether the vertical scroll indicator is visible.","dec":"@property(nonatomic) BOOL showsVerticalScrollIndicator"},"tracking":{"abs":"Returns whether the user has touched the content to initiate scrolling. (read-only)","dec":"@property(nonatomic, readonly, getter=isTracking) BOOL tracking"},"zoomBouncing":{"abs":"A Boolean value that indicates that zooming has exceeded the scaling limits specified for the receiver. (read-only)","dec":"@property(nonatomic, readonly, getter=isZoomBouncing) BOOL zoomBouncing"},"zooming":{"abs":"A Boolean value that indicates whether the content view is currently zooming in or out. (read-only)","dec":"@property(nonatomic, readonly, getter=isZooming) BOOL zooming"},"zoomScale":{"abs":"A floating-point value that specifies the current scale factor applied to the scroll view's content.","dec":"@property(nonatomic) CGFloat zoomScale"}},"[-]":{"flashScrollIndicators":{"abs":"Displays the scroll indicators momentarily.","dec":"- (void)flashScrollIndicators"},"scrollRectToVisible:animated:":{"abs":"Scrolls a specific area of the content so that it is visible in the receiver.","dec":"- (void)scrollRectToVisible:(CGRect)rect animated:(BOOL)animated"},"setContentOffset:animated:":{"abs":"Sets the offset from the content view’s origin that corresponds to the receiver’s origin.","dec":"- (void)setContentOffset:(CGPoint)contentOffset animated:(BOOL)animated"},"setZoomScale:animated:":{"abs":"A floating-point value that specifies the current zoom scale.","dec":"- (void)setZoomScale:(CGFloat)scale animated:(BOOL)animated"},"touchesShouldBegin:withEvent:inContentView:":{"abs":"Overridden by subclasses to customize the default behavior when a finger touches down in displayed content.","dec":"- (BOOL)touchesShouldBegin:(NSSet *)touches withEvent:(UIEvent *)event inContentView:(UIView *)view"},"touchesShouldCancelInContentView:":{"abs":"Returns whether to cancel touches related to the content subview and start dragging.","dec":"- (BOOL)touchesShouldCancelInContentView:(UIView *)view"},"zoomToRect:animated:":{"abs":"Zooms to a specific area of the content so that it is visible in the receiver.","dec":"- (void)zoomToRect:(CGRect)rect animated:(BOOL)animated"}},"[=]":{"UIScrollViewIndicatorStyleDefault":"","UIScrollViewIndicatorStyleBlack":"","UIScrollViewIndicatorStyleWhite":"","UIScrollViewDecelerationRateNormal":"","UIScrollViewDecelerationRateFast":"","UIScrollViewKeyboardDismissModeNone":"","UIScrollViewKeyboardDismissModeOnDrag":"","UIScrollViewKeyboardDismissModeInteractive":""}};

ClassRef.UISearchBar = {"[:]":"UIView : UIResponder : NSObject","[.]":{"autocapitalizationType":{"abs":"The auto-capitalization style for the text object.","dec":"@property(nonatomic) UITextAutocapitalizationType autocapitalizationType"},"autocorrectionType":{"abs":"The auto-correction style for the text object.","dec":"@property(nonatomic) UITextAutocorrectionType autocorrectionType"},"backgroundImage":{"abs":"The background image for the search bar.","dec":"@property(nonatomic, retain) UIImage *backgroundImage"},"barStyle":{"abs":"A bar style that specifies the search bar’s appearance.","dec":"@property(nonatomic) UIBarStyle barStyle"},"barTintColor":{"abs":"The tint color to apply to the search bar background.","dec":"@property(nonatomic, retain) UIColor *barTintColor"},"delegate":{"abs":"The search bar’s delegate object.","dec":"@property(nonatomic, assign) id<UISearchBarDelegate> delegate"},"inputAccessoryView":{"abs":"A custom input accessory view for the keyboard of the search bar.","dec":"@property(nonatomic, readwrite, retain) UIView *inputAccessoryView"},"keyboardType":{"abs":"The keyboard style associated with the text object.","dec":"@property(nonatomic) UIKeyboardType keyboardType"},"placeholder":{"abs":"The string that is displayed when there is no other text in the text field.","dec":"@property(nonatomic, copy) NSString *placeholder"},"prompt":{"abs":"A single line of text displayed at the top of the search bar.","dec":"@property(nonatomic, copy) NSString *prompt"},"scopeBarBackgroundImage":{"abs":"The background image for the scope bar.","dec":"@property(nonatomic, retain) UIImage *scopeBarBackgroundImage"},"scopeButtonTitles":{"abs":"An array of strings indicating the titles of the scope buttons.","dec":"@property(nonatomic, copy) NSArray *scopeButtonTitles"},"searchBarStyle":{"abs":"A search bar style that specifies the search bar’s appearance.","dec":"@property(nonatomic) UISearchBarStyle searchBarStyle"},"searchFieldBackgroundPositionAdjustment":{"abs":"The offset of the search text field background in the search bar.","dec":"@property(nonatomic) UIOffset searchFieldBackgroundPositionAdjustment"},"searchResultsButtonSelected":{"abs":"A Boolean value indicating whether the search results button is selected.","dec":"@property(nonatomic, getter=isSearchResultsButtonSelected) BOOL searchResultsButtonSelected"},"searchTextPositionAdjustment":{"abs":"The offset of the text within the search text field background.","dec":"@property(nonatomic) UIOffset searchTextPositionAdjustment"},"selectedScopeButtonIndex":{"abs":"The index of the selected scope button.","dec":"@property(nonatomic) NSInteger selectedScopeButtonIndex"},"showsBookmarkButton":{"abs":"A Boolean value indicating whether the bookmark button is displayed.","dec":"@property(nonatomic) BOOL showsBookmarkButton"},"showsCancelButton":{"abs":"A Boolean value indicating whether the cancel button is displayed.","dec":"@property(nonatomic) BOOL showsCancelButton"},"showsScopeBar":{"abs":"Specifies whether the scope bar is displayed.","dec":"@property(nonatomic) BOOL showsScopeBar"},"showsSearchResultsButton":{"abs":"A Boolean value indicating whether the search results button is displayed.","dec":"@property(nonatomic) BOOL showsSearchResultsButton"},"spellCheckingType":{"abs":"The spell-checking type.","dec":"@property(nonatomic) UITextSpellCheckingType spellCheckingType"},"text":{"abs":"The current or starting search text.","dec":"@property(nonatomic, copy) NSString *text"},"tintColor":{"abs":"The tint color to apply to key elements in the search bar.","dec":"@property(nonatomic, retain) UIColor *tintColor"},"translucent":{"abs":"A Boolean value that indicates whether the search bar is translucent (YES) or not (NO).","dec":"@property(nonatomic, assign, getter=isTranslucent) BOOL translucent"}},"[-]":{"backgroundImageForBarPosition:barMetrics:":{"abs":"Returns the image used for the background in a given position and with given metrics.","dec":"- (UIImage *)backgroundImageForBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics"},"imageForSearchBarIcon:state:":{"abs":"Returns the image for a given search bar icon type and control state.","dec":"- (UIImage *)imageForSearchBarIcon:(UISearchBarIcon)icon state:(UIControlState)state"},"positionAdjustmentForSearchBarIcon:":{"abs":"Returns the position adjustment for a given icon.","dec":"- (UIOffset)positionAdjustmentForSearchBarIcon:(UISearchBarIcon)icon"},"scopeBarButtonBackgroundImageForState:":{"abs":"Returns the background image for the scope bar button in a given state.","dec":"- (UIImage *)scopeBarButtonBackgroundImageForState:(UIControlState)state"},"scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:":{"abs":"Returns the divider image to use for a given combination of left and right segment states.","dec":"- (UIImage *)scopeBarButtonDividerImageForLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState"},"scopeBarButtonTitleTextAttributesForState:":{"abs":"Returns the text attributes for the search bar’s button’s title string for a given state.","dec":"- (NSDictionary *)scopeBarButtonTitleTextAttributesForState:(UIControlState)state"},"searchFieldBackgroundImageForState:":{"abs":"Returns the search text field image for a given state.","dec":"- (UIImage *)searchFieldBackgroundImageForState:(UIControlState)state"},"setBackgroundImage:forBarPosition:barMetrics:":{"abs":"Sets the image to use for the background in a given position and with given metrics.","dec":"- (void)setBackgroundImage:(UIImage *)backgroundImage forBarPosition:(UIBarPosition)barPosition barMetrics:(UIBarMetrics)barMetrics"},"setImage:forSearchBarIcon:state:":{"abs":"Sets the image for a given search bar icon type and control state.","dec":"- (void)setImage:(UIImage *)iconImage forSearchBarIcon:(UISearchBarIcon)icon state:(UIControlState)state"},"setPositionAdjustment:forSearchBarIcon:":{"abs":"Returns the position adjustment for a given icon.","dec":"- (void)setPositionAdjustment:(UIOffset)adjustment forSearchBarIcon:(UISearchBarIcon)icon"},"setScopeBarButtonBackgroundImage:forState:":{"abs":"Sets the background image for the scope bar button in a given state.","dec":"- (void)setScopeBarButtonBackgroundImage:(UIImage *)backgroundImage forState:(UIControlState)state"},"setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:":{"abs":"Sets the divider image to use for a given combination of left and right segment states.","dec":"- (void)setScopeBarButtonDividerImage:(UIImage *)dividerImage forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState"},"setScopeBarButtonTitleTextAttributes:forState:":{"abs":"Sets the text attributes for the search bar’ button’s title string for a given state.","dec":"- (void)setScopeBarButtonTitleTextAttributes:(NSDictionary *)attributes forState:(UIControlState)state"},"setSearchFieldBackgroundImage:forState:":{"abs":"Sets the search text field image for a given state.","dec":"- (void)setSearchFieldBackgroundImage:(UIImage *)backgroundImage forState:(UIControlState)state"},"setShowsCancelButton:animated:":{"abs":"Sets the display state of the cancel button optionally with animation.","dec":"- (void)setShowsCancelButton:(BOOL)showsCancelButton animated:(BOOL)animated"}},"[=]":{"UISearchBarIconSearch":"","UISearchBarIconClear":"","UISearchBarIconBookmark":"","UISearchBarIconResultsList":"","UISearchBarStyleDefault":"","UISearchBarStyleProminent":"","UISearchBarStyleMinimal":""}};

ClassRef.UISearchDisplayController = {"[:]":"NSObject","[.]":{"active":{"abs":"The visibility state of the search interface.","dec":"@property(nonatomic, getter=isActive) BOOL active"},"delegate":{"abs":"The controller’s delegate.","dec":"@property(nonatomic, assign) id<UISearchDisplayDelegate> delegate"},"displaysSearchBarInNavigationBar":{"abs":"Specifies that the navigation bar contains a search bar.","dec":"@property(nonatomic, assign) BOOL displaysSearchBarInNavigationBar"},"navigationItem":{"abs":"Represents the search display controller in a navigation controller’s navigation bar. (read-only)","dec":"@property(nonatomic, readonly) UINavigationItem *navigationItem"},"searchBar":{"abs":"The search bar. (read-only)","dec":"@property(nonatomic, readonly) UISearchBar *searchBar"},"searchContentsController":{"abs":"The view controller that manages the contents being searched. (read-only)","dec":"@property(nonatomic, readonly) UIViewController *searchContentsController"},"searchResultsDataSource":{"abs":"The data source for the table view in which the search results are displayed.","dec":"@property(nonatomic, assign) id<UITableViewDataSource> searchResultsDataSource"},"searchResultsDelegate":{"abs":"The delegate for the table view in which the search results are displayed.","dec":"@property(nonatomic, assign) id<UITableViewDelegate> searchResultsDelegate"},"searchResultsTableView":{"abs":"The table view in which the search results are displayed. (read-only)","dec":"@property(nonatomic, readonly) UITableView *searchResultsTableView"},"searchResultsTitle":{"abs":"The title for the search results view.","dec":"@property(nonatomic, copy) NSString *searchResultsTitle"}},"[-]":{"initWithSearchBar:contentsController:":{"abs":"Returns a display controller initialized with the given search bar and contents controller.","dec":"- (id)initWithSearchBar:(UISearchBar *)searchBar contentsController:(UIViewController *)viewController"},"setActive:animated:":{"abs":"Displays or hides the search interface, optionally with animation.","dec":"- (void)setActive:(BOOL)visible animated:(BOOL)animated"}}};

ClassRef.UISegmentedControl = {"[:]":"UIControl : UIView : UIResponder : NSObject","[.]":{"apportionsSegmentWidthsByContent":{"abs":"Indicates whether the control attempts to adjust segment widths based on their content widths.","dec":"@property(nonatomic) BOOL apportionsSegmentWidthsByContent"},"momentary":{"abs":"A Boolean value that determines whether segments in the receiver show selected state.","dec":"@property(nonatomic, getter=isMomentary) BOOL momentary"},"numberOfSegments":{"abs":"Returns the number of segments the receiver has. (read-only)","dec":"@property(nonatomic, readonly) NSUInteger numberOfSegments"},"selectedSegmentIndex":{"abs":"The index number identifying the selected segment (that is, the last segment touched).","dec":"@property(nonatomic) NSInteger selectedSegmentIndex"},"tintColor":{"abs":"The tint color of the segmented control.","dec":"@property(nonatomic, retain) UIColor *tintColor"}},"[-]":{"backgroundImageForState:barMetrics:":{"abs":"Returns the background image for a given state and bar metrics.","dec":"- (UIImage *)backgroundImageForState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics"},"contentOffsetForSegmentAtIndex:":{"abs":"Returns the offset for drawing the content (image or text) of the specified segment.","dec":"- (CGSize)contentOffsetForSegmentAtIndex:(NSUInteger)segment"},"contentPositionAdjustmentForSegmentType:barMetrics:":{"abs":"Returns the positioning offset for a given segment and bar metrics.","dec":"- (UIOffset)contentPositionAdjustmentForSegmentType:(UISegmentedControlSegment)leftCenterRightOrAlone barMetrics:(UIBarMetrics)barMetrics"},"dividerImageForLeftSegmentState:rightSegmentState:barMetrics:":{"abs":"Returns the divider image used for a given combination of left and right segment states and bar metrics.","dec":"- (UIImage *)dividerImageForLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState barMetrics:(UIBarMetrics)barMetrics"},"imageForSegmentAtIndex:":{"abs":"Returns the image for a specific segment","dec":"- (UIImage *)imageForSegmentAtIndex:(NSUInteger)segment."},"initWithItems:":{"abs":"Initializes and returns a segmented control with segments having the given titles or images.","dec":"- (id)initWithItems:(NSArray *)items"},"insertSegmentWithImage:atIndex:animated:":{"abs":"Inserts a segment at a specified position in the receiver and gives it an image as content.","dec":"- (void)insertSegmentWithImage:(UIImage *)image atIndex:(NSUInteger)segment animated:(BOOL)animated"},"insertSegmentWithTitle:atIndex:animated:":{"abs":"Inserts a segment at a specific position in the receiver and gives it a title as content.","dec":"- (void)insertSegmentWithTitle:(NSString *)title atIndex:(NSUInteger)segment animated:(BOOL)animated"},"isEnabledForSegmentAtIndex:":{"abs":"Returns whether the indicated segment is enabled.","dec":"- (BOOL)isEnabledForSegmentAtIndex:(NSUInteger)segment"},"removeAllSegments":{"abs":"Removes all segments of the receiver","dec":"- (void)removeAllSegments"},"removeSegmentAtIndex:animated:":{"abs":"Removes the specified segment from the receiver, optionally animating the transition.","dec":"- (void)removeSegmentAtIndex:(NSUInteger)segment animated:(BOOL)animated"},"setBackgroundImage:forState:barMetrics:":{"abs":"Sets the background image for a given state and bar metrics.","dec":"- (void)setBackgroundImage:(UIImage *)backgroundImage forState:(UIControlState)state barMetrics:(UIBarMetrics)barMetrics"},"setContentOffset:forSegmentAtIndex:":{"abs":"Adjusts the offset for drawing the content (image or text) of the specified segment.","dec":"- (void)setContentOffset:(CGSize)offset forSegmentAtIndex:(NSUInteger)segment"},"setContentPositionAdjustment:forSegmentType:barMetrics:":{"abs":"Returns the content positioning offset for a given segment and bar metrics.","dec":"- (void)setContentPositionAdjustment:(UIOffset)adjustment forSegmentType:(UISegmentedControlSegment)leftCenterRightOrAlone barMetrics:(UIBarMetrics)barMetrics"},"setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:":{"abs":"Sets the divider image used for a given combination of left and right segment states and bar metrics.","dec":"- (void)setDividerImage:(UIImage *)dividerImage forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState barMetrics:(UIBarMetrics)barMetrics"},"setEnabled:forSegmentAtIndex:":{"abs":"Enables the specified segment.","dec":"- (void)setEnabled:(BOOL)enabled forSegmentAtIndex:(NSUInteger)segment"},"setImage:forSegmentAtIndex:":{"abs":"Sets the content of a segment to a given image.","dec":"- (void)setImage:(UIImage *)image forSegmentAtIndex:(NSUInteger)segment"},"setTitle:forSegmentAtIndex:":{"abs":"Sets the title of a segment.","dec":"- (void)setTitle:(NSString *)title forSegmentAtIndex:(NSUInteger)segment"},"setTitleTextAttributes:forState:":{"abs":"Sets the text attributes of the title for a given control state.","dec":"- (void)setTitleTextAttributes:(NSDictionary *)attributes forState:(UIControlState)state"},"setWidth:forSegmentAtIndex:":{"abs":"Sets the width of the specified segment of the receiver.","dec":"- (void)setWidth:(CGFloat)width forSegmentAtIndex:(NSUInteger)segment"},"titleForSegmentAtIndex:":{"abs":"Returns the title of the specified segment.","dec":"- (NSString *)titleForSegmentAtIndex:(NSUInteger)segment"},"titleTextAttributesForState:":{"abs":"Returns the text attributes of the title for a given control state.","dec":"- (NSDictionary *)titleTextAttributesForState:(UIControlState)state"},"widthForSegmentAtIndex:":{"abs":"Returns the width of the indicated segment of the receiver.","dec":"- (CGFloat)widthForSegmentAtIndex:(NSUInteger)segment"}},"[=]":{"UISegmentedControlStylePlain":"","UISegmentedControlStyleBordered":"","UISegmentedControlStyleBar":"","UISegmentedControlStyleBezeled":"","UISegmentedControlNoSegment":"","UISegmentedControlSegmentAny":"","UISegmentedControlSegmentLeft":"","UISegmentedControlSegmentCenter":"","UISegmentedControlSegmentRight":"","UISegmentedControlSegmentAlone":""}};

ClassRef.UISimpleTextPrintFormatter = {"[:]":"UIPrintFormatter : NSObject","[.]":{"attributedText":{"abs":"A string of attributed text.","dec":"@property(nonatomic,copy) NSAttributedString *attributedText"},"color":{"abs":"The color of the printed text.","dec":"@property(nonatomic, retain) UIColor *color"},"font":{"abs":"The font of the printed text.","dec":"@property(nonatomic, retain) UIFont *font"},"text":{"abs":"A string of plain text.","dec":"@property(nonatomic, copy) NSString *text"},"textAlignment":{"abs":"The alignment of the printed text.","dec":"@property(nonatomic) UITextAlignment textAlignment"}},"[-]":{"initWithAttributedText:":{"abs":"Returns a simple-text print formatter initialized with attributed text.","dec":"- (instancetype)initWithAttributedText:(NSAttributedString *)attributedText"},"initWithText:":{"abs":"Returns a simple-text print formatter initialized with plain text.","dec":"- (id)initWithText:(NSString *)text"}}};

ClassRef.UISlider = {"[:]":"UIControl : UIView : UIResponder : NSObject","[.]":{"continuous":{"abs":"Contains a Boolean value indicating whether changes in the sliders value generate continuous update events.","dec":"@property(nonatomic, getter=isContinuous) BOOL continuous"},"currentMaximumTrackImage":{"abs":"Contains the maximum track image currently being used to render the receiver. (read-only)","dec":"@property(nonatomic, readonly) UIImage *currentMaximumTrackImage"},"currentMinimumTrackImage":{"abs":"Contains the minimum track image currently being used to render the receiver. (read-only)","dec":"@property(nonatomic, readonly) UIImage *currentMinimumTrackImage"},"currentThumbImage":{"abs":"Contains the thumb image currently being used to render the receiver. (read-only)","dec":"@property(nonatomic, readonly) UIImage *currentThumbImage"},"maximumTrackTintColor":{"abs":"The color used to tint the standard maximum track images.","dec":"@property(nonatomic, retain) UIColor *maximumTrackTintColor"},"maximumValue":{"abs":"Contains the maximum value of the receiver.","dec":"@property(nonatomic) float maximumValue"},"maximumValueImage":{"abs":"Contains the image that is drawn on the side of the slider representing the maximum value.","dec":"@property(nonatomic, retain) UIImage *maximumValueImage"},"minimumTrackTintColor":{"abs":"The color used to tint the standard minimum track images.","dec":"@property(nonatomic, retain) UIColor *minimumTrackTintColor"},"minimumValue":{"abs":"Contains the minimum value of the receiver.","dec":"@property(nonatomic) float minimumValue"},"minimumValueImage":{"abs":"Contains the image that is drawn on the side of the slider representing the minimum value.","dec":"@property(nonatomic, retain) UIImage *minimumValueImage"},"thumbTintColor":{"abs":"The color used to tint the standard thumb images.","dec":"@property(nonatomic, retain) UIColor *thumbTintColor"},"value":{"abs":"Contains the receiver’s current value.","dec":"@property(nonatomic) float value"}},"[-]":{"maximumTrackImageForState:":{"abs":"Returns the maximum track image associated with the specified control state.","dec":"- (UIImage *)maximumTrackImageForState:(UIControlState)state"},"maximumValueImageRectForBounds:":{"abs":"Returns the drawing rectangle for the maximum value image.","dec":"- (CGRect)maximumValueImageRectForBounds:(CGRect)bounds"},"minimumTrackImageForState:":{"abs":"Returns the minimum track image associated with the specified control state.","dec":"- (UIImage *)minimumTrackImageForState:(UIControlState)state"},"minimumValueImageRectForBounds:":{"abs":"Returns the drawing rectangle for the minimum value image.","dec":"- (CGRect)minimumValueImageRectForBounds:(CGRect)bounds"},"setMaximumTrackImage:forState:":{"abs":"Assigns a maximum track image to the specified control states.","dec":"- (void)setMaximumTrackImage:(UIImage *)image forState:(UIControlState)state"},"setMinimumTrackImage:forState:":{"abs":"Assigns a minimum track image to the specified control states.","dec":"- (void)setMinimumTrackImage:(UIImage *)image forState:(UIControlState)state"},"setThumbImage:forState:":{"abs":"Assigns a thumb image to the specified control states.","dec":"- (void)setThumbImage:(UIImage *)image forState:(UIControlState)state"},"setValue:animated:":{"abs":"Sets the receiver’s current value, allowing you to animate the change visually.","dec":"- (void)setValue:(float)value animated:(BOOL)animated"},"thumbImageForState:":{"abs":"Returns the thumb image associated with the specified control state.","dec":"- (UIImage *)thumbImageForState:(UIControlState)state"},"thumbRectForBounds:trackRect:value:":{"abs":"Returns the drawing rectangle for the slider’s thumb image.","dec":"- (CGRect)thumbRectForBounds:(CGRect)bounds trackRect:(CGRect)rect value:(float)value"},"trackRectForBounds:":{"abs":"Returns the drawing rectangle for the slider’s track.","dec":"- (CGRect)trackRectForBounds:(CGRect)bounds"}}};

ClassRef.UISnapBehavior = {"[:]":"UIDynamicBehavior : NSObject","[.]":{"damping":{"abs":"The amount of oscillation of a dynamic item during the conclusion of a snap.","dec":"@property(nonatomic, assign) CGFloat damping"}},"[-]":{"initWithItem:snapToPoint:":{"abs":"Initializes a snap behavior with a dynamic item and a snap point.","dec":"- (instancetype)initWithItem:(id<UIDynamicItem>)item snapToPoint:(CGPoint)point"}}};

ClassRef.UISplitViewController = {"[:]":"UIViewController : UIResponder : NSObject","[.]":{"delegate":{"abs":"The delegate you want to receive split view controller messages.","dec":"@property(nonatomic, assign) id <UISplitViewControllerDelegate> delegate"},"presentsWithGesture":{"abs":"Specifies whether the hidden view can be presented and dismissed via a swipe gesture.","dec":"@property (nonatomic) BOOL presentsWithGesture"},"viewControllers":{"abs":"The array of view controllers managed by the receiver.","dec":"@property(nonatomic, copy) NSArray *viewControllers"}}};

ClassRef.UIStepper = {"[:]":"UIControl : UIView : UIResponder : NSObject","[.]":{"autorepeat":{"abs":"The automatic vs. nonautomatic repeat state of the stepper.","dec":"@property(nonatomic) BOOL autorepeat"},"continuous":{"abs":"The continuous vs. noncontinuous state of the stepper.","dec":"@property(nonatomic, getter=isContinuous) BOOL continuous"},"maximumValue":{"abs":"The highest possible numeric value for the stepper.","dec":"@property(nonatomic) double maximumValue"},"minimumValue":{"abs":"The lowest possible numeric value for the stepper.","dec":"@property(nonatomic) double minimumValue"},"stepValue":{"abs":"The step, or increment, value for the stepper.","dec":"@property(nonatomic) double stepValue"},"tintColor":{"abs":"The tint color to apply to key elements in the stepper.","dec":"@property(nonatomic, retain) UIColor *tintColor"},"value":{"abs":"The numeric value of the stepper.","dec":"@property(nonatomic) double value"},"wraps":{"abs":"The wrap vs. no-wrap state of the stepper.","dec":"@property(nonatomic) BOOL wraps"}},"[-]":{"backgroundImageForState:":{"abs":"Returns the background image associated with the specified control state.","dec":"- (UIImage *)backgroundImageForState:(UIControlState)state"},"decrementImageForState:":{"abs":"Returns the image used for the decrement glyph of the control.","dec":"- (UIImage *)decrementImageForState:(UIControlState)state"},"dividerImageForLeftSegmentState:rightSegmentState:":{"abs":"Returns the divider image for the given combination of left and right states.","dec":"- (UIImage *)dividerImageForLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState"},"incrementImageForState:":{"abs":"Returns the image used for the increment glyph of the control.","dec":"- (UIImage *)incrementImageForState:(UIControlState)state"},"setBackgroundImage:forState:":{"abs":"Sets the background image for the control when it is in the specified state.","dec":"- (void)setBackgroundImage:(UIImage *)image forState:(UIControlState)state"},"setDecrementImage:forState:":{"abs":"Sets the image to use for the decrement glyph of the control.","dec":"- (void)setDecrementImage:(UIImage *)image forState:(UIControlState)state"},"setDividerImage:forLeftSegmentState:rightSegmentState:":{"abs":"Sets the image to use for the given combination of left and right states.","dec":"- (void)setDividerImage:(UIImage *)image forLeftSegmentState:(UIControlState)leftState rightSegmentState:(UIControlState)rightState"},"setIncrementImage:forState:":{"abs":"Sets the image to use for the increment glyph of the control","dec":"- (void)setIncrementImage:(UIImage *)image forState:(UIControlState)state"}}};

ClassRef.UIStoryboard = {"[:]":"NSObject","[+]":{"storyboardWithName:bundle:":{"abs":"Creates and returns a storyboard object for the specified storyboard resource file.","dec":"+ (UIStoryboard *)storyboardWithName:(NSString *)name bundle:(NSBundle *)storyboardBundleOrNil"}},"[-]":{"instantiateInitialViewController":{"abs":"Instantiates and returns the initial view controller in the view controller graph.","dec":"- (id)instantiateInitialViewController"},"instantiateViewControllerWithIdentifier:":{"abs":"Instantiates and returns the view controller with the specified identifier.","dec":"- (id)instantiateViewControllerWithIdentifier:(NSString *)identifier"}}};

ClassRef.UIStoryboardPopoverSegue = {"[:]":"UIStoryboardSegue : NSObject","[.]":{"popoverController":{"abs":"The popover controller used to display the destination view controller. (read-only)","dec":"@property(nonatomic, retain, readonly) UIPopoverController *popoverController"}}};

ClassRef.UIStoryboardSegue = {"[:]":"NSObject","[.]":{"destinationViewController":{"abs":"The destination view controller for the segue. (read-only)","dec":"@property(nonatomic, readonly) id destinationViewController"},"identifier":{"abs":"The identifier for the segue object. (read-only)","dec":"@property(nonatomic, readonly) NSString *identifier"},"sourceViewController":{"abs":"The source view controller for the segue. (read-only)","dec":"@property(nonatomic, readonly) id sourceViewController"}},"[+]":{"segueWithIdentifier:source:destination:performHandler:":{"abs":"Creates a segue that calls a block to perform the segue transition.","dec":"+ (id)segueWithIdentifier:(NSString *)identifier source:(UIViewController *)source destination:(UIViewController *)destination performHandler:(void (^)(void))performHandler"}},"[-]":{"initWithIdentifier:source:destination:":{"abs":"Initializes and returns a storyboard segue object for use in performing a segue.","dec":"- (id)initWithIdentifier:(NSString *)identifier source:(UIViewController *)source destination:(UIViewController *)destination"},"perform":{"abs":"Performs the visual transition for the segue.","dec":"- (void)perform"}}};

ClassRef.UISwipeGestureRecognizer = {"[:]":"UIGestureRecognizer : NSObject","[.]":{"direction":{"abs":"The permitted direction of the swipe for this gesture recognizer.","dec":"@property(nonatomic) UISwipeGestureRecognizerDirection direction"},"numberOfTouchesRequired":{"abs":"The number of touches that must be present for the swipe gesture to be recognized.","dec":"@property(nonatomic) NSUInteger numberOfTouchesRequired"}},"[=]":{"UISwipeGestureRecognizerDirectionRight":"","UISwipeGestureRecognizerDirectionLeft":"","UISwipeGestureRecognizerDirectionUp":"","UISwipeGestureRecognizerDirectionDown":""}};

ClassRef.UISwitch = {"[:]":"UIControl : UIView : UIResponder : NSObject","[.]":{"offImage":{"abs":"The image displayed while the switch is in the off position.","dec":"@property(nonatomic, retain) UIImage *offImage"},"on":{"abs":"A Boolean value that determines the off/on state of the switch.","dec":"@property(nonatomic, getter=isOn) BOOL on"},"onImage":{"abs":"The image displayed when the switch is in the on position.","dec":"@property(nonatomic, retain) UIImage *onImage"},"onTintColor":{"abs":"The color used to tint the appearance of the switch when it is turned on.","dec":"@property(nonatomic, retain) UIColor *onTintColor"},"thumbTintColor":{"abs":"The color used to tint the appearance of the thumb.","dec":"@property(nonatomic, retain) UIColor *thumbTintColor"},"tintColor":{"abs":"The color used to tint the outline of the switch when it is turned off.","dec":"@property(nonatomic, retain) UIColor *tintColor"}},"[-]":{"initWithFrame:":{"abs":"Returns an initialized switch object.","dec":"- (id)initWithFrame:(CGRect)frame"},"setOn:animated:":{"abs":"Set the state of the switch to On or Off, optionally animating the transition.","dec":"- (void)setOn:(BOOL)on animated:(BOOL)animated"}}};

ClassRef.UITabBar = {"[:]":"UIView : UIResponder : NSObject","[.]":{"backgroundImage":{"abs":"The background image for the tab bar.","dec":"@property(nonatomic, retain) UIImage *backgroundImage"},"barStyle":{"abs":"The tab bar style that specifies its appearance.","dec":"@property(nonatomic) UIBarStyle barStyle"},"barTintColor":{"abs":"The tint color to apply to the tab bar background.","dec":"@property(nonatomic, retain) UIColor *barTintColor"},"delegate":{"abs":"The tab bar’s delegate object.","dec":"@property(nonatomic, assign) id<UITabBarDelegate> delegate"},"itemPositioning":{"abs":"The positioning scheme for the tab bar items in the tab bar.","dec":"@property(nonatomic) UITabBarItemPositioning itemPositioning"},"items":{"abs":"The items displayed on the tab bar.","dec":"@property(nonatomic, copy) NSArray *items"},"itemSpacing":{"abs":"The custom inter-item spacing for tab bar items, in points, when using centered-style positioning.","dec":"@property(nonatomic) CGFloat itemSpacing"},"itemWidth":{"abs":"The custom item width for tab bar items, in points, when using centered-style positioning.","dec":"@property(nonatomic) CGFloat itemWidth"},"selectedImageTintColor":{"abs":"The tint color applied to the selected tab bar item.","dec":"@property(nonatomic, retain) UIColor *selectedImageTintColor"},"selectedItem":{"abs":"The currently selected item on the tab bar.","dec":"@property(nonatomic, assign) UITabBarItem *selectedItem"},"selectionIndicatorImage":{"abs":"The image used for the selection indicator.","dec":"@property(nonatomic, retain) UIImage *selectionIndicatorImage"},"shadowImage":{"abs":"The shadow image to be used for the tab bar.","dec":"@property(nonatomic, retain) UIImage *shadowImage"},"tintColor":{"abs":"The tint color to apply to the tab bar’s tab bar items.","dec":"@property(nonatomic, retain) UIColor *tintColor"},"translucent":{"abs":"A Boolean value that indicates whether the tab bar is translucent (YES) or not (NO).","dec":"@property(nonatomic, getter=isTranslucent) BOOL translucent"}},"[-]":{"beginCustomizingItems:":{"abs":"Presents a modal view allowing the user to customize the tab bar by adding, removing, and rearranging items on the tab bar.","dec":"- (void)beginCustomizingItems:(NSArray *)items"},"endCustomizingAnimated:":{"abs":"Dismisses the modal view used to modify items on the tab bar.","dec":"- (BOOL)endCustomizingAnimated:(BOOL)animated"},"isCustomizing":{"abs":"Returns a Boolean value indicating whether the user is customizing the tab bar.","dec":"- (BOOL)isCustomizing"},"setItems:animated:":{"abs":"Sets the items on the tab bar, with or without animation.","dec":"- (void)setItems:(NSArray *)items animated:(BOOL)animated"}},"[=]":{"UITabBarItemPositioningAutomatic":"","UITabBarItemPositioningFill":"","UITabBarItemPositioningCentered":""}};

ClassRef.UITabBarController = {"[:]":"UIViewController : UIResponder : NSObject","[.]":{"customizableViewControllers":{"abs":"The subset of view controllers managed by this tab bar controller that can be customized.","dec":"@property(nonatomic, copy) NSArray *customizableViewControllers"},"delegate":{"abs":"The tab bar controller’s delegate object.","dec":"@property(nonatomic, assign) id<UITabBarControllerDelegate> delegate"},"moreNavigationController":{"abs":"The view controller that manages the More navigation interface. (read-only)","dec":"@property(nonatomic, readonly) UINavigationController *moreNavigationController"},"selectedIndex":{"abs":"The index of the view controller associated with the currently selected tab item.","dec":"@property(nonatomic) NSUInteger selectedIndex"},"selectedViewController":{"abs":"The view controller associated with the currently selected tab item.","dec":"@property(nonatomic, assign) UIViewController *selectedViewController"},"tabBar":{"abs":"The tab bar view associated with this controller. (read-only)","dec":"@property(nonatomic,readonly) UITabBar *tabBar"},"viewControllers":{"abs":"An array of the root view controllers displayed by the tab bar interface.","dec":"@property(nonatomic, copy) NSArray *viewControllers"}},"[-]":{"setViewControllers:animated:":{"abs":"Sets the root view controllers of the tab bar controller.","dec":"- (void)setViewControllers:(NSArray *)viewControllers animated:(BOOL)animated"}}};

ClassRef.UITabBarItem = {"[:]":"UIBarItem : NSObject","[.]":{"badgeValue":{"abs":"Text that is displayed in the upper-right corner of the item with a surrounding red oval.","dec":"@property(nonatomic, copy) NSString *badgeValue"},"selectedImage":{"abs":"The image displayed when the tab bar item is selected.","dec":"@property(nonatomic, retain) UIImage *selectedImage"}},"[-]":{"initWithTabBarSystemItem:tag:":{"abs":"Creates and returns a new item containing the specified system item.","dec":"- (id)initWithTabBarSystemItem:(UITabBarSystemItem)systemItem tag:(NSInteger)tag"},"initWithTitle:image:selectedImage:":{"abs":"Creates and returns a new item with the specified title, unselected image, and selected image.","dec":"- (instancetype)initWithTitle:(NSString *)title image:(UIImage *)image selectedImage:(UIImage *)selectedImage"},"initWithTitle:image:tag:":{"abs":"Creates and returns a new item using the specified properties.","dec":"- (id)initWithTitle:(NSString *)title image:(UIImage *)image tag:(NSInteger)tag"},"setTitlePositionAdjustment:":{"abs":"Sets the offset to use to adjust the title position.","dec":"- (void)setTitlePositionAdjustment:(UIOffset)adjustment"},"titlePositionAdjustment":{"abs":"Returns the offset to use to adjust the title position.","dec":"- (UIOffset)titlePositionAdjustment"}},"[=]":{"UITabBarSystemItemMore":"","UITabBarSystemItemFavorites":"","UITabBarSystemItemFeatured":"","UITabBarSystemItemTopRated":"","UITabBarSystemItemRecents":"","UITabBarSystemItemContacts":"","UITabBarSystemItemHistory":"","UITabBarSystemItemBookmarks":"","UITabBarSystemItemSearch":"","UITabBarSystemItemDownloads":"","UITabBarSystemItemMostRecent":"","UITabBarSystemItemMostViewed":""}};

ClassRef.UITableView = {"[:]":"UIScrollView : UIView : UIResponder : NSObject","[.]":{"allowsMultipleSelection":{"abs":"A Boolean value that determines whether users can select more than one row outside of editing mode.","dec":"@property(nonatomic) BOOL allowsMultipleSelection"},"allowsMultipleSelectionDuringEditing":{"abs":"A Boolean value that controls whether users can select more than one cell simultaneously in editing mode.","dec":"@property(nonatomic) BOOL allowsMultipleSelectionDuringEditing"},"allowsSelection":{"abs":"A Boolean value that determines whether users can select a row.","dec":"@property(nonatomic) BOOL allowsSelection"},"allowsSelectionDuringEditing":{"abs":"A Boolean value that determines whether users can select cells while the receiver is in editing mode.","dec":"@property(nonatomic) BOOL allowsSelectionDuringEditing"},"backgroundView":{"abs":"The background view of the table view.","dec":"@property(nonatomic, readwrite, retain) UIView *backgroundView"},"dataSource":{"abs":"The object that acts as the data source of the receiving table view.","dec":"@property(nonatomic, assign) id<UITableViewDataSource> dataSource"},"delegate":{"abs":"The object that acts as the delegate of the receiving table view.","dec":"@property(nonatomic, assign) id<UITableViewDelegate> delegate"},"editing":{"abs":"A Boolean value that determines whether the receiver is in editing mode.","dec":"@property(nonatomic, getter=isEditing) BOOL editing"},"estimatedRowHeight":{"abs":"The estimated height of rows in the table view.","dec":"@property (nonatomic) CGFloat estimatedRowHeight"},"estimatedSectionFooterHeight":{"abs":"The estimated height of section footers in the table view.","dec":"@property(nonatomic) CGFloat estimatedSectionFooterHeight"},"estimatedSectionHeaderHeight":{"abs":"The estimated height of section headers in the table view.","dec":"@property(nonatomic) CGFloat estimatedSectionHeaderHeight"},"rowHeight":{"abs":"The height of each row (table cell) in the receiver.","dec":"@property(nonatomic) CGFloat rowHeight"},"sectionFooterHeight":{"abs":"The height of section footers in the receiving table view.","dec":"@property(nonatomic) CGFloat sectionFooterHeight"},"sectionHeaderHeight":{"abs":"The height of section headers in the receiving table view.","dec":"@property(nonatomic) CGFloat sectionHeaderHeight"},"sectionIndexBackgroundColor":{"abs":"The color to use for the background of the table view’s section index while not being touched.","dec":"@property(nonatomic, retain) UIColor *sectionIndexBackgroundColor"},"sectionIndexColor":{"abs":"The color to use for the table view’s index text.","dec":"@property(nonatomic, retain) UIColor *sectionIndexColor"},"sectionIndexMinimumDisplayRowCount":{"abs":"The number of table rows at which to display the index list on the right edge of the table.","dec":"@property(nonatomic) NSInteger sectionIndexMinimumDisplayRowCount"},"sectionIndexTrackingBackgroundColor":{"abs":"The color to use for the table view’s index background area.","dec":"@property(nonatomic, retain) UIColor *sectionIndexTrackingBackgroundColor"},"separatorColor":{"abs":"The color of separator rows in the table view.","dec":"@property(nonatomic, retain) UIColor *separatorColor"},"separatorInset":{"abs":"Specifies the default inset of cell separators.","dec":"@property (nonatomic) UIEdgeInsets separatorInset"},"separatorStyle":{"abs":"The style for table cells used as separators.","dec":"@property(nonatomic) UITableViewCellSeparatorStyle separatorStyle"},"style":{"abs":"Returns the style of the receiver. (read-only)","dec":"@property(nonatomic, readonly) UITableViewStyle style"},"tableFooterView":{"abs":"Returns an accessory view that is displayed below the table.","dec":"@property(nonatomic, retain) UIView *tableFooterView"},"tableHeaderView":{"abs":"Returns an accessory view that is displayed above the table.","dec":"@property(nonatomic, retain) UIView *tableHeaderView"}},"[-]":{"beginUpdates":{"abs":"Begin a series of method calls that insert, delete, or select rows and sections of the receiver.","dec":"- (void)beginUpdates"},"cellForRowAtIndexPath:":{"abs":"Returns the table cell at the specified index path.","dec":"- (UITableViewCell *)cellForRowAtIndexPath:(NSIndexPath *)indexPath"},"deleteRowsAtIndexPaths:withRowAnimation:":{"abs":"Deletes the rows specified by an array of index paths, with an option to animate the deletion.","dec":"- (void)deleteRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation"},"deleteSections:withRowAnimation:":{"abs":"Deletes one or more sections in the receiver, with an option to animate the deletion.","dec":"- (void)deleteSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation"},"dequeueReusableCellWithIdentifier:":{"abs":"Returns a reusable table-view cell object located by its identifier.","dec":"- (id)dequeueReusableCellWithIdentifier:(NSString *)identifier"},"dequeueReusableCellWithIdentifier:forIndexPath:":{"abs":"Returns a reusable table-view cell object for the specified reuse identifier.","dec":"- (id)dequeueReusableCellWithIdentifier:(NSString *)identifier forIndexPath:(NSIndexPath *)indexPath"},"dequeueReusableHeaderFooterViewWithIdentifier:":{"abs":"Returns a reusable header or footer view located by its identifier.","dec":"- (id)dequeueReusableHeaderFooterViewWithIdentifier:(NSString *)identifier"},"deselectRowAtIndexPath:animated:":{"abs":"Deselects a given row identified by index path, with an option to animate the deselection.","dec":"- (void)deselectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated"},"endUpdates":{"abs":"Conclude a series of method calls that insert, delete, select, or reload rows and sections of the receiver.","dec":"- (void)endUpdates"},"footerViewForSection:":{"abs":"Returns the footer view associated with the specified section.","dec":"- (UITableViewHeaderFooterView *)footerViewForSection:(NSInteger)section"},"headerViewForSection:":{"abs":"Returns the header view associated with the specified section.","dec":"- (UITableViewHeaderFooterView *)headerViewForSection:(NSInteger)section"},"indexPathForCell:":{"abs":"Returns an index path representing the row and section of a given table-view cell.","dec":"- (NSIndexPath *)indexPathForCell:(UITableViewCell *)cell"},"indexPathForRowAtPoint:":{"abs":"Returns an index path identifying the row and section at the given point.","dec":"- (NSIndexPath *)indexPathForRowAtPoint:(CGPoint)point"},"indexPathForSelectedRow":{"abs":"Returns an index path identifying the row and section of the selected row.","dec":"- (NSIndexPath *)indexPathForSelectedRow"},"indexPathsForRowsInRect:":{"abs":"An array of index paths each representing a row enclosed by a given rectangle.","dec":"- (NSArray *)indexPathsForRowsInRect:(CGRect)rect"},"indexPathsForSelectedRows":{"abs":"Returns the index paths represented the selected rows.","dec":"- (NSArray *)indexPathsForSelectedRows"},"indexPathsForVisibleRows":{"abs":"Returns an array of index paths each identifying a visible row in the receiver.","dec":"- (NSArray *)indexPathsForVisibleRows"},"initWithFrame:style:":{"abs":"Initializes and returns a table view object having the given frame and style.","dec":"- (id)initWithFrame:(CGRect)frame style:(UITableViewStyle)style"},"insertRowsAtIndexPaths:withRowAnimation:":{"abs":"Inserts rows in the receiver at the locations identified by an array of index paths, with an option to animate the insertion.","dec":"- (void)insertRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation"},"insertSections:withRowAnimation:":{"abs":"Inserts one or more sections in the receiver, with an option to animate the insertion.","dec":"- (void)insertSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation"},"moveRowAtIndexPath:toIndexPath:":{"abs":"Moves the row at a specified location to a destination location.","dec":"- (void)moveRowAtIndexPath:(NSIndexPath *)indexPath toIndexPath:(NSIndexPath *)newIndexPath"},"moveSection:toSection:":{"abs":"Moves a section to a new location in the table view.","dec":"- (void)moveSection:(NSInteger)section toSection:(NSInteger)newSection"},"numberOfRowsInSection:":{"abs":"Returns the number of rows (table cells) in a specified section.","dec":"- (NSInteger)numberOfRowsInSection:(NSInteger)section"},"numberOfSections":{"abs":"Returns the number of sections for the receiver.","dec":"- (NSInteger)numberOfSections"},"rectForFooterInSection:":{"abs":"Returns the drawing area for the footer of the specified section.","dec":"- (CGRect)rectForFooterInSection:(NSInteger)section"},"rectForHeaderInSection:":{"abs":"Returns the drawing area for the header of the specified section.","dec":"- (CGRect)rectForHeaderInSection:(NSInteger)section"},"rectForRowAtIndexPath:":{"abs":"Returns the drawing area for a row identified by index path.","dec":"- (CGRect)rectForRowAtIndexPath:(NSIndexPath *)indexPath"},"rectForSection:":{"abs":"Returns the drawing area for a specified section of the receiver.","dec":"- (CGRect)rectForSection:(NSInteger)section"},"registerClass:forCellReuseIdentifier:":{"abs":"Registers a class for use in creating new table cells.","dec":"- (void)registerClass:(Class)cellClass forCellReuseIdentifier:(NSString *)identifier"},"registerClass:forHeaderFooterViewReuseIdentifier:":{"abs":"Registers a class for use in creating new table header or footer views.","dec":"- (void)registerClass:(Class)aClass forHeaderFooterViewReuseIdentifier:(NSString *)identifier"},"registerNib:forCellReuseIdentifier:":{"abs":"Registers a nib object containing a cell with the table view under a specified identifier.","dec":"- (void)registerNib:(UINib *)nib forCellReuseIdentifier:(NSString *)identifier"},"registerNib:forHeaderFooterViewReuseIdentifier:":{"abs":"Registers a nib object containing a header or footer with the table view under a specified identifier.","dec":"- (void)registerNib:(UINib *)nib forHeaderFooterViewReuseIdentifier:(NSString *)identifier"},"reloadData":{"abs":"Reloads the rows and sections of the receiver.","dec":"- (void)reloadData"},"reloadRowsAtIndexPaths:withRowAnimation:":{"abs":"Reloads the specified rows using a certain animation effect.","dec":"- (void)reloadRowsAtIndexPaths:(NSArray *)indexPaths withRowAnimation:(UITableViewRowAnimation)animation"},"reloadSectionIndexTitles":{"abs":"Reloads the items in the index bar along the right side of the table view.","dec":"- (void)reloadSectionIndexTitles"},"reloadSections:withRowAnimation:":{"abs":"Reloads the specified sections using a given animation effect.","dec":"- (void)reloadSections:(NSIndexSet *)sections withRowAnimation:(UITableViewRowAnimation)animation"},"scrollToNearestSelectedRowAtScrollPosition:animated:":{"abs":"Scrolls the table view so that the selected row nearest to a specified position in the table view is at that position.","dec":"- (void)scrollToNearestSelectedRowAtScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated"},"scrollToRowAtIndexPath:atScrollPosition:animated:":{"abs":"Scrolls the receiver until a row identified by index path is at a particular location on the screen.","dec":"- (void)scrollToRowAtIndexPath:(NSIndexPath *)indexPath atScrollPosition:(UITableViewScrollPosition)scrollPosition animated:(BOOL)animated"},"selectRowAtIndexPath:animated:scrollPosition:":{"abs":"Selects a row in the receiver identified by index path, optionally scrolling the row to a location in the receiver.","dec":"- (void)selectRowAtIndexPath:(NSIndexPath *)indexPath animated:(BOOL)animated scrollPosition:(UITableViewScrollPosition)scrollPosition"},"setEditing:animated:":{"abs":"Toggles the receiver into and out of editing mode.","dec":"- (void)setEditing:(BOOL)editing animated:(BOOL)animate"},"visibleCells":{"abs":"Returns the table cells that are visible in the receiver.","dec":"- (NSArray *)visibleCells"}},"[=]":{"UITableViewStylePlain":"","UITableViewStyleGrouped":"","UITableViewScrollPositionNone":"","UITableViewScrollPositionTop":"","UITableViewScrollPositionMiddle":"","UITableViewScrollPositionBottom":"","UITableViewRowAnimationFade":"","UITableViewRowAnimationRight":"","UITableViewRowAnimationLeft":"","UITableViewRowAnimationTop":"","UITableViewRowAnimationBottom":"","UITableViewRowAnimationNone":"","UITableViewRowAnimationMiddle":"","UITableViewRowAnimationAutomatic":"","UITableViewIndexSearch":"","UITableViewAutomaticDimension":""}};

ClassRef.UITableViewCell = {"[:]":"UIView : UIResponder : NSObject","[.]":{"accessoryType":{"abs":"The type of standard accessory view the cell should use (normal state).","dec":"@property(nonatomic) UITableViewCellAccessoryType accessoryType"},"accessoryView":{"abs":"A view that is used, typically as a control, on the right side of the cell (normal state).","dec":"@property(nonatomic, retain) UIView *accessoryView"},"backgroundView":{"abs":"The view used as the background of the cell.","dec":"@property(nonatomic, retain) UIView *backgroundView"},"contentView":{"abs":"Returns the content view of the cell object. (read-only)","dec":"@property(nonatomic, readonly, retain) UIView *contentView"},"detailTextLabel":{"abs":"Returns the secondary label of the table cell if one exists. (read-only)","dec":"@property(nonatomic, readonly, retain) UILabel *detailTextLabel"},"editing":{"abs":"A Boolean value that indicates whether the cell is in an editable state.","dec":"@property(nonatomic, getter=isEditing) BOOL editing"},"editingAccessoryType":{"abs":"The type of standard accessory view the cell should use in the table view’s editing state.","dec":"@property(nonatomic) UITableViewCellAccessoryType editingAccessoryType"},"editingAccessoryView":{"abs":"A view that is used typically as a control on the right side of the cell when it is in editing mode.","dec":"@property(nonatomic, retain) UIView *editingAccessoryView"},"editingStyle":{"abs":"The editing style of the cell. (read-only)","dec":"@property(nonatomic, readonly) UITableViewCellEditingStyle editingStyle"},"highlighted":{"abs":"A Boolean value that indicates whether the cell is highlighted.","dec":"@property(nonatomic, getter=isHighlighted) BOOL highlighted"},"imageView":{"abs":"Returns the image view of the table cell. (read-only)","dec":"@property(nonatomic, readonly, retain) UIImageView *imageView"},"indentationLevel":{"abs":"The indentation level of the cell’s content.","dec":"@property(nonatomic) NSInteger indentationLevel"},"indentationWidth":{"abs":"The width for each level of indentation of a cell's content.","dec":"@property(nonatomic) CGFloat indentationWidth"},"multipleSelectionBackgroundView":{"abs":"The background view to use for a selected cell when the table view allows multiple row selections.","dec":"@property(nonatomic,retain) UIView *multipleSelectionBackgroundView"},"reuseIdentifier":{"abs":"A string used to identify a cell that is reusable. (read-only)","dec":"@property(nonatomic, readonly, copy) NSString *reuseIdentifier"},"selected":{"abs":"A Boolean value that indicates whether the cell is selected.","dec":"@property(nonatomic, getter=isSelected) BOOL selected"},"selectedBackgroundView":{"abs":"The view used as the background of the cell when it is selected.","dec":"@property(nonatomic, retain) UIView *selectedBackgroundView"},"selectionStyle":{"abs":"The style of selection for a cell.","dec":"@property(nonatomic) UITableViewCellSelectionStyle selectionStyle"},"separatorInset":{"abs":"The inset values for the cell’s content.","dec":"@property (nonatomic) UIEdgeInsets separatorInset"},"shouldIndentWhileEditing":{"abs":"A Boolean value that controls whether the cell background is indented when the table view is in editing mode.","dec":"@property(nonatomic) BOOL shouldIndentWhileEditing"},"showingDeleteConfirmation":{"abs":"Returns whether the cell is currently showing the delete-confirmation button. (read-only)","dec":"@property(nonatomic, readonly) BOOL showingDeleteConfirmation"},"showsReorderControl":{"abs":"A Boolean value that determines whether the cell shows the reordering control.","dec":"@property(nonatomic) BOOL showsReorderControl"},"textLabel":{"abs":"Returns the label used for the main textual content of the table cell. (read-only)","dec":"@property(nonatomic, readonly, retain) UILabel *textLabel"}},"[-]":{"didTransitionToState:":{"abs":"Called on the cell just after it transitions between cell states.","dec":"- (void)didTransitionToState:(UITableViewCellStateMask)state"},"initWithStyle:reuseIdentifier:":{"abs":"Initializes a table cell with a style and a reuse identifier and returns it to the caller.","dec":"- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier"},"prepareForReuse":{"abs":"Prepares a reusable cell for reuse by the table view's delegate.","dec":"- (void)prepareForReuse"},"setEditing:animated:":{"abs":"Toggles the receiver into and out of editing mode.","dec":"- (void)setEditing:(BOOL)editing animated:(BOOL)animated"},"setHighlighted:animated:":{"abs":"Sets the highlighted state of the cell, optionally animating the transition between states.","dec":"- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated"},"setSelected:animated:":{"abs":"Sets the selected state of the cell, optionally animating the transition between states.","dec":"- (void)setSelected:(BOOL)selected animated:(BOOL)animated"},"willTransitionToState:":{"abs":"Called on the cell just before it transitions between cell states.","dec":"- (void)willTransitionToState:(UITableViewCellStateMask)state"}},"[=]":{"UITableViewCellStyleDefault":"","UITableViewCellStyleValue1":"","UITableViewCellStyleValue2":"","UITableViewCellStyleSubtitle":"","UITableViewCellSelectionStyleNone":"","UITableViewCellSelectionStyleBlue":"","UITableViewCellSelectionStyleGray":"","UITableViewCellSelectionStyleDefault":"","UITableViewCellEditingStyleNone":"","UITableViewCellEditingStyleDelete":"","UITableViewCellEditingStyleInsert":"","UITableViewCellAccessoryNone":"","UITableViewCellAccessoryDisclosureIndicator":"","UITableViewCellAccessoryDetailDisclosureButton":"","UITableViewCellAccessoryCheckmark":"","UITableViewCellAccessoryDetailButton":"","UITableViewCellStateDefaultMask":"","UITableViewCellStateShowingEditControlMask":"","UITableViewCellStateShowingDeleteConfirmationMask":"","UITableViewCellSeparatorStyleNone":"","UITableViewCellSeparatorStyleSingleLine":"","UITableViewCellSeparatorStyleSingleLineEtched":"","UITableViewCellSeparatorStyleDoubleLineEtched":"","UITableViewCellStateEditingMask":""}};

ClassRef.UITableViewController = {"[:]":"UIViewController : UIResponder : NSObject","[.]":{"clearsSelectionOnViewWillAppear":{"abs":"A Boolean value indicating if the controller clears the selection when the table appears.","dec":"@property(nonatomic) BOOL clearsSelectionOnViewWillAppear"},"refreshControl":{"abs":"The refresh control used to update the table contents.","dec":"@property (nonatomic,retain) UIRefreshControl *refreshControl"},"tableView":{"abs":"Returns the table view managed by the controller object.","dec":"@property(nonatomic, retain) UITableView *tableView"}},"[-]":{"initWithStyle:":{"abs":"Initializes a table-view controller to manage a table view of a given style.","dec":"- (id)initWithStyle:(UITableViewStyle)style"}}};

ClassRef.UITableViewHeaderFooterView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"backgroundView":{"abs":"The background view of the header or footer.","dec":"@property(nonatomic, retain) UIView *backgroundView"},"contentView":{"abs":"The content view of the header or footer. (read-only)","dec":"@property(nonatomic, readonly, retain) UIView *contentView"},"detailTextLabel":{"abs":"A detail text label for the view. (read-only)","dec":"@property(nonatomic, readonly, retain) UILabel *detailTextLabel"},"reuseIdentifier":{"abs":"A string used to identify a reusable header or footer. (read-only)","dec":"@property(nonatomic, readonly, copy) NSString *reuseIdentifier"},"textLabel":{"abs":"A primary text label for the view. (read-only)","dec":"@property(nonatomic, readonly, retain) UILabel *textLabel"},"tintColor":{"abs":"The tint color of the view.","dec":"@property(nonatomic, retain) UIColor *tintColor"}},"[-]":{"initWithReuseIdentifier:":{"abs":"Initializes a header/footer view with the specified reuse identifier.","dec":"- (id)initWithReuseIdentifier:(NSString *)reuseIdentifier"},"prepareForReuse":{"abs":"Prepares a reusable header or footer view for reuse by the table.","dec":"- (void)prepareForReuse"}}};

ClassRef.UITapGestureRecognizer = {"[:]":"UIGestureRecognizer : NSObject","[.]":{"numberOfTapsRequired":{"abs":"The number of taps for the gesture to be recognized.","dec":"@property(nonatomic) NSUInteger numberOfTapsRequired"},"numberOfTouchesRequired":{"abs":"The number of fingers required to tap for the gesture to be recognized.","dec":"@property(nonatomic) NSUInteger numberOfTouchesRequired"}}};

ClassRef.UITextField = {"[:]":"UIControl : UIView : UIResponder : NSObject","[.]":{"adjustsFontSizeToFitWidth":{"abs":"A Boolean value indicating whether the font size should be reduced in order to fit the text string into the text field’s bounding rectangle.","dec":"@property(nonatomic) BOOL adjustsFontSizeToFitWidth"},"allowsEditingTextAttributes":{"abs":"A Boolean value indicating whether the user may edit the attributes of the text in the text field.","dec":"@property(nonatomic) BOOL allowsEditingTextAttributes"},"attributedPlaceholder":{"abs":"The styled string that is displayed when there is no other text in the text field.","dec":"@property(nonatomic, copy) NSAttributedString *attributedPlaceholder"},"attributedText":{"abs":"The styled text displayed by the text field.","dec":"@property(nonatomic, copy) NSAttributedString *attributedText"},"background":{"abs":"The image that represents the background appearance of the text field when it is enabled.","dec":"@property(nonatomic, retain) UIImage *background"},"borderStyle":{"abs":"The border style used by the text field.","dec":"@property(nonatomic) UITextBorderStyle borderStyle"},"clearButtonMode":{"abs":"Controls when the standard clear button appears in the text field.","dec":"@property(nonatomic) UITextFieldViewMode clearButtonMode"},"clearsOnBeginEditing":{"abs":"A Boolean value indicating whether the text field removes old text when editing begins.","dec":"@property(nonatomic) BOOL clearsOnBeginEditing"},"clearsOnInsertion":{"abs":"A Boolean value indicating whether inserting text replaces the previous contents.","dec":"@property(nonatomic) BOOL clearsOnInsertion"},"defaultTextAttributes":{"abs":"The default attributes to apply to the text.","dec":"@property(nonatomic, copy) NSDictionary *defaultTextAttributes"},"delegate":{"abs":"The receiver’s delegate.","dec":"@property(nonatomic, assign) id<UITextFieldDelegate> delegate"},"disabledBackground":{"abs":"The image that represents the background appearance of the text field when it is disabled.","dec":"@property(nonatomic, retain) UIImage *disabledBackground"},"editing":{"abs":"A Boolean value indicating whether the text field is currently in edit mode. (read-only)","dec":"@property(nonatomic, readonly, getter=isEditing) BOOL editing"},"font":{"abs":"The font of the text.","dec":"@property(nonatomic, retain) UIFont *font"},"inputAccessoryView":{"abs":"The custom accessory view to display when the text field becomes the first responder","dec":"@property(readwrite, retain) UIView *inputAccessoryView"},"inputView":{"abs":"The custom input view to display when the text field becomes the first responder.","dec":"@property(readwrite, retain) UIView *inputView"},"leftView":{"abs":"The overlay view displayed on the left side of the text field.","dec":"@property(nonatomic, retain) UIView *leftView"},"leftViewMode":{"abs":"Controls when the left overlay view appears in the text field.","dec":"@property(nonatomic) UITextFieldViewMode leftViewMode"},"minimumFontSize":{"abs":"The size of the smallest permissible font with which to draw the text field’s text.","dec":"@property(nonatomic) CGFloat minimumFontSize"},"placeholder":{"abs":"The string that is displayed when there is no other text in the text field.","dec":"@property(nonatomic, copy) NSString *placeholder"},"rightView":{"abs":"The overlay view displayed on the right side of the text field.","dec":"@property(nonatomic, retain) UIView *rightView"},"rightViewMode":{"abs":"Controls when the right overlay view appears in the text field.","dec":"@property(nonatomic) UITextFieldViewMode rightViewMode"},"text":{"abs":"The text displayed by the text field.","dec":"@property(nonatomic, copy) NSString *text"},"textAlignment":{"abs":"The technique to use for aligning the text.","dec":"@property(nonatomic) NSTextAlignment textAlignment"},"textColor":{"abs":"The color of the text.","dec":"@property(nonatomic, retain) UIColor *textColor"},"typingAttributes":{"abs":"The attributes to apply to new text being entered by the user.","dec":"@property(nonatomic, copy) NSDictionary *typingAttributes"}},"[-]":{"borderRectForBounds:":{"abs":"Returns the receiver’s border rectangle.","dec":"- (CGRect)borderRectForBounds:(CGRect)bounds"},"clearButtonRectForBounds:":{"abs":"Returns the drawing rectangle for the built-in clear button.","dec":"- (CGRect)clearButtonRectForBounds:(CGRect)bounds"},"drawPlaceholderInRect:":{"abs":"Draws the receiver’s placeholder text in the specified rectangle.","dec":"- (void)drawPlaceholderInRect:(CGRect)rect"},"drawTextInRect:":{"abs":"Draws the receiver’s text in the specified rectangle.","dec":"- (void)drawTextInRect:(CGRect)rect"},"editingRectForBounds:":{"abs":"Returns the rectangle in which editable text can be displayed.","dec":"- (CGRect)editingRectForBounds:(CGRect)bounds"},"leftViewRectForBounds:":{"abs":"Returns the drawing rectangle of the receiver’s left overlay view.","dec":"- (CGRect)leftViewRectForBounds:(CGRect)bounds"},"placeholderRectForBounds:":{"abs":"Returns the drawing rectangle for the text field’s placeholder text","dec":"- (CGRect)placeholderRectForBounds:(CGRect)bounds"},"rightViewRectForBounds:":{"abs":"Returns the drawing location of the receiver’s right overlay view.","dec":"- (CGRect)rightViewRectForBounds:(CGRect)bounds"},"textRectForBounds:":{"abs":"Returns the drawing rectangle for the text field’s text.","dec":"- (CGRect)textRectForBounds:(CGRect)bounds"}},"[=]":{"UITextBorderStyleNone":"","UITextBorderStyleLine":"","UITextBorderStyleBezel":"","UITextBorderStyleRoundedRect":"","UITextFieldViewModeNever":"","UITextFieldViewModeWhileEditing":"","UITextFieldViewModeUnlessEditing":"","UITextFieldViewModeAlways":""}};

ClassRef.UITextInputMode = {"[:]":"NSObject","[.]":{"primaryLanguage":{"abs":"The primary language, if any, of the input mode.","dec":"@property (nonatomic, readonly, retain) NSString *primaryLanguage"}},"[+]":{"activeInputModes":{"abs":"Returns the active text-input modes.","dec":"+ (NSArray *)activeInputModes"}}};

ClassRef.UITextInputStringTokenizer = {"[:]":"NSObject","[-]":{"initWithTextInput:":{"abs":"Returns an object initialized with the document object that directly communicates with the text input system.","dec":"- (id)initWithTextInput:(UIResponder < UITextInput > *)textInput"}}};

ClassRef.UITextPosition = {"[:]":"NSObject"};

ClassRef.UITextRange = {"[:]":"NSObject","[.]":{"empty":{"abs":"A Boolean value that indicates whether the range of text represented by the receiver is zero-length. (read-only)","dec":"@property(nonatomic, readonly, getter=isEmpty) BOOL empty"},"end":{"abs":"The end of the range of text. (read-only)","dec":"@property(nonatomic, readonly) UITextPosition *end"},"start":{"abs":"The start of a range of text. (read-only)","dec":"@property(nonatomic, readonly) UITextPosition *start"}}};

ClassRef.UITextSelectionRect = {"[:]":"NSObject","[.]":{"containsEnd":{"abs":"A Boolean value indicating whether the rectangle contains the end of the selection. (read-only)","dec":"@property (nonatomic, readonly) BOOL containsEnd"},"containsStart":{"abs":"A Boolean value indicating whether the rectangle contains the start of the selection. (read-only)","dec":"@property (nonatomic, readonly) BOOL containsStart"},"isVertical":{"abs":"A Boolean value indicating whether the text is oriented vertically. (read-only)","dec":"@property (nonatomic, readonly) BOOL isVertical"},"rect":{"abs":"The rectangle that encloses the receiver’s text range. (read-only)","dec":"@property (nonatomic, readonly) CGRect rect"},"writingDirection":{"abs":"The writing direction of text in the receiver’s text range. (read-only)","dec":"@property (nonatomic, readonly) UITextWritingDirection writingDirection"}}};

ClassRef.UITextView = {"[:]":"UIScrollView : UIView : UIResponder : NSObject","[.]":{"allowsEditingTextAttributes":{"abs":"A Boolean value indicating whether the text view allows the user to edit style information.","dec":"@property(nonatomic) BOOL allowsEditingTextAttributes"},"attributedText":{"abs":"The styled text displayed by the text view.","dec":"@property(nonatomic, copy) NSAttributedString *attributedText"},"clearsOnInsertion":{"abs":"A Boolean value indicating whether inserting text replaces the previous contents.","dec":"@property(nonatomic) BOOL clearsOnInsertion"},"dataDetectorTypes":{"abs":"The types of data converted to clickable URLs in the text view.","dec":"@property(nonatomic) UIDataDetectorTypes dataDetectorTypes"},"delegate":{"abs":"The receiver’s delegate.","dec":"@property(nonatomic, assign) id<UITextViewDelegate> delegate"},"editable":{"abs":"A Boolean value indicating whether the receiver is editable.","dec":"@property(nonatomic, getter=isEditable) BOOL editable"},"font":{"abs":"The font of the text.","dec":"@property(nonatomic, retain) UIFont *font"},"inputAccessoryView":{"abs":"The custom accessory view to display when the text view becomes the first responder","dec":"@property(readwrite, retain) UIView *inputAccessoryView"},"inputView":{"abs":"The custom input view to display when the text view becomes the first responder.","dec":"@property(readwrite, retain) UIView *inputView"},"layoutManager":{"abs":"The layout manager that lays out text for the receiver’s text container. (read-only)","dec":"@property(nonatomic, readonly) NSLayoutManager *layoutManager"},"linkTextAttributes":{"abs":"The attributes to apply to links.","dec":"@property(nonatomic, copy) NSDictionary *linkTextAttributes"},"selectable":{"abs":"A Boolean value indicating whether the receiver is selectable.","dec":"@property(nonatomic, getter=isSelectable) BOOL selectable"},"selectedRange":{"abs":"The current selection range of the receiver.","dec":"@property(nonatomic) NSRange selectedRange"},"text":{"abs":"The text displayed by the text view.","dec":"@property(nonatomic, copy) NSString *text"},"textAlignment":{"abs":"The technique to use for aligning the text.","dec":"@property(nonatomic) NSTextAlignment textAlignment"},"textColor":{"abs":"The color of the text.","dec":"@property(nonatomic, retain) UIColor *textColor"},"textContainer":{"abs":"The text container object defining the area in which text is displayed in this text view. (read-only)","dec":"@property(nonatomic, readonly) NSTextContainer *textContainer"},"textContainerInset":{"abs":"The inset of the text container's layout area within the text view's content area.","dec":"@property(nonatomic, assign) UIEdgeInsets textContainerInset"},"textStorage":{"abs":"The text storage object holding the text displayed in this text view. (read-only)","dec":"@property(nonatomic, readonly, retain) NSTextStorage *textStorage"},"typingAttributes":{"abs":"The attributes to apply to new text being entered by the user.","dec":"@property(nonatomic, copy) NSDictionary *typingAttributes"}},"[-]":{"initWithFrame:textContainer:":{"abs":"Creates a new text view with the specified text container.","dec":"- (instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer *)textContainer"},"scrollRangeToVisible:":{"abs":"Scrolls the receiver until the text in the specified range is visible.","dec":"- (void)scrollRangeToVisible:(NSRange)range"}}};

ClassRef.UIToolbar = {"[:]":"UIView : UIResponder : NSObject","[.]":{"barStyle":{"abs":"The toolbar style that specifies its appearance.","dec":"@property(nonatomic) UIBarStyle barStyle"},"barTintColor":{"abs":"The tint color to apply to the toolbar background.","dec":"@property(nonatomic, retain) UIColor *barTintColor"},"delegate":{"abs":"The toolbar’s delegate object.","dec":"@property(nonatomic, assign) id<UIToolbarDelegate> delegate"},"items":{"abs":"The items displayed on the toolbar.","dec":"@property(nonatomic, copy) NSArray *items"},"tintColor":{"abs":"The tint color to apply to the bar button items.","dec":"@property(nonatomic, retain) UIColor *tintColor"},"translucent":{"abs":"A Boolean value that indicates whether the toolbar is translucent (YES) or not (NO).","dec":"@property(nonatomic, assign, getter=isTranslucent) BOOL translucent"}},"[-]":{"backgroundImageForToolbarPosition:barMetrics:":{"abs":"Returns the image to use for the background in a given position and with given metrics.","dec":"- (UIImage *)backgroundImageForToolbarPosition:(UIBarPosition)topOrBottom barMetrics:(UIBarMetrics)barMetrics"},"setBackgroundImage:forToolbarPosition:barMetrics:":{"abs":"Sets the image to use for the background in a given position and with given metrics.","dec":"- (void)setBackgroundImage:(UIImage *)backgroundImage forToolbarPosition:(UIBarPosition)topOrBottom barMetrics:(UIBarMetrics)barMetrics"},"setItems:animated:":{"abs":"Sets the items on the toolbar by animating the changes.","dec":"- (void)setItems:(NSArray *)items animated:(BOOL)animated"},"setShadowImage:forToolbarPosition:":{"abs":"Sets the image to use for the toolbar shadow in a given position.","dec":"- (void)setShadowImage:(UIImage *)shadowImage forToolbarPosition:(UIBarPosition)topOrBottom"},"shadowImageForToolbarPosition:":{"abs":"Returns the image to use for the toolbar shadow in a given position.","dec":"- (UIImage *)shadowImageForToolbarPosition:(UIBarPosition)topOrBottom"}},"[=]":{"UIToolbarPositionAny":"","UIToolbarPositionBottom":"","UIToolbarPositionTop":""}};

ClassRef["UITouch Sprite Kit Additions"] = {"[:]":"NSObject","[-]":{"locationInNode:":{"abs":"Returns the current location of the receiver in the coordinate system of the given node.","dec":"- (CGPoint)locationInNode:(SKNode *)node"},"previousLocationInNode:":{"abs":"Returns the previous location of the receiver in the coordinate system of the given node.","dec":"- (CGPoint)previousLocationInNode:(SKNode *)node"}}};

ClassRef.UITouch = {"[:]":"NSObject","[.]":{"gestureRecognizers":{"abs":"The gesture recognizers that are receiving the touch object.","dec":"@property(nonatomic,readonly,copy) NSArray *gestureRecognizers"},"phase":{"abs":"The type of touch. (read-only)","dec":"@property(nonatomic, readonly) UITouchPhase phase"},"tapCount":{"abs":"The number of times the finger was tapped for this given touch. (read-only)","dec":"@property(nonatomic, readonly) NSUInteger tapCount"},"timestamp":{"abs":"The time when the touch occurred or when it was last mutated. (read-only)","dec":"@property(nonatomic, readonly) NSTimeInterval timestamp"},"view":{"abs":"The view in which the touch initially occurred. (read-only)","dec":"@property(nonatomic, readonly, retain) UIView *view"},"window":{"abs":"The window in which the touch initially occurred. (read-only)","dec":"@property(nonatomic, readonly, retain) UIWindow *window"}},"[-]":{"locationInView:":{"abs":"Returns the current location of the receiver in the coordinate system of the given view.","dec":"- (CGPoint)locationInView:(UIView *)view"},"previousLocationInView:":{"abs":"Returns the previous location of the receiver in the coordinate system of the given view.","dec":"- (CGPoint)previousLocationInView:(UIView *)view"}},"[=]":{"UITouchPhaseBegan":"","UITouchPhaseMoved":"","UITouchPhaseStationary":"","UITouchPhaseEnded":"","UITouchPhaseCancelled":""}};

ClassRef.UIVideoEditorController = {"[:]":"UINavigationController : UIViewController : UIResponder : NSObject","[.]":{"delegate":{"abs":"The video editor’s delegate object.","dec":"@property(nonatomic,assign) id <UINavigationControllerDelegate, UIVideoEditorControllerDelegate> delegate"},"videoMaximumDuration":{"abs":"The maximum duration, in seconds, permitted for trimmed movies saved by the video editor.","dec":"@property(nonatomic) NSTimeInterval videoMaximumDuration"},"videoPath":{"abs":"The filesystem path to the movie to be loaded by the video editor.","dec":"@property(nonatomic, copy) NSString *videoPath"},"videoQuality":{"abs":"The video quality to use when saving a trimmed movie.","dec":"@property(nonatomic) UIImagePickerControllerQualityType videoQuality"}},"[+]":{"canEditVideoAtPath:":{"abs":"Returns a Boolean value indicating whether a video file can be edited.","dec":"+ (BOOL)canEditVideoAtPath:(NSString *)videoPath"}}};

ClassRef.UIView = {"[:]":"UIResponder : NSObject","[.]":{"alpha":{"abs":"The view’s alpha value.","dec":"@property(nonatomic) CGFloat alpha"},"autoresizesSubviews":{"abs":"A Boolean value that determines whether the receiver automatically resizes its subviews when its bounds change.","dec":"@property(nonatomic) BOOL autoresizesSubviews"},"autoresizingMask":{"abs":"An integer bit mask that determines how the receiver resizes itself when its superview’s bounds change.","dec":"@property(nonatomic) UIViewAutoresizing autoresizingMask"},"backgroundColor":{"abs":"The view’s background color.","dec":"@property(nonatomic, copy) UIColor *backgroundColor"},"bounds":{"abs":"The bounds rectangle, which describes the view’s location and size in its own coordinate system.","dec":"@property(nonatomic) CGRect bounds"},"center":{"abs":"The center of the frame.","dec":"@property(nonatomic) CGPoint center"},"clearsContextBeforeDrawing":{"abs":"A Boolean value that determines whether the view’s bounds should be automatically cleared before drawing.","dec":"@property(nonatomic) BOOL clearsContextBeforeDrawing"},"clipsToBounds":{"abs":"A Boolean value that determines whether subviews are confined to the bounds of the view.","dec":"@property(nonatomic) BOOL clipsToBounds"},"contentMode":{"abs":"A flag used to determine how a view lays out its content when its bounds change.","dec":"@property(nonatomic) UIViewContentMode contentMode"},"contentScaleFactor":{"abs":"The scale factor applied to the view.","dec":"@property(nonatomic) CGFloat contentScaleFactor"},"exclusiveTouch":{"abs":"A Boolean value that indicates whether the receiver handles touch events exclusively.","dec":"@property(nonatomic, getter=isExclusiveTouch) BOOL exclusiveTouch"},"frame":{"abs":"The frame rectangle, which describes the view’s location and size in its superview’s coordinate system.","dec":"@property(nonatomic) CGRect frame"},"gestureRecognizers":{"abs":"The gesture-recognizer objects currently attached to the view.","dec":"@property(nonatomic, copy) NSArray *gestureRecognizers"},"hidden":{"abs":"A Boolean value that determines whether the view is hidden.","dec":"@property(nonatomic, getter=isHidden) BOOL hidden"},"layer":{"abs":"The view’s Core Animation layer used for rendering. (read-only)","dec":"@property(nonatomic, readonly, retain) CALayer *layer"},"motionEffects":{"abs":"The array of motion effects for the view.","dec":"@property(copy, nonatomic) NSArray *motionEffects"},"multipleTouchEnabled":{"abs":"A Boolean value that indicates whether the receiver handles multi-touch events.","dec":"@property(nonatomic, getter=isMultipleTouchEnabled) BOOL multipleTouchEnabled"},"opaque":{"abs":"A Boolean value that determines whether the view is opaque.","dec":"@property(nonatomic, getter=isOpaque) BOOL opaque"},"restorationIdentifier":{"abs":"The identifier that determines whether the view supports state restoration.","dec":"@property(nonatomic, copy) NSString *restorationIdentifier"},"subviews":{"abs":"The receiver’s immediate subviews. (read-only)","dec":"@property(nonatomic, readonly, copy) NSArray *subviews"},"superview":{"abs":"The receiver’s superview, or nil if it has none. (read-only)","dec":"@property(nonatomic, readonly) UIView *superview"},"tag":{"abs":"An integer that you can use to identify view objects in your application.","dec":"@property(nonatomic) NSInteger tag"},"tintAdjustmentMode":{"abs":"The first non-default tint adjustment mode value in the view’s hierarchy, ascending from and starting with the view itself.","dec":"@property(nonatomic) UIViewTintAdjustmentMode tintAdjustmentMode"},"tintColor":{"abs":"The first nondefault tint color value in the view’s hierarchy, ascending from and starting with the view itself.","dec":"@property(nonatomic, retain) UIColor *tintColor"},"transform":{"abs":"Specifies the transform applied to the receiver, relative to the center of its bounds.","dec":"@property(nonatomic) CGAffineTransform transform"},"userInteractionEnabled":{"abs":"A Boolean value that determines whether user events are ignored and removed from the event queue.","dec":"@property(nonatomic, getter=isUserInteractionEnabled) BOOL userInteractionEnabled"},"window":{"abs":"The receiver’s window object, or nil if it has none. (read-only)","dec":"@property(nonatomic, readonly) UIWindow *window"}},"[+]":{"addKeyframeWithRelativeStartTime:relativeDuration:animations:":{"abs":"Specifies the timing and animation values for a single frame of a keyframe animation.","dec":"+ (void)addKeyframeWithRelativeStartTime:(double)frameStartTime relativeDuration:(double)frameDuration animations:(void (^)(void))animations"},"animateKeyframesWithDuration:delay:options:animations:completion:":{"abs":"Creates an animation block object that can be used to set up keyframe-based animations for the current view.","dec":"+ (void)animateKeyframesWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewKeyframeAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion"},"animateWithDuration:animations:":{"abs":"Animate changes to one or more views using the specified duration.","dec":"+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void (^)(void))animations"},"animateWithDuration:animations:completion:":{"abs":"Animate changes to one or more views using the specified duration and completion handler.","dec":"+ (void)animateWithDuration:(NSTimeInterval)duration animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion"},"animateWithDuration:delay:options:animations:completion:":{"abs":"Animate changes to one or more views using the specified duration, delay, options, and completion handler.","dec":"+ (void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion"},"animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:":{"abs":"Performs a view animation using a timing curve corresponding to the motion of a physical spring.","dec":"+ (void)animateWithDuration:(NSTimeInterval)duration delay:(NSTimeInterval)delay usingSpringWithDamping:(CGFloat)dampingRatio initialSpringVelocity:(CGFloat)velocity options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion"},"areAnimationsEnabled":{"abs":"Returns a Boolean value indicating whether animations are enabled.","dec":"+ (BOOL)areAnimationsEnabled"},"beginAnimations:context:":{"abs":"Marks the beginning of a begin/commit animation block.","dec":"+ (void)beginAnimations:(NSString *)animationID context:(void *)context"},"commitAnimations":{"abs":"Marks the end of a begin/commit animation block and schedules the animations for execution.","dec":"+ (void)commitAnimations"},"layerClass":{"abs":"Returns the class used to create the layer for instances of this class.","dec":"+ (Class)layerClass"},"performSystemAnimation:onViews:options:animations:completion:":{"abs":"Performs a specified system-provided animation on one or more views, along with optional parallel animations that you define.","dec":"+ (void)performSystemAnimation:(UISystemAnimation)animation onViews:(NSArray *)views options:(UIViewAnimationOptions)options animations:(void (^)(void))parallelAnimations completion:(void (^)(BOOL finished))completion"},"performWithoutAnimation:":{"abs":"Disables a view transition animation.","dec":"+ (void)performWithoutAnimation:(void (^)(void))actionsWithoutAnimation"},"requiresConstraintBasedLayout":{"abs":"Returns whether the receiver depends on the constraint-based layout system.","dec":"+ (BOOL)requiresConstraintBasedLayout"},"setAnimationBeginsFromCurrentState:":{"abs":"Sets whether the animation should begin playing from the current state.","dec":"+ (void)setAnimationBeginsFromCurrentState:(BOOL)fromCurrentState"},"setAnimationCurve:":{"abs":"Sets the curve to use when animating property changes within an animation block.","dec":"+ (void)setAnimationCurve:(UIViewAnimationCurve)curve"},"setAnimationDelay:":{"abs":"Sets the amount of time (in seconds) to wait before animating property changes within an animation block.","dec":"+ (void)setAnimationDelay:(NSTimeInterval)delay"},"setAnimationDelegate:":{"abs":"Sets the delegate for any animation messages.","dec":"+ (void)setAnimationDelegate:(id)delegate"},"setAnimationDidStopSelector:":{"abs":"Sets the message to send to the animation delegate when animation stops.","dec":"+ (void)setAnimationDidStopSelector:(SEL)selector"},"setAnimationDuration:":{"abs":"Sets the duration (measured in seconds) of the animations in an animation block.","dec":"+ (void)setAnimationDuration:(NSTimeInterval)duration"},"setAnimationRepeatAutoreverses:":{"abs":"Sets whether the animations within an animation block automatically reverse themselves.","dec":"+ (void)setAnimationRepeatAutoreverses:(BOOL)repeatAutoreverses"},"setAnimationRepeatCount:":{"abs":"Sets the number of times animations within an animation block repeat.","dec":"+ (void)setAnimationRepeatCount:(float)repeatCount"},"setAnimationsEnabled:":{"abs":"Sets whether animations are enabled.","dec":"+ (void)setAnimationsEnabled:(BOOL)enabled"},"setAnimationStartDate:":{"abs":"Sets the start time for the current animation block.","dec":"+ (void)setAnimationStartDate:(NSDate *)startTime"},"setAnimationTransition:forView:cache:":{"abs":"Sets a transition to apply to a view during an animation block.","dec":"+ (void)setAnimationTransition:(UIViewAnimationTransition)transition forView:(UIView *)view cache:(BOOL)cache"},"setAnimationWillStartSelector:":{"abs":"Sets the message to send to the animation delegate when the animation starts.","dec":"+ (void)setAnimationWillStartSelector:(SEL)selector"},"transitionFromView:toView:duration:options:completion:":{"abs":"Creates a transition animation between the specified views using the given parameters.","dec":"+ (void)transitionFromView:(UIView *)fromView toView:(UIView *)toView duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options completion:(void (^)(BOOL finished))completion"},"transitionWithView:duration:options:animations:completion:":{"abs":"Creates a transition animation for the specified container view.","dec":"+ (void)transitionWithView:(UIView *)view duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion"}},"[-]":{"addConstraint:":{"abs":"Adds a constraint on the layout of the receiving view or its subviews.","dec":"- (void)addConstraint:(NSLayoutConstraint *)constraint"},"addConstraints:":{"abs":"Adds multiple constraints on the layout of the receiving view or its subviews.","dec":"- (void)addConstraints:(NSArray *)constraints"},"addGestureRecognizer:":{"abs":"Attaches a gesture recognizer to the view.","dec":"- (void)addGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer"},"addMotionEffect:":{"abs":"Begins applying a motion effect to the view.","dec":"- (void)addMotionEffect:(UIMotionEffect *)effect"},"addSubview:":{"abs":"Adds a view to the end of the receiver’s list of subviews.","dec":"- (void)addSubview:(UIView *)view"},"alignmentRectForFrame:":{"abs":"Returns the view’s alignment rectangle for a given frame.","dec":"- (CGRect)alignmentRectForFrame:(CGRect)frame"},"alignmentRectInsets":{"abs":"Returns the insets from the view’s frame that define its alignment rectangle.","dec":"- (UIEdgeInsets)alignmentRectInsets"},"bringSubviewToFront:":{"abs":"Moves the specified subview so that it appears on top of its siblings.","dec":"- (void)bringSubviewToFront:(UIView *)view"},"constraints":{"abs":"Returns the constraints held by the view.","dec":"- (NSArray *)constraints"},"constraintsAffectingLayoutForAxis:":{"abs":"Returns the constraints impacting the layout of the view for a given axis.","dec":"- (NSArray *)constraintsAffectingLayoutForAxis:(UILayoutConstraintAxis)axis"},"contentCompressionResistancePriorityForAxis:":{"abs":"Returns the priority with which a view resists being made smaller than its intrinsic size.","dec":"- (UILayoutPriority)contentCompressionResistancePriorityForAxis:(UILayoutConstraintAxis)axis"},"contentHuggingPriorityForAxis:":{"abs":"Returns the priority with which a view resists being made larger than its intrinsic size.","dec":"- (UILayoutPriority)contentHuggingPriorityForAxis:(UILayoutConstraintAxis)axis"},"convertPoint:fromView:":{"abs":"Converts a point from the coordinate system of a given view to that of the receiver.","dec":"- (CGPoint)convertPoint:(CGPoint)point fromView:(UIView *)view"},"convertPoint:toView:":{"abs":"Converts a point from the receiver’s coordinate system to that of the specified view.","dec":"- (CGPoint)convertPoint:(CGPoint)point toView:(UIView *)view"},"convertRect:fromView:":{"abs":"Converts a rectangle from the coordinate system of another view to that of the receiver.","dec":"- (CGRect)convertRect:(CGRect)rect fromView:(UIView *)view"},"convertRect:toView:":{"abs":"Converts a rectangle from the receiver’s coordinate system to that of another view.","dec":"- (CGRect)convertRect:(CGRect)rect toView:(UIView *)view"},"decodeRestorableStateWithCoder:":{"abs":"Decodes and restores state-related information for the view.","dec":"- (void)decodeRestorableStateWithCoder:(NSCoder *)coder"},"didAddSubview:":{"abs":"Tells the view that a subview was added.","dec":"- (void)didAddSubview:(UIView *)subview"},"didMoveToSuperview":{"abs":"Tells the view that its superview changed.","dec":"- (void)didMoveToSuperview"},"didMoveToWindow":{"abs":"Tells the view that its window object changed.","dec":"- (void)didMoveToWindow"},"drawRect:":{"abs":"Draws the receiver’s image within the passed-in rectangle.","dec":"- (void)drawRect:(CGRect)rect"},"drawRect:forViewPrintFormatter:":{"abs":"Implemented to draw the view’s content for printing.","dec":"- (void)drawRect:(CGRect)area forViewPrintFormatter:(UIViewPrintFormatter *)formatter"},"drawViewHierarchyInRect:afterScreenUpdates:":{"abs":"Renders a snapshot of the complete view hierarchy as visible onscreen into the current context.","dec":"- (BOOL)drawViewHierarchyInRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates"},"encodeRestorableStateWithCoder:":{"abs":"Encodes state-related information for the view.","dec":"- (void)encodeRestorableStateWithCoder:(NSCoder *)coder"},"endEditing:":{"abs":"Causes the view (or one of its embedded text fields) to resign the first responder status.","dec":"- (BOOL)endEditing:(BOOL)force"},"exchangeSubviewAtIndex:withSubviewAtIndex:":{"abs":"Exchanges the subviews at the specified indices.","dec":"- (void)exchangeSubviewAtIndex:(NSInteger)index1 withSubviewAtIndex:(NSInteger)index2"},"exerciseAmbiguityInLayout":{"abs":"Randomly changes the frame of a view with an ambiguous layout between the different valid values.","dec":"- (void)exerciseAmbiguityInLayout"},"frameForAlignmentRect:":{"abs":"Returns the view’s frame for a given alignment rectangle.","dec":"- (CGRect)frameForAlignmentRect:(CGRect)alignmentRect"},"gestureRecognizerShouldBegin:":{"abs":"Asks the view if the gesture recognizer should be allowed to continue tracking touch events.","dec":"- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer *)gestureRecognizer"},"hasAmbiguousLayout":{"abs":"Returns whether the constraints impacting the layout of the view incompletely specify the location of the view.","dec":"- (BOOL)hasAmbiguousLayout"},"hitTest:withEvent:":{"abs":"Returns the farthest descendant of the receiver in the view hierarchy (including itself) that contains a specified point.","dec":"- (UIView *)hitTest:(CGPoint)point withEvent:(UIEvent *)event"},"initWithFrame:":{"abs":"Initializes and returns a newly allocated view object with the specified frame rectangle.","dec":"- (id)initWithFrame:(CGRect)aRect"},"insertSubview:aboveSubview:":{"abs":"Inserts a view above another view in the view hierarchy.","dec":"- (void)insertSubview:(UIView *)view aboveSubview:(UIView *)siblingSubview"},"insertSubview:atIndex:":{"abs":"Inserts a subview at the specified index.","dec":"- (void)insertSubview:(UIView *)view atIndex:(NSInteger)index"},"insertSubview:belowSubview:":{"abs":"Inserts a view below another view in the view hierarchy.","dec":"- (void)insertSubview:(UIView *)view belowSubview:(UIView *)siblingSubview"},"intrinsicContentSize":{"abs":"Returns the natural size for the receiving view, considering only properties of the view itself.","dec":"- (CGSize)intrinsicContentSize"},"invalidateIntrinsicContentSize":{"abs":"Invalidates the view’s intrinsic content size.","dec":"- (void)invalidateIntrinsicContentSize"},"isDescendantOfView:":{"abs":"Returns a Boolean value indicating whether the receiver is a subview of a given view or identical to that view.","dec":"- (BOOL)isDescendantOfView:(UIView *)view"},"layoutIfNeeded":{"abs":"Lays out the subviews immediately.","dec":"- (void)layoutIfNeeded"},"layoutSubviews":{"abs":"Lays out subviews.","dec":"- (void)layoutSubviews"},"needsUpdateConstraints":{"abs":"Returns whether the view’s constraints need updating.","dec":"- (BOOL)needsUpdateConstraints"},"pointInside:withEvent:":{"abs":"Returns a Boolean value indicating whether the receiver contains the specified point.","dec":"- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent *)event"},"removeConstraint:":{"abs":"Removes the specified constraint from the view.","dec":"- (void)removeConstraint:(NSLayoutConstraint *)constraint"},"removeConstraints:":{"abs":"Removes the specified constraints from the view.","dec":"- (void)removeConstraints:(NSArray *)constraints"},"removeFromSuperview":{"abs":"Unlinks the view from its superview and its window, and removes it from the responder chain.","dec":"- (void)removeFromSuperview"},"removeGestureRecognizer:":{"abs":"Detaches a gesture recognizer from the receiving view.","dec":"- (void)removeGestureRecognizer:(UIGestureRecognizer *)gestureRecognizer"},"removeMotionEffect:":{"abs":"Stops applying a motion effect to the view.","dec":"- (void)removeMotionEffect:(UIMotionEffect *)effect"},"resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets:":{"abs":"Returns a snapshot view based on the specified contents of the current view, with stretchable insets.","dec":"- (UIView *)resizableSnapshotViewFromRect:(CGRect)rect afterScreenUpdates:(BOOL)afterUpdates withCapInsets:(UIEdgeInsets)capInsets"},"sendSubviewToBack:":{"abs":"Moves the specified subview so that it appears behind its siblings.","dec":"- (void)sendSubviewToBack:(UIView *)view"},"setContentCompressionResistancePriority:forAxis:":{"abs":"Sets the priority with which a view resists being made smaller than its intrinsic size.","dec":"- (void)setContentCompressionResistancePriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis"},"setContentHuggingPriority:forAxis:":{"abs":"Sets the priority with which a view resists being made larger than its intrinsic size.","dec":"- (void)setContentHuggingPriority:(UILayoutPriority)priority forAxis:(UILayoutConstraintAxis)axis"},"setNeedsDisplay":{"abs":"Marks the receiver’s entire bounds rectangle as needing to be redrawn.","dec":"- (void)setNeedsDisplay"},"setNeedsDisplayInRect:":{"abs":"Marks the specified rectangle of the receiver as needing to be redrawn.","dec":"- (void)setNeedsDisplayInRect:(CGRect)invalidRect"},"setNeedsLayout":{"abs":"Invalidates the current layout of the receiver and triggers a layout update during the next update cycle.","dec":"- (void)setNeedsLayout"},"setNeedsUpdateConstraints":{"abs":"Controls whether the view’s constraints need updating.","dec":"- (void)setNeedsUpdateConstraints"},"setTranslatesAutoresizingMaskIntoConstraints:":{"abs":"Sets whether the view’s autoresizing mask should be translated into constraints for the constraint-based layout system.","dec":"- (void)setTranslatesAutoresizingMaskIntoConstraints:(BOOL)flag"},"sizeThatFits:":{"abs":"Asks the view to calculate and return the size that best fits its subviews.","dec":"- (CGSize)sizeThatFits:(CGSize)size"},"sizeToFit":{"abs":"Resizes and moves the receiver view so it just encloses its subviews.","dec":"- (void)sizeToFit"},"snapshotViewAfterScreenUpdates:":{"abs":"Returns a snapshot view based on the contents of the current view.","dec":"- (UIView *)snapshotViewAfterScreenUpdates:(BOOL)afterUpdates"},"systemLayoutSizeFittingSize:":{"abs":"Returns the size of the view that satisfies the constraints it holds.","dec":"- (CGSize)systemLayoutSizeFittingSize:(CGSize)targetSize"},"tintColorDidChange":{"abs":"Called by the system when the tintColor property changes.","dec":"- (void)tintColorDidChange"},"translatesAutoresizingMaskIntoConstraints":{"abs":"Returns a Boolean value that indicates whether the view’s autoresizing mask is translated into constraints for the constraint-based layout system.","dec":"- (BOOL)translatesAutoresizingMaskIntoConstraints"},"updateConstraints":{"abs":"Updates constraints for the view.","dec":"- (void)updateConstraints"},"updateConstraintsIfNeeded":{"abs":"Updates the constraints for the receiving view and its subviews.","dec":"- (void)updateConstraintsIfNeeded"},"viewForBaselineLayout":{"abs":"Returns a view used to satisfy baseline constraints.","dec":"- (UIView *)viewForBaselineLayout"},"viewPrintFormatter":{"abs":"Returns a print formatter for the receiving view.","dec":"- (UIViewPrintFormatter *)viewPrintFormatter"},"viewWithTag:":{"abs":"Returns the view whose tag matches the specified value.","dec":"- (UIView *)viewWithTag:(NSInteger)tag"},"willMoveToSuperview:":{"abs":"Tells the view that its superview is about to change to the specified superview.","dec":"- (void)willMoveToSuperview:(UIView *)newSuperview"},"willMoveToWindow:":{"abs":"Tells the view that its window object is about to change.","dec":"- (void)willMoveToWindow:(UIWindow *)newWindow"},"willRemoveSubview:":{"abs":"Tells the view that a subview is about to be removed.","dec":"- (void)willRemoveSubview:(UIView *)subview"}},"[=]":{"UIViewAnimationOptionLayoutSubviews":"","UIViewAnimationOptionAllowUserInteraction":"","UIViewAnimationOptionBeginFromCurrentState":"","UIViewAnimationOptionRepeat":"","UIViewAnimationOptionAutoreverse":"","UIViewAnimationOptionOverrideInheritedDuration":"","UIViewAnimationOptionOverrideInheritedCurve":"","UIViewAnimationOptionAllowAnimatedContent":"","UIViewAnimationOptionShowHideTransitionViews":"","UIViewAnimationOptionOverrideInheritedOptions":"","UIViewAnimationOptionCurveEaseInOut":"","UIViewAnimationOptionCurveEaseIn":"","UIViewAnimationOptionCurveEaseOut":"","UIViewAnimationOptionCurveLinear":"","UIViewAnimationOptionTransitionNone":"","UIViewAnimationOptionTransitionFlipFromLeft":"","UIViewAnimationOptionTransitionFlipFromRight":"","UIViewAnimationOptionTransitionCurlUp":"","UIViewAnimationOptionTransitionCurlDown":"","UIViewAnimationOptionTransitionCrossDissolve":"","UIViewAnimationOptionTransitionFlipFromTop":"","UIViewAnimationOptionTransitionFlipFromBottom":"","UIViewAnimationCurveEaseInOut":"","UIViewAnimationCurveEaseIn":"","UIViewAnimationCurveEaseOut":"","UIViewAnimationCurveLinear":"","UIViewKeyframeAnimationOptionLayoutSubviews":"","UIViewKeyframeAnimationOptionAllowUserInteraction":"","UIViewKeyframeAnimationOptionBeginFromCurrentState":"","UIViewKeyframeAnimationOptionRepeat":"","UIViewKeyframeAnimationOptionAutoreverse":"","UIViewKeyframeAnimationOptionOverrideInheritedDuration":"","UIViewKeyframeAnimationOptionOverrideInheritedOptions":"","UIViewKeyframeAnimationOptionCalculationModeLinear":"","UIViewKeyframeAnimationOptionCalculationModeDiscrete":"","UIViewKeyframeAnimationOptionCalculationModePaced":"","UIViewKeyframeAnimationOptionCalculationModeCubic":"","UIViewKeyframeAnimationOptionCalculationModeCubicPaced":"","UIViewContentModeScaleToFill":"","UIViewContentModeScaleAspectFit":"","UIViewContentModeScaleAspectFill":"","UIViewContentModeRedraw":"","UIViewContentModeCenter":"","UIViewContentModeTop":"","UIViewContentModeBottom":"","UIViewContentModeLeft":"","UIViewContentModeRight":"","UIViewContentModeTopLeft":"","UIViewContentModeTopRight":"","UIViewContentModeBottomLeft":"","UIViewContentModeBottomRight":"","UILayoutConstraintAxisHorizontal":"","UILayoutConstraintAxisVertical":"","UIViewTintAdjustmentModeAutomatic":"","UIViewTintAdjustmentModeNormal":"","UIViewTintAdjustmentModeDimmed":"","UISystemAnimationDelete":"","UILayoutFittingCompressedSize":"","UILayoutFittingExpandedSize":"","UIViewNoIntrinsicMetric":"","UIViewAutoresizingNone":"","UIViewAutoresizingFlexibleLeftMargin":"","UIViewAutoresizingFlexibleWidth":"","UIViewAutoresizingFlexibleRightMargin":"","UIViewAutoresizingFlexibleTopMargin":"","UIViewAutoresizingFlexibleHeight":"","UIViewAutoresizingFlexibleBottomMargin":"","UIViewAnimationTransitionNone":"","UIViewAnimationTransitionFlipFromLeft":"","UIViewAnimationTransitionFlipFromRight":"","UIViewAnimationTransitionCurlUp":"","UIViewAnimationTransitionCurlDown":""}};

ClassRef.UIViewController = {"[:]":"UIResponder : NSObject","[.]":{"automaticallyAdjustsScrollViewInsets":{"abs":"Specifies whether or not the view controller should automatically adjust its scroll view insets.","dec":"@property(nonatomic, assign) BOOL automaticallyAdjustsScrollViewInsets"},"bottomLayoutGuide":{"abs":"Indicates the lowest vertical extent for your onscreen content, for use with Auto Layout constraints. (read-only)","dec":"@property(nonatomic, readonly, retain) id<UILayoutSupport> bottomLayoutGuide"},"childViewControllers":{"abs":"An array of the view controllers that are the children of the receiver in the view controller hierarchy. (read-only)","dec":"@property(nonatomic, readonly) NSArray *childViewControllers"},"definesPresentationContext":{"abs":"A Boolean value that indicates whether this view controller's view is covered when the view controller or one of its descendants presents a view controller.","dec":"@property(nonatomic, assign) BOOL definesPresentationContext"},"edgesForExtendedLayout":{"abs":"Indicates the extended edges to use for the layout.","dec":"@property(nonatomic, assign) UIRectEdge edgesForExtendedLayout"},"editing":{"abs":"A Boolean value indicating whether the view controller currently allows the user to edit the view contents.","dec":"@property(nonatomic, getter=isEditing) BOOL editing"},"extendedLayoutIncludesOpaqueBars":{"abs":"Indicates whether or not the extended layout includes opaque bars.","dec":"@property(nonatomic, assign) BOOL extendedLayoutIncludesOpaqueBars"},"hidesBottomBarWhenPushed":{"abs":"A Boolean value indicating whether the toolbar at the bottom of the screen is hidden when the view controller is pushed on to a navigation controller.","dec":"@property(nonatomic) BOOL hidesBottomBarWhenPushed"},"interfaceOrientation":{"abs":"Convenience property that provides the current orientation of the interface, meaningful only if the view controller is taking up the full screen. (read-only)","dec":"@property(nonatomic, readonly) UIInterfaceOrientation interfaceOrientation"},"modalInPopover":{"abs":"A Boolean value indicating whether the view controller should be presented modally by a popover.","dec":"@property(nonatomic, readwrite, getter=isModalInPopover) BOOL modalInPopover"},"modalPresentationCapturesStatusBarAppearance":{"abs":"Specifies whether a view controller, presented non–fullscreen, takes over control of status bar appearance from the presenting view controller.","dec":"@property(nonatomic, assign) BOOL modalPresentationCapturesStatusBarAppearance"},"modalPresentationStyle":{"abs":"The presentation style for modally presented view controllers.","dec":"@property(nonatomic, assign) UIModalPresentationStyle modalPresentationStyle"},"modalTransitionStyle":{"abs":"The transition style to use when presenting the receiver.","dec":"@property(nonatomic, assign) UIModalTransitionStyle modalTransitionStyle"},"navigationController":{"abs":"The nearest ancestor in the view controller hierarchy that is a navigation controller. (read-only)","dec":"@property(nonatomic, readonly, retain) UINavigationController *navigationController"},"navigationItem":{"abs":"The navigation item used to represent the view controller in a parent’s navigation bar. (read-only)","dec":"@property(nonatomic, readonly, retain) UINavigationItem *navigationItem"},"nibBundle":{"abs":"Return the name of the receiver’s nib bundle if it exists. (read-only)","dec":"@property(nonatomic, readonly, retain) NSBundle *nibBundle"},"nibName":{"abs":"Return the name of the receiver’s nib file, if one was specified. (read-only)","dec":"@property(nonatomic, readonly, copy) NSString *nibName"},"parentViewController":{"abs":"The parent view controller of the recipient. (read-only)","dec":"@property(nonatomic, readonly) UIViewController *parentViewController"},"preferredContentSize":{"abs":"The preferred content size for any container view that is laying out a child view controller.","dec":"@property(nonatomic) CGSize preferredContentSize"},"presentedViewController":{"abs":"The view controller that is presented by this view controller, or one of its ancestors in the view controller hierarchy. (read-only)","dec":"@property(nonatomic, readonly) UIViewController *presentedViewController"},"presentingViewController":{"abs":"The view controller that presented this view controller. (read-only)","dec":"@property(nonatomic, readonly) UIViewController *presentingViewController"},"providesPresentationContextTransitionStyle":{"abs":"A Boolean value that indicates whether the view controller defines the transition style for view controllers it presents.","dec":"@property(nonatomic, assign) BOOL providesPresentationContextTransitionStyle"},"restorationClass":{"abs":"The class responsible for recreating this view controller when restoring the app’s state.","dec":"@property(nonatomic, readwrite, assign) Class<UIViewControllerRestoration> *restorationClass"},"restorationIdentifier":{"abs":"The identifier that determines whether the view controller supports state restoration.","dec":"@property(nonatomic, copy) NSString *restorationIdentifier"},"searchDisplayController":{"abs":"The search display controller associated with the view controller. (read-only)","dec":"@property(nonatomic, readonly, retain) UISearchDisplayController *searchDisplayController"},"splitViewController":{"abs":"The nearest ancestor in the view controller hierarchy that is a split view controller. (read-only)","dec":"@property(nonatomic, readonly, retain) UISplitViewController *splitViewController"},"storyboard":{"abs":"The storyboard from which the view controller originated. (read-only)","dec":"@property(nonatomic, readonly, retain) UIStoryboard *storyboard"},"tabBarController":{"abs":"The nearest ancestor in the view controller hierarchy that is a tab bar controller. (read-only)","dec":"@property(nonatomic, readonly, retain) UITabBarController *tabBarController"},"tabBarItem":{"abs":"The tab bar item that represents the view controller when added to a tab bar controller.","dec":"@property(nonatomic, retain) UITabBarItem *tabBarItem"},"title":{"abs":"A localized string that represents the view this controller manages.","dec":"@property(nonatomic, copy) NSString *title"},"toolbarItems":{"abs":"The toolbar items associated with the view controller.","dec":"@property(nonatomic, retain) NSArray *toolbarItems"},"topLayoutGuide":{"abs":"Indicates the highest vertical extent for your onscreen content, for use with Auto Layout constraints. (read-only)","dec":"@property(nonatomic, readonly, retain) id<UILayoutSupport> topLayoutGuide"},"transitioningDelegate":{"abs":"The delegate object that provides transition animator and interactive controller objects.","dec":"@property(nonatomic, assign) id<UIViewControllerTransitioningDelegate> transitioningDelegate"},"view":{"abs":"The view that the controller manages.","dec":"@property(nonatomic, retain) UIView *view"}},"[+]":{"attemptRotationToDeviceOrientation":{"abs":"Attempts to rotate all windows to the orientation of the device.","dec":"+ (void)attemptRotationToDeviceOrientation"}},"[-]":{"addChildViewController:":{"abs":"Adds the given view controller as a child.","dec":"- (void)addChildViewController:(UIViewController *)childController"},"applicationFinishedRestoringState":{"abs":"Called on restored view controllers after other object decoding is complete.","dec":"- (void)applicationFinishedRestoringState"},"beginAppearanceTransition:animated:":{"abs":"Tells a child controller its appearance is about to change.","dec":"- (void)beginAppearanceTransition:(BOOL)isAppearing animated:(BOOL)animated"},"canPerformUnwindSegueAction:fromViewController:withSender:":{"abs":"Called on a view controller to determine whether it wants to respond to an unwind action.","dec":"- (BOOL)canPerformUnwindSegueAction:(SEL)action fromViewController:(UIViewController *)fromViewController withSender:(id)sender"},"childViewControllerForStatusBarHidden":{"abs":"Called when the system needs the view controller to use for determining status bar hidden/unhidden state.","dec":"- (UIViewController *)childViewControllerForStatusBarHidden"},"childViewControllerForStatusBarStyle":{"abs":"Called when the system needs the view controller to use for determining status bar style.","dec":"- (UIViewController *)childViewControllerForStatusBarStyle"},"decodeRestorableStateWithCoder:":{"abs":"Decodes and restores state-related information for the view controller.","dec":"- (void)decodeRestorableStateWithCoder:(NSCoder *)coder"},"didMoveToParentViewController:":{"abs":"Called after the view controller is added or removed from a container view controller.","dec":"- (void)didMoveToParentViewController:(UIViewController *)parent"},"didReceiveMemoryWarning":{"abs":"Sent to the view controller when the app receives a memory warning.","dec":"- (void)didReceiveMemoryWarning"},"didRotateFromInterfaceOrientation:":{"abs":"Sent to the view controller after the user interface rotates.","dec":"- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation"},"disablesAutomaticKeyboardDismissal":{"abs":"Returns a Boolean indicating whether the current input view is dismissed automatically when changing controls.","dec":"- (BOOL)disablesAutomaticKeyboardDismissal"},"dismissViewControllerAnimated:completion:":{"abs":"Dismisses the view controller that was presented by the receiver.","dec":"- (void)dismissViewControllerAnimated:(BOOL)flag completion:(void (^)(void))completion"},"editButtonItem":{"abs":"Returns a bar button item that toggles its title and associated state between Edit and Done.","dec":"- (UIBarButtonItem *)editButtonItem"},"encodeRestorableStateWithCoder:":{"abs":"Encodes state-related information for the view controller.","dec":"- (void)encodeRestorableStateWithCoder:(NSCoder *)coder"},"endAppearanceTransition":{"abs":"Tells a child controller its appearance has changed.","dec":"- (void)endAppearanceTransition"},"initWithNibName:bundle:":{"abs":"Returns a newly initialized view controller with the nib file in the specified bundle.","dec":"- (id)initWithNibName:(NSString *)nibName bundle:(NSBundle *)nibBundle"},"isBeingDismissed":{"abs":"Returns a Boolean value that indicates whether the view controller is in the process of being dismissed by one of its ancestors.","dec":"- (BOOL)isBeingDismissed"},"isBeingPresented":{"abs":"Returns a Boolean value that indicates whether the view controller is in the process of being presented by one of its ancestors.","dec":"- (BOOL)isBeingPresented"},"isMovingFromParentViewController":{"abs":"Returns a Boolean value that indicates that the view controller is in the process of being removed from its parent.","dec":"- (BOOL)isMovingFromParentViewController"},"isMovingToParentViewController":{"abs":"Returns a Boolean value that indicates that the view controller is in the process of being added to a parent.","dec":"- (BOOL)isMovingToParentViewController"},"isViewLoaded":{"abs":"Returns a Boolean value indicating whether the view is currently loaded into memory.","dec":"- (BOOL)isViewLoaded"},"loadView":{"abs":"Creates the view that the controller manages.","dec":"- (void)loadView"},"performSegueWithIdentifier:sender:":{"abs":"Initiates the segue with the specified identifier from the view controller’s storyboard file.","dec":"- (void)performSegueWithIdentifier:(NSString *)identifier sender:(id)sender"},"preferredInterfaceOrientationForPresentation":{"abs":"Returns the interface orientation to use when presenting the view controller.","dec":"- (UIInterfaceOrientation)preferredInterfaceOrientationForPresentation"},"preferredStatusBarStyle":{"abs":"The preferred status bar style for the view controller.","dec":"- (UIStatusBarStyle)preferredStatusBarStyle"},"preferredStatusBarUpdateAnimation":{"abs":"Specifies the animation style to use for hiding and showing the status bar for the view controller.","dec":"- (UIStatusBarAnimation)preferredStatusBarUpdateAnimation"},"prefersStatusBarHidden":{"abs":"Specifies whether the view controller prefers the status bar to be hidden or shown.","dec":"- (BOOL)prefersStatusBarHidden"},"prepareForSegue:sender:":{"abs":"Notifies the view controller that a segue is about to be performed.","dec":"- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender"},"presentViewController:animated:completion:":{"abs":"Presents a view controller.","dec":"- (void)presentViewController:(UIViewController *)viewControllerToPresent animated:(BOOL)flag completion:(void (^)(void))completion"},"removeFromParentViewController":{"abs":"Removes the receiver from its parent in the view controller hierarchy.","dec":"- (void)removeFromParentViewController"},"rotatingFooterView":{"abs":"Returns the footer view to transition during an interface orientation change.","dec":"- (UIView *)rotatingFooterView"},"rotatingHeaderView":{"abs":"Returns the header view to transition during an interface orientation change.","dec":"- (UIView *)rotatingHeaderView"},"segueForUnwindingToViewController:fromViewController:identifier:":{"abs":"Called when an unwind segue action needs to transition between two view controllers.","dec":"- (UIStoryboardSegue *)segueForUnwindingToViewController:(UIViewController *)toViewController fromViewController:(UIViewController *)fromViewController identifier:(NSString *)identifier"},"setEditing:animated:":{"abs":"Sets whether the view controller shows an editable view.","dec":"- (void)setEditing:(BOOL)editing animated:(BOOL)animated"},"setNeedsStatusBarAppearanceUpdate":{"abs":"Indicates to the system that the view controller status bar attributes have changed.","dec":"- (void)setNeedsStatusBarAppearanceUpdate"},"setToolbarItems:animated:":{"abs":"Sets the toolbar items to be displayed along with the view controller.","dec":"- (void)setToolbarItems:(NSArray *)toolbarItems animated:(BOOL)animated"},"shouldAutomaticallyForwardAppearanceMethods":{"abs":"Returns a Boolean value indicating whether appearance methods are forwarded to child view controllers.","dec":"- (BOOL)shouldAutomaticallyForwardAppearanceMethods"},"shouldAutomaticallyForwardRotationMethods":{"abs":"Returns a Boolean value indicating whether rotation methods are forwarded to child view controllers.","dec":"- (BOOL)shouldAutomaticallyForwardRotationMethods"},"shouldAutorotate":{"abs":"Returns whether the view controller’s contents should auto rotate.","dec":"- (BOOL)shouldAutorotate"},"shouldPerformSegueWithIdentifier:sender:":{"abs":"Determines whether the segue with the specified identifier should be triggered.","dec":"- (BOOL)shouldPerformSegueWithIdentifier:(NSString *)identifier sender:(id)sender"},"supportedInterfaceOrientations":{"abs":"Returns all of the interface orientations that the view controller supports.","dec":"- (NSUInteger)supportedInterfaceOrientations"},"transitionCoordinator":{"abs":"Returns a transition coordinator.","dec":"- (id<UIViewControllerTransitionCoordinator>)transitionCoordinator"},"transitionFromViewController:toViewController:duration:options:animations:completion:":{"abs":"Transitions between two of the view controller’s child view controllers.","dec":"- (void)transitionFromViewController:(UIViewController *)fromViewController toViewController:(UIViewController *)toViewController duration:(NSTimeInterval)duration options:(UIViewAnimationOptions)options animations:(void (^)(void))animations completion:(void (^)(BOOL finished))completion"},"updateViewConstraints":{"abs":"Called when the view controller’s view needs to update its constraints.","dec":"- (void)updateViewConstraints"},"viewControllerForUnwindSegueAction:fromViewController:withSender:":{"abs":"Called when an unwind segue action wants to search a container’s children for a view controller to handle the unwind action.","dec":"- (UIViewController *)viewControllerForUnwindSegueAction:(SEL)action fromViewController:(UIViewController *)fromViewController withSender:(id)sender"},"viewDidAppear:":{"abs":"Notifies the view controller that its view was added to a view hierarchy.","dec":"- (void)viewDidAppear:(BOOL)animated"},"viewDidDisappear:":{"abs":"Notifies the view controller that its view was removed from a view hierarchy.","dec":"- (void)viewDidDisappear:(BOOL)animated"},"viewDidLayoutSubviews":{"abs":"Called to notify the view controller that its view has just laid out its subviews.","dec":"- (void)viewDidLayoutSubviews"},"viewDidLoad":{"abs":"Called after the controller’s view is loaded into memory.","dec":"- (void)viewDidLoad"},"viewWillAppear:":{"abs":"Notifies the view controller that its view is about to be added to a view hierarchy.","dec":"- (void)viewWillAppear:(BOOL)animated"},"viewWillDisappear:":{"abs":"Notifies the view controller that its view is about to be removed from a view hierarchy.","dec":"- (void)viewWillDisappear:(BOOL)animated"},"viewWillLayoutSubviews":{"abs":"Called to notify the view controller that its view is about to layout its subviews.","dec":"- (void)viewWillLayoutSubviews"},"willAnimateRotationToInterfaceOrientation:duration:":{"abs":"Sent to the view controller before performing a one-step user interface rotation.","dec":"- (void)willAnimateRotationToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation duration:(NSTimeInterval)duration"},"willMoveToParentViewController:":{"abs":"Called just before the view controller is added or removed from a container view controller.","dec":"- (void)willMoveToParentViewController:(UIViewController *)parent"},"willRotateToInterfaceOrientation:duration:":{"abs":"Sent to the view controller just before the user interface begins rotating.","dec":"- (void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration"}},"[=]":{"UIModalTransitionStyleCoverVertical":"","UIModalTransitionStyleFlipHorizontal":"","UIModalTransitionStyleCrossDissolve":"","UIModalTransitionStylePartialCurl":"","UIModalPresentationFullScreen":"","UIModalPresentationPageSheet":"","UIModalPresentationFormSheet":"","UIModalPresentationCurrentContext":"","UIModalPresentationCustom":"","UIModalPresentationNone":"","UIViewControllerHierarchyInconsistencyException":""}};

ClassRef.UIViewPrintFormatter = {"[:]":"UIPrintFormatter : NSObject","[.]":{"view":{"abs":"The view from which the view print formatter was derived. (read-only)","dec":"@property(nonatomic, readonly) UIView *view"}}};

ClassRef.UIWebView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"allowsInlineMediaPlayback":{"abs":"A Boolean value that determines whether HTML5 videos play inline or use the native full-screen controller.","dec":"@property(nonatomic) BOOL allowsInlineMediaPlayback"},"canGoBack":{"abs":"A Boolean value indicating whether the receiver can move backward. (read-only)","dec":"@property(nonatomic, readonly, getter=canGoBack) BOOL canGoBack"},"canGoForward":{"abs":"A Boolean value indicating whether the receiver can move forward. (read-only)","dec":"@property(nonatomic, readonly, getter=canGoForward) BOOL canGoForward"},"dataDetectorTypes":{"abs":"The types of data converted to clickable URLs in the web view’s content.","dec":"@property(nonatomic) UIDataDetectorTypes dataDetectorTypes"},"delegate":{"abs":"The receiver’s delegate.","dec":"@property(nonatomic, assign) id<UIWebViewDelegate> delegate"},"gapBetweenPages":{"abs":"The size of the gap, in points, between pages.","dec":"@property(nonatomic) CGFloat gapBetweenPages"},"keyboardDisplayRequiresUserAction":{"abs":"A Boolean value indicating whether web content can programmatically display the keyboard.","dec":"@property(nonatomic) BOOL keyboardDisplayRequiresUserAction"},"loading":{"abs":"A Boolean value indicating whether the receiver is done loading content. (read-only)","dec":"@property(nonatomic, readonly, getter=isLoading) BOOL loading"},"mediaPlaybackAllowsAirPlay":{"abs":"A Boolean value that determines whether Air Play is allowed from this view.","dec":"@property(nonatomic) BOOL mediaPlaybackAllowsAirPlay"},"mediaPlaybackRequiresUserAction":{"abs":"A Boolean value that determines whether HTML5 videos can play automatically or require the user to start playing them.","dec":"@property(nonatomic) BOOL mediaPlaybackRequiresUserAction"},"pageCount":{"abs":"The number of pages produced by the layout of the web view. (read-only)","dec":"@property(nonatomic, readonly) NSUInteger pageCount"},"pageLength":{"abs":"The size of each page, in points, in the direction that the pages flow.","dec":"@property(nonatomic) CGFloat pageLength"},"paginationBreakingMode":{"abs":"The manner in which column- or page-breaking occurs.","dec":"@property(nonatomic) UIWebPaginationBreakingMode paginationBreakingMode"},"paginationMode":{"abs":"The layout of content in the web view.","dec":"@property(nonatomic) UIWebPaginationMode paginationMode"},"request":{"abs":"The URL request identifying the location of the content to load. (read-only)","dec":"@property(nonatomic, readonly, retain) NSURLRequest *request"},"scalesPageToFit":{"abs":"A Boolean value determining whether the webpage scales to fit the view and the user can change the scale.","dec":"@property(nonatomic) BOOL scalesPageToFit"},"scrollView":{"abs":"The scroll view associated with the web view. (read-only)","dec":"@property(nonatomic, readonly, retain) UIScrollView *scrollView"},"suppressesIncrementalRendering":{"abs":"A Boolean value indicating whether the web view suppresses content rendering until it is fully loaded into memory.","dec":"@property(nonatomic) BOOL suppressesIncrementalRendering"}},"[-]":{"goBack":{"abs":"Loads the previous location in the back-forward list.","dec":"- (void)goBack"},"goForward":{"abs":"Loads the next location in the back-forward list.","dec":"- (void)goForward"},"loadData:MIMEType:textEncodingName:baseURL:":{"abs":"Sets the main page contents, MIME type, content encoding, and base URL.","dec":"- (void)loadData:(NSData *)data MIMEType:(NSString *)MIMEType textEncodingName:(NSString *)encodingName baseURL:(NSURL *)baseURL"},"loadHTMLString:baseURL:":{"abs":"Sets the main page content and base URL.","dec":"- (void)loadHTMLString:(NSString *)string baseURL:(NSURL *)baseURL"},"loadRequest:":{"abs":"Connects to a given URL by initiating an asynchronous client request.","dec":"- (void)loadRequest:(NSURLRequest *)request"},"reload":{"abs":"Reloads the current page.","dec":"- (void)reload"},"stopLoading":{"abs":"Stops the loading of any web content managed by the receiver.","dec":"- (void)stopLoading"},"stringByEvaluatingJavaScriptFromString:":{"abs":"Returns the result of running a script.","dec":"- (NSString *)stringByEvaluatingJavaScriptFromString:(NSString *)script"}},"[=]":{"UIWebViewNavigationTypeLinkClicked":"","UIWebViewNavigationTypeFormSubmitted":"","UIWebViewNavigationTypeBackForward":"","UIWebViewNavigationTypeReload":"","UIWebViewNavigationTypeFormResubmitted":"","UIWebViewNavigationTypeOther":"","UIWebPaginationBreakingModePage":"","UIWebPaginationBreakingModeColumn":"","UIWebPaginationModeUnpaginated":"","UIWebPaginationModeLeftToRight":"","UIWebPaginationModeTopToBottom":"","UIWebPaginationModeBottomToTop":"","UIWebPaginationModeRightToLeft":""}};

ClassRef.UIWindow = {"[:]":"UIView : UIResponder : NSObject","[.]":{"keyWindow":{"abs":"A Boolean value that indicates whether the receiver is the key window for the application. (read-only)","dec":"@property(nonatomic, readonly, getter=isKeyWindow) BOOL keyWindow"},"rootViewController":{"abs":"The root view controller for the window.","dec":"@property(nonatomic, retain) UIViewController *rootViewController"},"screen":{"abs":"The screen on which the window is currently displayed.","dec":"@property(nonatomic, retain) UIScreen *screen"},"windowLevel":{"abs":"The receiver’s window level.","dec":"@property(nonatomic) UIWindowLevel windowLevel"}},"[-]":{"becomeKeyWindow":{"abs":"Invoked automatically to inform the receiver that it has become the key window; never invoke this method directly.","dec":"- (void)becomeKeyWindow"},"convertPoint:fromWindow:":{"abs":"Converts a point from the coordinate system of a given window to that of the receiver.","dec":"- (CGPoint)convertPoint:(CGPoint)point fromWindow:(UIWindow *)window"},"convertPoint:toWindow:":{"abs":"Converts a point from the receiver’s coordinate system to that of another window.","dec":"- (CGPoint)convertPoint:(CGPoint)point toWindow:(UIWindow *)window"},"convertRect:fromWindow:":{"abs":"Converts a rectangle from the coordinate system of another window to that of the receiver.","dec":"- (CGRect)convertRect:(CGRect)rect fromWindow:(UIWindow *)window"},"convertRect:toWindow:":{"abs":"Converts a rectangle from the receiver’s coordinate system to that of another window.","dec":"- (CGRect)convertRect:(CGRect)rect toWindow:(UIWindow *)window"},"makeKeyAndVisible":{"abs":"Makes the receiver the key window and visible.","dec":"- (void)makeKeyAndVisible"},"makeKeyWindow":{"abs":"Makes the receiver the main window.","dec":"- (void)makeKeyWindow"},"resignKeyWindow":{"abs":"Invoked automatically when the window resigns key window status; never invoke this method directly.","dec":"- (void)resignKeyWindow"},"sendEvent:":{"abs":"Dispatches events sent to the receiver by the UIApplication object to its views.","dec":"- (void)sendEvent:(UIEvent *)event"}},"[=]":{"UIWindowLevelNormal":"","UIWindowLevelAlert":"","UIWindowLevelStatusBar":"","UIKeyboardFrameBeginUserInfoKey":"","UIKeyboardFrameEndUserInfoKey":"","UIKeyboardAnimationCurveUserInfoKey":"","UIKeyboardAnimationDurationUserInfoKey":"","UIKeyboardCenterBeginUserInfoKey":"","UIKeyboardCenterEndUserInfoKey":"","UIKeyboardBoundsUserInfoKey":""}};

})(window);