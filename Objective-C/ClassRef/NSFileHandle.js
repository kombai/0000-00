ClassRef["NSFileHandle"] = {"[:]":"NSObject","[.]":{"readabilityHandler":{"abs":"The block to use for reading the contents of the file handle asynchronously.","dec":"@property (copy) void (^readabilityHandler)(NSFileHandle *);"},"writeabilityHandler":{"abs":"The block to use for writing the contents of the file handle asynchronously.","dec":"@property (copy) void (^writeabilityHandler)(NSFileHandle *);"}},"[+]":{"fileHandleForReadingAtPath:":{"abs":"Returns a file handle initialized for reading the file, device, or named socket at the specified path.","dec":"+ (id)fileHandleForReadingAtPath:(NSString *)path"},"fileHandleForReadingFromURL:error:":{"abs":"Returns a file handle initialized for reading the file, device, or named socket at the specified URL.","dec":"+ (id)fileHandleForReadingFromURL:(NSURL *)url error:(NSError **)error"},"fileHandleForUpdatingAtPath:":{"abs":"Returns a file handle initialized for reading and writing to the file, device, or named socket at the specified path.","dec":"+ (id)fileHandleForUpdatingAtPath:(NSString *)path"},"fileHandleForUpdatingURL:error:":{"abs":"Returns a file handle initialized for reading and writing to the file, device, or named socket at the specified URL.","dec":"+ (id)fileHandleForUpdatingURL:(NSURL *)url error:(NSError **)error"},"fileHandleForWritingAtPath:":{"abs":"Returns a file handle initialized for writing to the file, device, or named socket at the specified path.","dec":"+ (id)fileHandleForWritingAtPath:(NSString *)path"},"fileHandleForWritingToURL:error:":{"abs":"Returns a file handle initialized for writing to the file, device, or named socket at the specified URL.","dec":"+ (id)fileHandleForWritingToURL:(NSURL *)url error:(NSError **)error"},"fileHandleWithNullDevice":{"abs":"Returns a file handle associated with a null device.","dec":"+ (id)fileHandleWithNullDevice"},"fileHandleWithStandardError":{"abs":"Returns the file handle associated with the standard error file.","dec":"+ (id)fileHandleWithStandardError"},"fileHandleWithStandardInput":{"abs":"Returns the file handle associated with the standard input file.","dec":"+ (id)fileHandleWithStandardInput"},"fileHandleWithStandardOutput":{"abs":"Returns the file handle associated with the standard output file.","dec":"+ (id)fileHandleWithStandardOutput"}},"[-]":{"acceptConnectionInBackgroundAndNotify":{"abs":"Accepts a socket connection (for stream-type sockets only) in the background and creates a file handle for the “near” (client) end of the communications channel.","dec":"- (void)acceptConnectionInBackgroundAndNotify"},"acceptConnectionInBackgroundAndNotifyForModes:":{"abs":"Accepts a socket connection (for stream-type sockets only) in the background and creates a file handle for the “near” (client) end of the communications channel.","dec":"- (void)acceptConnectionInBackgroundAndNotifyForModes:(NSArray *)modes"},"availableData":{"abs":"Returns the data currently available in the receiver.","dec":"- (NSData *)availableData"},"closeFile":{"abs":"Disallows further access to the represented file or communications channel and signals end of file on communications channels that permit writing.","dec":"- (void)closeFile"},"fileDescriptor":{"abs":"Returns the file descriptor associated with the receiver.","dec":"- (int)fileDescriptor"},"initWithFileDescriptor:":{"abs":"Initializes and returns a file handle object associated with the specified file descriptor.","dec":"- (id)initWithFileDescriptor:(int)fileDescriptor"},"initWithFileDescriptor:closeOnDealloc:":{"abs":"Initializes and returns a file handle object associated with the specified file descriptor and deallocation policy.","dec":"- (id)initWithFileDescriptor:(int)fileDescriptor closeOnDealloc:(BOOL)flag"},"offsetInFile":{"abs":"Returns the position of the file pointer within the file represented by the receiver.","dec":"- (unsigned long long)offsetInFile"},"readDataOfLength:":{"abs":"Synchronously reads data up to the specified number of bytes.","dec":"- (NSData *)readDataOfLength:(NSUInteger)length"},"readDataToEndOfFile":{"abs":"Synchronously reads the available data up to the end of file or maximum number of bytes.","dec":"- (NSData *)readDataToEndOfFile"},"readInBackgroundAndNotify":{"abs":"Reads from the file or communications channel in the background and posts a notification when finished.","dec":"- (void)readInBackgroundAndNotify"},"readInBackgroundAndNotifyForModes:":{"abs":"Reads from the file or communications channel in the background and posts a notification when finished.","dec":"- (void)readInBackgroundAndNotifyForModes:(NSArray *)modes"},"readToEndOfFileInBackgroundAndNotify":{"abs":"Reads to the end of file from the file or communications channel in the background and posts a notification when finished.","dec":"- (void)readToEndOfFileInBackgroundAndNotify"},"readToEndOfFileInBackgroundAndNotifyForModes:":{"abs":"Reads to the end of file from the file or communications channel in the background and posts a notification when finished.","dec":"- (void)readToEndOfFileInBackgroundAndNotifyForModes:(NSArray *)modes"},"seekToEndOfFile":{"abs":"Puts the file pointer at the end of the file referenced by the receiver and returns the new file offset.","dec":"- (unsigned long long)seekToEndOfFile"},"seekToFileOffset:":{"abs":"Moves the file pointer to the specified offset within the file represented by the receiver.","dec":"- (void)seekToFileOffset:(unsigned long long)offset"},"synchronizeFile":{"abs":"Causes all in-memory data and attributes of the file represented by the receiver to be written to permanent storage.","dec":"- (void)synchronizeFile"},"truncateFileAtOffset:":{"abs":"Truncates or extends the file represented by the receiver to a specified offset within the file and puts the file pointer at that position.","dec":"- (void)truncateFileAtOffset:(unsigned long long)offset"},"waitForDataInBackgroundAndNotify":{"abs":"Asynchronously checks to see if data is available.","dec":"- (void)waitForDataInBackgroundAndNotify"},"waitForDataInBackgroundAndNotifyForModes:":{"abs":"Asynchronously checks to see if data is available.","dec":"- (void)waitForDataInBackgroundAndNotifyForModes:(NSArray *)modes"},"writeData:":{"abs":"Synchronously writes the specified data to the receiver.","dec":"- (void)writeData:(NSData *)data"}},"[=]":{"NSFileHandleNotificationFileHandleItem":"","NSFileHandleNotificationDataItem":"","NSFileHandleOperationException":"","NSFileHandleNotificationMonitorModes":""}};