ClassRef["NSProxy"] = {"[+]":{"alloc":{"abs":"Returns a new instance of the receiving class","dec":"+ (id)alloc"},"allocWithZone:":{"abs":"Returns a new instance of the receiving class","dec":"+ (id)allocWithZone:(NSZone *)zone"},"class":{"abs":"Returns self (the class object).","dec":"+ (Class)class"},"respondsToSelector:":{"abs":"Returns a Boolean value that indicates whether the receiving class responds to a given selector.","dec":"+ (BOOL)respondsToSelector:(SEL)aSelector"}},"[-]":{"dealloc":{"abs":"Deallocates the memory occupied by the receiver.","dec":"- (void)dealloc"},"debugDescription":{"abs":"Returns an string containing the real class name and the id of the receiver as a hexadecimal number.","dec":"- (NSString *)debugDescription"},"description":{"abs":"Returns an NSString object containing the real class name and the id of the receiver as a hexadecimal number.","dec":"- (NSString *)description"},"finalize":{"abs":"The garbage collector invokes this method on the receiver before disposing of the memory it uses.","dec":"- (void)finalize"},"forwardInvocation:":{"abs":"Passes a given invocation to the real object the proxy represents.","dec":"- (void)forwardInvocation:(NSInvocation *)anInvocation"},"methodSignatureForSelector:":{"abs":"Raises NSInvalidArgumentException. Override this method in your concrete subclass to return a proper NSMethodSignature object for the given selector and the class your proxy objects stand in for.","dec":"- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector"}}};