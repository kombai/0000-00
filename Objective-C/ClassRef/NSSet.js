ClassRef["NSSet"] = {"[:]":"NSObject","[+]":{"set":{"abs":"Creates and returns an empty set.","dec":"+ (instancetype)set"},"setWithArray:":{"abs":"Creates and returns a set containing a uniqued collection of the objects contained in a given array.","dec":"+ (instancetype)setWithArray:(NSArray *)array"},"setWithObject:":{"abs":"Creates and returns a set that contains a single given object.","dec":"+ (instancetype)setWithObject:(id)object"},"setWithObjects:":{"abs":"Creates and returns a set containing the objects in a given argument list.","dec":"+ (instancetype)setWithObjects:(id)firstObj, ..."},"setWithObjects:count:":{"abs":"Creates and returns a set containing a specified number of objects from a given C array of objects.","dec":"+ (instancetype)setWithObjects:(const id [])objects count:(NSUInteger)cnt"},"setWithSet:":{"abs":"Creates and returns a set containing the objects from another set.","dec":"+ (instancetype)setWithSet:(NSSet *)set"}},"[-]":{"addObserver:forKeyPath:options:context:":{"abs":"Raises an exception.","dec":"- (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context"},"allObjects":{"abs":"Returns an array containing the set’s members, or an empty array if the set has no members.","dec":"- (NSArray *)allObjects"},"anyObject":{"abs":"Returns one of the objects in the set, or nil if the set contains no objects.","dec":"- (id)anyObject"},"containsObject:":{"abs":"Returns a Boolean value that indicates whether a given object is present in the set.","dec":"- (BOOL)containsObject:(id)anObject"},"count":{"abs":"Returns the number of members in the set.","dec":"- (NSUInteger)count"},"description":{"abs":"Returns a string that represents the contents of the set, formatted as a property list.","dec":"- (NSString *)description"},"descriptionWithLocale:":{"abs":"Returns a string that represents the contents of the set, formatted as a property list.","dec":"- (NSString *)descriptionWithLocale:(id)locale"},"enumerateObjectsUsingBlock:":{"abs":"Executes a given Block using each object in the set.","dec":"- (void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block"},"enumerateObjectsWithOptions:usingBlock:":{"abs":"Executes a given Block using each object in the set, using the specified enumeration options.","dec":"- (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block"},"filteredSetUsingPredicate:":{"abs":"Evaluates a given predicate against each object in the receiving set and returns a new set containing the objects for which the predicate returns true.","dec":"- (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate"},"init":{"abs":"Initializes a newly allocated set.","dec":"- (instancetype)init"},"initWithArray:":{"abs":"Initializes a newly allocated set with the objects that are contained in a given array.","dec":"- (instancetype)initWithArray:(NSArray *)array"},"initWithObjects:":{"abs":"Initializes a newly allocated set with members taken from the specified list of objects.","dec":"- (instancetype)initWithObjects:(id)firstObj, ..."},"initWithObjects:count:":{"abs":"Initializes a newly allocated set with a specified number of objects from a given C array of objects.","dec":"- (instancetype)initWithObjects:(const id [])objects count:(NSUInteger)cnt"},"initWithSet:":{"abs":"Initializes a newly allocated set and adds to it objects from another given set.","dec":"- (instancetype)initWithSet:(NSSet *)set"},"initWithSet:copyItems:":{"abs":"Initializes a newly allocated set and adds to it members of another given set.","dec":"- (instancetype)initWithSet:(NSSet *)set copyItems:(BOOL)flag"},"intersectsSet:":{"abs":"Returns a Boolean value that indicates whether at least one object in the receiving set is also present in another given set.","dec":"- (BOOL)intersectsSet:(NSSet *)otherSet"},"isEqualToSet:":{"abs":"Compares the receiving set to another set.","dec":"- (BOOL)isEqualToSet:(NSSet *)otherSet"},"isSubsetOfSet:":{"abs":"Returns a Boolean value that indicates whether every object in the receiving set is also present in another given set.","dec":"- (BOOL)isSubsetOfSet:(NSSet *)otherSet"},"makeObjectsPerformSelector:":{"abs":"Sends a message specified by a given selector to each object in the set.","dec":"- (void)makeObjectsPerformSelector:(SEL)aSelector"},"makeObjectsPerformSelector:withObject:":{"abs":"Sends a message specified by a given selector to each object in the set.","dec":"- (void)makeObjectsPerformSelector:(SEL)aSelector withObject:(id)argument"},"member:":{"abs":"Determines whether the set contains an object equal to a given object, and returns that object if it is present.","dec":"- (id)member:(id)object"},"objectEnumerator":{"abs":"Returns an enumerator object that lets you access each object in the set.","dec":"- (NSEnumerator *)objectEnumerator"},"objectsPassingTest:":{"abs":"Returns a set of object that pass a test in a given Block.","dec":"- (NSSet *)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate"},"objectsWithOptions:passingTest:":{"abs":"Returns a set of object that pass a test in a given Block, using the specified enumeration options.","dec":"- (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate"},"removeObserver:forKeyPath:":{"abs":"Raises an exception.","dec":"- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath"},"removeObserver:forKeyPath:context:":{"abs":"Raises an exception.","dec":"- (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context"},"setByAddingObject:":{"abs":"Returns a new set formed by adding a given object to the receiving set.","dec":"- (NSSet *)setByAddingObject:(id)anObject"},"setByAddingObjectsFromArray:":{"abs":"Returns a new set formed by adding the objects in a given array to the receiving set.","dec":"- (NSSet *)setByAddingObjectsFromArray:(NSArray *)other"},"setByAddingObjectsFromSet:":{"abs":"Returns a new set formed by adding the objects in a given set to the receiving set.","dec":"- (NSSet *)setByAddingObjectsFromSet:(NSSet *)other"},"setValue:forKey:":{"abs":"Invokes setValue:forKey: on each of the set’s members.","dec":"- (void)setValue:(id)value forKey:(NSString *)key"},"sortedArrayUsingDescriptors:":{"abs":"Returns an array of the set’s content sorted as specified by a given array of sort descriptors.","dec":"- (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors"},"valueForKey:":{"abs":"Return a set containing the results of invoking valueForKey: on each of the receiving set's members.","dec":"- (id)valueForKey:(NSString *)key"}}};