ClassRef.NSLayoutManager  = {"[:]":"NSObject","[.]":{"allowsNonContiguousLayout":{"abs":"Indicates whether noncontiguous layout is enabled or disabled.","dec":"@property(nonatomic) BOOL allowsNonContiguousLayout"},"delegate":{"abs":"This layout manager’s delegate.","dec":"@property(assign, nonatomic) id<NSLayoutManagerDelegate> delegate"},"extraLineFragmentRect":{"abs":"The rectangle defining the extra line fragment for the insertion point at the end of a text (either in an empty text or after a final paragraph separator). (read-only)","dec":"@property(readonly, nonatomic) CGRect extraLineFragmentRect"},"extraLineFragmentTextContainer":{"abs":"The text container that contains the extra line fragment rectangle. (read-only)","dec":"@property(readonly, nonatomic) NSTextContainer *extraLineFragmentTextContainer"},"extraLineFragmentUsedRect":{"abs":"The rectangle enclosing the insertion point drawn in the extra line fragment rectangle. (read-only)","dec":"@property(readonly, nonatomic) CGRect extraLineFragmentUsedRect"},"hasNonContiguousLayout":{"abs":"Indicates whether the layout manager currently has any areas of noncontiguous layout. (read-only)","dec":"@property(readonly, nonatomic) BOOL hasNonContiguousLayout"},"hyphenationFactor":{"abs":"The current hyphenation threshold.","dec":"@property(nonatomic) CGFloat hyphenationFactor"},"numberOfGlyphs":{"abs":"The number of glyphs in the receiver. (read-only)","dec":"@property(readonly, nonatomic) NSUInteger numberOfGlyphs"},"showsControlCharacters":{"abs":"Specifies whether to substitute visible glyphs for control characters in layout.","dec":"@property(nonatomic) BOOL showsControlCharacters"},"showsInvisibleCharacters":{"abs":"Specifies whether to substitute visible glyphs for whitespace and other typically invisible characters in layout.","dec":"@property(nonatomic) BOOL showsInvisibleCharacters"},"textContainers":{"abs":"The receiver’s text containers. (read-only)","dec":"@property(readonly, nonatomic) NSArray *textContainers"},"textStorage":{"abs":"The receiver’s text storage object.","dec":"@property(assign, nonatomic) NSTextStorage *textStorage"},"usesFontLeading":{"abs":"Indicates whether the receiver uses the leading provided in the font.","dec":"@property(nonatomic) BOOL usesFontLeading"}},"[-]":{"addTextContainer:":{"abs":"Appends the given text container to the series of text containers where the receiver arranges text.","dec":"- (void)addTextContainer:(NSTextContainer *)container"},"attachmentSizeForGlyphAtIndex:":{"abs":"For a glyph corresponding to an attachment, returns the size for the attachment cell to occupy.","dec":"- (CGSize)attachmentSizeForGlyphAtIndex:(NSUInteger)glyphIndex"},"boundingRectForGlyphRange:inTextContainer:":{"abs":"Returns a single bounding rectangle (in container coordinates) enclosing all glyphs and other marks drawn in the given text container for the given glyph range, including glyphs that draw outside their line fragment rectangles and text attributes such as underlining.","dec":"- (CGRect)boundingRectForGlyphRange:(NSRange)glyphRange inTextContainer:(NSTextContainer *)container"},"characterIndexForGlyphAtIndex:":{"abs":"Returns the index in the text storage for the first character associated with the given glyph.","dec":"- (NSUInteger)characterIndexForGlyphAtIndex:(NSUInteger)glyphIndex"},"characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:":{"abs":"Returns the index of the character falling under the given point, expressed in the given container's coordinate system.","dec":"- (NSUInteger)characterIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer *)container fractionOfDistanceBetweenInsertionPoints:(CGFloat *)partialFraction"},"characterRangeForGlyphRange:actualGlyphRange:":{"abs":"Returns the range of characters that generated the glyphs in the given glyph range.","dec":"- (NSRange)characterRangeForGlyphRange:(NSRange)glyphRange actualGlyphRange:(NSRangePointer)actualGlyphRange"},"drawBackgroundForGlyphRange:atPoint:":{"abs":"Draws background marks for the given glyph range, which must lie completely within a single text container.","dec":"- (void)drawBackgroundForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin"},"drawGlyphsForGlyphRange:atPoint:":{"abs":"Draws the glyphs in the given glyph range, which must lie completely within a single text container.","dec":"- (void)drawGlyphsForGlyphRange:(NSRange)glyphsToShow atPoint:(CGPoint)origin"},"drawsOutsideLineFragmentForGlyphAtIndex:":{"abs":"Indicates whether the glyph draws outside of its line fragment rectangle.","dec":"- (BOOL)drawsOutsideLineFragmentForGlyphAtIndex:(NSUInteger)glyphIndex"},"drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:":{"abs":"Draws a strikethrough for the glyphs in a given range.","dec":"- (void)drawStrikethroughForGlyphRange:(NSRange)glyphRange strikethroughType:(NSUnderlineStyle)strikethroughVal baselineOffset:(CGFloat)baselineOffset lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin"},"drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:":{"abs":"Draws underlining for the glyphs in a given range.","dec":"- (void)drawUnderlineForGlyphRange:(NSRange)glyphRange underlineType:(NSUnderlineStyle)underlineVal baselineOffset:(CGFloat)baselineOffset lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin"},"ensureGlyphsForCharacterRange:":{"abs":"Forces the receiver to generate glyphs for the specified character range, if it has not already done so.","dec":"- (void)ensureGlyphsForCharacterRange:(NSRange)charRange"},"ensureGlyphsForGlyphRange:":{"abs":"Forces the receiver to generate glyphs for the specified glyph range, if it has not already done so.","dec":"- (void)ensureGlyphsForGlyphRange:(NSRange)glyphRange"},"ensureLayoutForBoundingRect:inTextContainer:":{"abs":"Forces the receiver to perform layout for the specified area in the specified text container, if it has not already done so.","dec":"- (void)ensureLayoutForBoundingRect:(CGRect)bounds inTextContainer:(NSTextContainer *)container"},"ensureLayoutForCharacterRange:":{"abs":"Forces the receiver to perform layout for the specified character range, if it has not already done so.","dec":"- (void)ensureLayoutForCharacterRange:(NSRange)charRange"},"ensureLayoutForGlyphRange:":{"abs":"Forces the receiver to perform layout for the specified glyph range, if it has not already done so.","dec":"- (void)ensureLayoutForGlyphRange:(NSRange)glyphRange"},"ensureLayoutForTextContainer:":{"abs":"Forces the receiver to perform layout for the specified text container, if it has not already done so.","dec":"- (void)ensureLayoutForTextContainer:(NSTextContainer *)container"},"enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:":{"abs":"Enumerates enclosing rectangles for the given glyph range in the given text container.","dec":"- (void)enumerateEnclosingRectsForGlyphRange:(NSRange)glyphRange withinSelectedGlyphRange:(NSRange)selectedRange inTextContainer:(NSTextContainer *)textContainer usingBlock:(void (^)(CGRect rect, BOOL *stop))block"},"enumerateLineFragmentsForGlyphRange:usingBlock:":{"abs":"Enumerates line fragments intersecting with the given glyph range.","dec":"- (void)enumerateLineFragmentsForGlyphRange:(NSRange)glyphRange usingBlock:(void (^)(CGRect rect, CGRect usedRect, NSTextContainer *textContainer, NSRange glyphRange, BOOL *stop))block"},"fillBackgroundRectArray:count:forCharacterRange:color:":{"abs":"Fills background rectangles with a color.","dec":"- (void)fillBackgroundRectArray:(const CGRect *)rectArray count:(NSUInteger)rectCount forCharacterRange:(NSRange)charRange color:(UIColor *)color"},"firstUnlaidCharacterIndex":{"abs":"Returns the index for the first character in the layout manager that has not been laid out.","dec":"- (NSUInteger)firstUnlaidCharacterIndex"},"firstUnlaidGlyphIndex":{"abs":"Returns the index for the first glyph in the layout manager that has not been laid out.","dec":"- (NSUInteger)firstUnlaidGlyphIndex"},"fractionOfDistanceThroughGlyphForPoint:inTextContainer:":{"abs":"This method is a primitive for glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:. You should always call the main method, not the primitives.","dec":"- (CGFloat)fractionOfDistanceThroughGlyphForPoint:(CGPoint)point inTextContainer:(NSTextContainer *)container"},"getFirstUnlaidCharacterIndex:glyphIndex:":{"abs":"Returns the index for the first character or glyph, or both, having invalid layout information.","dec":"- (void)getFirstUnlaidCharacterIndex:(NSUInteger *)charIndex glyphIndex:(NSUInteger *)glyphIndex"},"getGlyphsInRange:glyphs:properties:characterIndexes:bidiLevels:":{"abs":"Fills a passed-in buffer with a sequence of glyphs.","dec":"- (NSUInteger)getGlyphsInRange:(NSRange)glyphRange glyphs:(CGGlyph *)glyphBuffer properties:(NSGlyphProperty *)props characterIndexes:(NSUInteger *)charIndexBuffer bidiLevels:(unsigned char *)bidiLevelBuffer"},"getLineFragmentInsertionPointsForCharacterAtIndex:alternatePositions:inDisplayOrder:positions:characterIndexes:":{"abs":"Returns insertion points in bulk for a given line fragment.","dec":"- (NSUInteger)getLineFragmentInsertionPointsForCharacterAtIndex:(NSUInteger)charIndex alternatePositions:(BOOL)aFlag inDisplayOrder:(BOOL)dFlag positions:(CGFloat *)positions characterIndexes:(NSUInteger *)charIndexes"},"glyphAtIndex:":{"abs":"Returns the glyph at the given glyph index.","dec":"- (CGGlyph)glyphAtIndex:(NSUInteger)glyphIndex"},"glyphAtIndex:isValidIndex:":{"abs":"If the given index is valid, returns the glyph at that location and optionally returns a flag indicating whether the requested index is in range.","dec":"- (CGGlyph)glyphAtIndex:(NSUInteger)glyphIndex isValidIndex:(BOOL *)isValidIndex"},"glyphIndexForCharacterAtIndex:":{"abs":"Returns the index of the first glyph associated with the character at the specified index.","dec":"- (NSUInteger)glyphIndexForCharacterAtIndex:(NSUInteger)charIndex"},"glyphIndexForPoint:inTextContainer:":{"abs":"This method is a primitive for glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:. You should always call the main method, not the primitives.","dec":"- (NSUInteger)glyphIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer *)container"},"glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:":{"abs":"Returns the index of the glyph falling under the given point, expressed in the given container's coordinate system.","dec":"- (NSUInteger)glyphIndexForPoint:(CGPoint)point inTextContainer:(NSTextContainer *)container fractionOfDistanceThroughGlyph:(CGFloat *)partialFraction"},"glyphRangeForBoundingRect:inTextContainer:":{"abs":"Returns the smallest contiguous range for glyphs that are laid out wholly or partially within the given rectangle in the given text container.","dec":"- (NSRange)glyphRangeForBoundingRect:(CGRect)bounds inTextContainer:(NSTextContainer *)container"},"glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:":{"abs":"Returns the smallest contiguous range for glyphs that are laid out wholly or partially within the given rectangle in the given text container.","dec":"- (NSRange)glyphRangeForBoundingRectWithoutAdditionalLayout:(CGRect)bounds inTextContainer:(NSTextContainer *)container"},"glyphRangeForCharacterRange:actualCharacterRange:":{"abs":"Returns the range of glyphs that are generated from the characters in the given character range.","dec":"- (NSRange)glyphRangeForCharacterRange:(NSRange)charRange actualCharacterRange:(NSRangePointer)actualCharRange"},"glyphRangeForTextContainer:":{"abs":"Returns the range of glyphs laid out in the given text container.","dec":"- (NSRange)glyphRangeForTextContainer:(NSTextContainer *)container"},"insertTextContainer:atIndex:":{"abs":"Inserts the given text container into the series of text containers at the given index.","dec":"- (void)insertTextContainer:(NSTextContainer *)container atIndex:(NSUInteger)index"},"invalidateDisplayForCharacterRange:":{"abs":"Invalidates display for the given character range.","dec":"- (void)invalidateDisplayForCharacterRange:(NSRange)charRange"},"invalidateDisplayForGlyphRange:":{"abs":"Marks the glyphs in the given glyph range as needing display, as well as the appropriate regions of the NSTextView objects that display those glyphs (using the NSView method setNeedsDisplayInRect:).","dec":"- (void)invalidateDisplayForGlyphRange:(NSRange)glyphRange"},"invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:":{"abs":"Invalidates the cached glyphs for the characters in the given character range, adjusts the character indices of all the subsequent glyphs by the change in length, and invalidates the new character range.","dec":"- (void)invalidateGlyphsForCharacterRange:(NSRange)charRange changeInLength:(NSInteger)delta actualCharacterRange:(NSRangePointer)actualCharRange"},"invalidateLayoutForCharacterRange:actualCharacterRange:":{"abs":"Invalidates the layout information for the glyphs mapped to the given range of characters.","dec":"- (void)invalidateLayoutForCharacterRange:(NSRange)charRange actualCharacterRange:(NSRangePointer)actualCharRange"},"isValidGlyphIndex:":{"abs":"Indicates whether the specified index refers to a valid glyph.","dec":"- (BOOL)isValidGlyphIndex:(NSUInteger)glyphIndex"},"lineFragmentRectForGlyphAtIndex:effectiveRange:":{"abs":"Returns the rectangle for the line fragment in which the given glyph is laid out and (optionally), by reference, the whole range of glyphs that are in that fragment.","dec":"- (CGRect)lineFragmentRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer)effectiveGlyphRange"},"lineFragmentUsedRectForGlyphAtIndex:effectiveRange:":{"abs":"Returns the usage rectangle for the line fragment in which the given glyph is laid and (optionally) by reference the whole range of glyphs that are in that fragment.","dec":"- (CGRect)lineFragmentUsedRectForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer)effectiveGlyphRange"},"locationForGlyphAtIndex:":{"abs":"Returns the location for the given glyph within its line fragment.","dec":"- (CGPoint)locationForGlyphAtIndex:(NSUInteger)glyphIndex"},"notShownAttributeForGlyphAtIndex:":{"abs":"Indicates whether the glyph at the given index is one that isn’t shown.","dec":"- (BOOL)notShownAttributeForGlyphAtIndex:(NSUInteger)glyphIndex"},"processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:":{"abs":"Sent from the NSTextStorage method processEditing to notify the layout manager of an edit action.","dec":"- (void)processEditingForTextStorage:(NSTextStorage *)textStorage edited:(NSTextStorageEditActions)editMask range:(NSRange)newCharRange changeInLength:(NSInteger)delta invalidatedRange:(NSRange)invalidatedCharRange"},"propertyForGlyphAtIndex:":{"abs":"Returns the glyph property associated with the glyph at the specified index.","dec":"- (NSGlyphProperty)propertyForGlyphAtIndex:(NSUInteger)glyphIndex"},"rangeOfNominallySpacedGlyphsContainingIndex:":{"abs":"Returns the range for the glyphs around the given glyph that can be displayed using only their advancements from the font, without pairwise kerning or other adjustments to spacing.","dec":"- (NSRange)rangeOfNominallySpacedGlyphsContainingIndex:(NSUInteger)glyphIndex"},"removeTextContainerAtIndex:":{"abs":"Removes the text container at the given index and invalidates the layout as needed.","dec":"- (void)removeTextContainerAtIndex:(NSUInteger)index"},"setAttachmentSize:forGlyphRange:":{"abs":"Sets the size at which the given glyph (assumed to be an attachment) is asked to draw in the given glyph range.","dec":"- (void)setAttachmentSize:(CGSize)attachmentSize forGlyphRange:(NSRange)glyphRange"},"setDrawsOutsideLineFragment:forGlyphAtIndex:":{"abs":"Specifies whether the given glyph exceeds the bounds of the line fragment where it’s laid out.","dec":"- (void)setDrawsOutsideLineFragment:(BOOL)flag forGlyphAtIndex:(NSUInteger)glyphIndex"},"setExtraLineFragmentRect:usedRect:textContainer:":{"abs":"Sets the bounds and container for the extra line fragment.","dec":"- (void)setExtraLineFragmentRect:(CGRect)fragmentRect usedRect:(CGRect)usedRect textContainer:(NSTextContainer *)container"},"setGlyphs:properties:characterIndexes:font:forGlyphRange:":{"abs":"Stores the initial glyphs and glyph properties for a character range.","dec":"- (void)setGlyphs:(const CGGlyph *)glyphs properties:(const NSGlyphProperty *)props characterIndexes:(const NSUInteger *)charIndexes font:(UIFont *)aFont forGlyphRange:(NSRange)glyphRange"},"setLineFragmentRect:forGlyphRange:usedRect:":{"abs":"Associates the given line fragment bounds with the given range of glyphs.","dec":"- (void)setLineFragmentRect:(CGRect)fragmentRect forGlyphRange:(NSRange)glyphRange usedRect:(CGRect)usedRect"},"setLocation:forStartOfGlyphRange:":{"abs":"Sets the location for the first glyph of the given range.","dec":"- (void)setLocation:(CGPoint)location forStartOfGlyphRange:(NSRange)glyphRange"},"setNotShownAttribute:forGlyphAtIndex:":{"abs":"Sets the glyph at the given index to be one that isn’t shown.","dec":"- (void)setNotShownAttribute:(BOOL)flag forGlyphAtIndex:(NSUInteger)glyphIndex"},"setTextContainer:forGlyphRange:":{"abs":"Sets text container where the glyphs in the given range are laid out.","dec":"- (void)setTextContainer:(NSTextContainer *)container forGlyphRange:(NSRange)glyphRange"},"showCGGlyphs:positions:count:font:matrix:attributes:inContext:":{"abs":"Renders the glyphs at the specified positions and attributes into the given graphics context.","dec":"- (void)showCGGlyphs:(const CGGlyph *)glyphs positions:(const CGPoint *)positions count:(NSUInteger)glyphCount font:(UIFont *)font matrix:(CGAffineTransform)textMatrix attributes:(NSDictionary *)attributes inContext:(CGContextRef)graphicsContext"},"strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:":{"abs":"Calculates and draws strikethrough for the glyphs in the given range.","dec":"- (void)strikethroughGlyphRange:(NSRange)glyphRange strikethroughType:(NSUnderlineStyle)strikethroughVal lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin"},"textContainerChangedGeometry:":{"abs":"Invalidates the layout information, and possibly glyphs, for the given text container and all subsequent NSTextContainer objects.","dec":"- (void)textContainerChangedGeometry:(NSTextContainer *)container"},"textContainerForGlyphAtIndex:effectiveRange:":{"abs":"Returns the container in which the given glyph is laid out and (optionally) by reference the whole range of glyphs that are in that container.","dec":"- (NSTextContainer *)textContainerForGlyphAtIndex:(NSUInteger)glyphIndex effectiveRange:(NSRangePointer)effectiveGlyphRange"},"truncatedGlyphRangeInLineFragmentForGlyphAtIndex:":{"abs":"Returns the range of truncated glyphs for a line fragment containing the specified index.","dec":"- (NSRange)truncatedGlyphRangeInLineFragmentForGlyphAtIndex:(NSUInteger)glyphIndex"},"underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:":{"abs":"Calculates subranges to be underlined for the glyphs in a given range and draws the underlining as appropriate.","dec":"- (void)underlineGlyphRange:(NSRange)glyphRange underlineType:(NSUnderlineStyle)underlineVal lineFragmentRect:(CGRect)lineRect lineFragmentGlyphRange:(NSRange)lineGlyphRange containerOrigin:(CGPoint)containerOrigin"},"usedRectForTextContainer:":{"abs":"Returns the bounding rectangle for the glyphs laid out in the given text container.","dec":"- (CGRect)usedRectForTextContainer:(NSTextContainer *)container"}},"[=]":{"NSTextLayoutOrientationHorizontal":"","NSTextLayoutOrientationVertical":"","NSGlyphPropertyNull":"","NSGlyphPropertyControlCharacter":"","NSGlyphPropertyElastic":"","NSGlyphPropertyNonBaseCharacter":"","NSControlCharacterZeroAdvancementAction":"","NSControlCharacterWhitespaceAction":"","NSControlCharacterHorizontalTabAction":"","NSControlCharacterLineBreakAction":"","NSControlCharacterParagraphBreakAction":"","NSControlCharacterContainerBreakAction":""}};