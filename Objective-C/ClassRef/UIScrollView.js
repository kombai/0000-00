ClassRef.UIScrollView = {"[:]":"UIView : UIResponder : NSObject","[.]":{"alwaysBounceHorizontal":{"abs":"A Boolean value that determines whether bouncing always occurs when horizontal scrolling reaches the end of the content view.","dec":"@property(nonatomic) BOOL alwaysBounceHorizontal"},"alwaysBounceVertical":{"abs":"A Boolean value that determines whether bouncing always occurs when vertical scrolling reaches the end of the content.","dec":"@property(nonatomic) BOOL alwaysBounceVertical"},"bounces":{"abs":"A Boolean value that controls whether the scroll view bounces past the edge of content and back again.","dec":"@property(nonatomic) BOOL bounces"},"bouncesZoom":{"abs":"A Boolean value that determines whether the scroll view animates the content scaling when the scaling exceeds the maximum or minimum limits.","dec":"@property(nonatomic) BOOL bouncesZoom"},"canCancelContentTouches":{"abs":"A Boolean value that controls whether touches in the content view always lead to tracking.","dec":"@property(nonatomic) BOOL canCancelContentTouches"},"contentInset":{"abs":"The distance that the content view is inset from the enclosing scroll view.","dec":"@property(nonatomic) UIEdgeInsets contentInset"},"contentOffset":{"abs":"The point at which the origin of the content view is offset from the origin of the scroll view.","dec":"@property(nonatomic) CGPoint contentOffset"},"contentSize":{"abs":"The size of the content view.","dec":"@property(nonatomic) CGSize contentSize"},"decelerating":{"abs":"Returns whether the content is moving in the scroll view after the user lifted their finger. (read-only)","dec":"@property(nonatomic, readonly, getter=isDecelerating) BOOL decelerating"},"decelerationRate":{"abs":"A floating-point value that determines the rate of deceleration after the user lifts their finger.","dec":"@property(nonatomic) CGFloat decelerationRate"},"delaysContentTouches":{"abs":"A Boolean value that determines whether the scroll view delays the handling of touch-down gestures.","dec":"@property(nonatomic) BOOL delaysContentTouches"},"delegate":{"abs":"The delegate of the scroll-view object.","dec":"@property(nonatomic, assign) id<UIScrollViewDelegate> delegate"},"directionalLockEnabled":{"abs":"A Boolean value that determines whether scrolling is disabled in a particular direction.","dec":"@property(nonatomic, getter=isDirectionalLockEnabled) BOOL directionalLockEnabled"},"dragging":{"abs":"A Boolean value that indicates whether the user has begun scrolling the content. (read-only)","dec":"@property(nonatomic, readonly, getter=isDragging) BOOL dragging"},"indicatorStyle":{"abs":"The style of the scroll indicators.","dec":"@property(nonatomic) UIScrollViewIndicatorStyle indicatorStyle"},"keyboardDismissMode":{"abs":"The manner in which the keyboard is dismissed when a drag begins in the scroll view.","dec":"@property(nonatomic) UIScrollViewKeyboardDismissMode keyboardDismissMode"},"maximumZoomScale":{"abs":"A floating-point value that specifies the maximum scale factor that can be applied to the scroll view's content.","dec":"@property(nonatomic) CGFloat maximumZoomScale"},"minimumZoomScale":{"abs":"A floating-point value that specifies the minimum scale factor that can be applied to the scroll view's content.","dec":"@property(nonatomic) CGFloat minimumZoomScale"},"pagingEnabled":{"abs":"A Boolean value that determines whether paging is enabled for the scroll view.","dec":"@property(nonatomic, getter=isPagingEnabled) BOOL pagingEnabled"},"panGestureRecognizer":{"abs":"The underlying gesture recognizer for pan gestures. (read-only)","dec":"@property(nonatomic, readonly) UIPanGestureRecognizer *panGestureRecognizer"},"pinchGestureRecognizer":{"abs":"The underlying gesture recognizer for pinch gestures. (read-only)","dec":"@property(nonatomic, readonly) UIPinchGestureRecognizer *pinchGestureRecognizer"},"scrollEnabled":{"abs":"A Boolean value that determines whether scrolling is enabled.","dec":"@property(nonatomic, getter=isScrollEnabled) BOOL scrollEnabled"},"scrollIndicatorInsets":{"abs":"The distance the scroll indicators are inset from the edge of the scroll view.","dec":"@property(nonatomic) UIEdgeInsets scrollIndicatorInsets"},"scrollsToTop":{"abs":"A Boolean value that controls whether the scroll-to-top gesture is enabled.","dec":"@property(nonatomic) BOOL scrollsToTop"},"showsHorizontalScrollIndicator":{"abs":"A Boolean value that controls whether the horizontal scroll indicator is visible.","dec":"@property(nonatomic) BOOL showsHorizontalScrollIndicator"},"showsVerticalScrollIndicator":{"abs":"A Boolean value that controls whether the vertical scroll indicator is visible.","dec":"@property(nonatomic) BOOL showsVerticalScrollIndicator"},"tracking":{"abs":"Returns whether the user has touched the content to initiate scrolling. (read-only)","dec":"@property(nonatomic, readonly, getter=isTracking) BOOL tracking"},"zoomBouncing":{"abs":"A Boolean value that indicates that zooming has exceeded the scaling limits specified for the receiver. (read-only)","dec":"@property(nonatomic, readonly, getter=isZoomBouncing) BOOL zoomBouncing"},"zooming":{"abs":"A Boolean value that indicates whether the content view is currently zooming in or out. (read-only)","dec":"@property(nonatomic, readonly, getter=isZooming) BOOL zooming"},"zoomScale":{"abs":"A floating-point value that specifies the current scale factor applied to the scroll view's content.","dec":"@property(nonatomic) CGFloat zoomScale"}},"[-]":{"flashScrollIndicators":{"abs":"Displays the scroll indicators momentarily.","dec":"- (void)flashScrollIndicators"},"scrollRectToVisible:animated:":{"abs":"Scrolls a specific area of the content so that it is visible in the receiver.","dec":"- (void)scrollRectToVisible:(CGRect)rect animated:(BOOL)animated"},"setContentOffset:animated:":{"abs":"Sets the offset from the content view’s origin that corresponds to the receiver’s origin.","dec":"- (void)setContentOffset:(CGPoint)contentOffset animated:(BOOL)animated"},"setZoomScale:animated:":{"abs":"A floating-point value that specifies the current zoom scale.","dec":"- (void)setZoomScale:(CGFloat)scale animated:(BOOL)animated"},"touchesShouldBegin:withEvent:inContentView:":{"abs":"Overridden by subclasses to customize the default behavior when a finger touches down in displayed content.","dec":"- (BOOL)touchesShouldBegin:(NSSet *)touches withEvent:(UIEvent *)event inContentView:(UIView *)view"},"touchesShouldCancelInContentView:":{"abs":"Returns whether to cancel touches related to the content subview and start dragging.","dec":"- (BOOL)touchesShouldCancelInContentView:(UIView *)view"},"zoomToRect:animated:":{"abs":"Zooms to a specific area of the content so that it is visible in the receiver.","dec":"- (void)zoomToRect:(CGRect)rect animated:(BOOL)animated"}},"[=]":{"UIScrollViewIndicatorStyleDefault":"","UIScrollViewIndicatorStyleBlack":"","UIScrollViewIndicatorStyleWhite":"","UIScrollViewDecelerationRateNormal":"","UIScrollViewDecelerationRateFast":"","UIScrollViewKeyboardDismissModeNone":"","UIScrollViewKeyboardDismissModeOnDrag":"","UIScrollViewKeyboardDismissModeInteractive":""}};