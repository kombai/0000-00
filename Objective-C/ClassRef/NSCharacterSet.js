ClassRef["NSCharacterSet"] = {"[:]":"NSObject","[+]":{"alphanumericCharacterSet":{"abs":"Returns a character set containing the characters in the categories Letters, Marks, and Numbers.","dec":"+ (id)alphanumericCharacterSet"},"capitalizedLetterCharacterSet":{"abs":"Returns a character set containing the characters in the category of Titlecase Letters.","dec":"+ (id)capitalizedLetterCharacterSet"},"characterSetWithBitmapRepresentation:":{"abs":"Returns a character set containing characters determined by a given bitmap representation.","dec":"+ (id)characterSetWithBitmapRepresentation:(NSData *)data"},"characterSetWithCharactersInString:":{"abs":"Returns a character set containing the characters in a given string.","dec":"+ (id)characterSetWithCharactersInString:(NSString *)aString"},"characterSetWithContentsOfFile:":{"abs":"Returns a character set read from the bitmap representation stored in the file a given path.","dec":"+ (id)characterSetWithContentsOfFile:(NSString *)path"},"characterSetWithRange:":{"abs":"Returns a character set containing characters with Unicode values in a given range.","dec":"+ (id)characterSetWithRange:(NSRange)aRange"},"controlCharacterSet":{"abs":"Returns a character set containing the characters in the categories of Control or Format Characters.","dec":"+ (id)controlCharacterSet"},"decimalDigitCharacterSet":{"abs":"Returns a character set containing the characters in the category of Decimal Numbers.","dec":"+ (id)decimalDigitCharacterSet"},"decomposableCharacterSet":{"abs":"Returns a character set containing all individual Unicode characters that can also be represented as composed character sequences.","dec":"+ (id)decomposableCharacterSet"},"illegalCharacterSet":{"abs":"Returns a character set containing values in the category of Non-Characters or that have not yet been defined in version 3.2 of the Unicode standard.","dec":"+ (id)illegalCharacterSet"},"letterCharacterSet":{"abs":"Returns a character set containing the characters in the categories Letters and Marks.","dec":"+ (id)letterCharacterSet"},"lowercaseLetterCharacterSet":{"abs":"Returns a character set containing the characters in the category of Lowercase Letters.","dec":"+ (id)lowercaseLetterCharacterSet"},"newlineCharacterSet":{"abs":"Returns a character set containing the newline characters.","dec":"+ (id)newlineCharacterSet"},"nonBaseCharacterSet":{"abs":"Returns a character set containing the characters in the category of Marks.","dec":"+ (id)nonBaseCharacterSet"},"punctuationCharacterSet":{"abs":"Returns a character set containing the characters in the category of Punctuation.","dec":"+ (id)punctuationCharacterSet"},"symbolCharacterSet":{"abs":"Returns a character set containing the characters in the category of Symbols.","dec":"+ (id)symbolCharacterSet"},"uppercaseLetterCharacterSet":{"abs":"Returns a character set containing the characters in the categories of Uppercase Letters and Titlecase Letters.","dec":"+ (id)uppercaseLetterCharacterSet"},"URLFragmentAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a fragment URL component.","dec":"+ (id)URLFragmentAllowedCharacterSet"},"URLHostAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a host URL subcomponent.","dec":"+ (id)URLHostAllowedCharacterSet"},"URLPasswordAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a password URL subcomponent.","dec":"+ (id)URLPasswordAllowedCharacterSet"},"URLPathAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a path URL component.","dec":"+ (id)URLPathAllowedCharacterSet"},"URLQueryAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a query URL component.","dec":"+ (id)URLQueryAllowedCharacterSet"},"URLUserAllowedCharacterSet":{"abs":"Returns the character set for characters allowed in a user URL subcomponent.","dec":"+ (id)URLUserAllowedCharacterSet"},"whitespaceAndNewlineCharacterSet":{"abs":"Returns a character set containing Unicode General Category Z*, U000A ~ U000D, and U0085.","dec":"+ (id)whitespaceAndNewlineCharacterSet"},"whitespaceCharacterSet":{"abs":"Returns a character set containing only the in-line whitespace characters space (U+0020) and tab (U+0009).","dec":"+ (id)whitespaceCharacterSet"}},"[-]":{"bitmapRepresentation":{"abs":"Returns an NSData object encoding the receiver in binary format.","dec":"- (NSData *)bitmapRepresentation"},"characterIsMember:":{"abs":"Returns a Boolean value that indicates whether a given character is in the receiver.","dec":"- (BOOL)characterIsMember:(unichar)aCharacter"},"hasMemberInPlane:":{"abs":"Returns a Boolean value that indicates whether the receiver has at least one member in a given character plane.","dec":"- (BOOL)hasMemberInPlane:(uint8_t)thePlane"},"invertedSet":{"abs":"Returns a character set containing only characters that donâ€™t exist in the receiver.","dec":"- (NSCharacterSet *)invertedSet"},"isSupersetOfSet:":{"abs":"Returns a Boolean value that indicates whether the receiver is a superset of another given character set.","dec":"- (BOOL)isSupersetOfSet:(NSCharacterSet *)theOtherSet"},"longCharacterIsMember:":{"abs":"Returns a Boolean value that indicates whether a given long character is a member of the receiver.","dec":"- (BOOL)longCharacterIsMember:(UTF32Char)theLongChar"}},"[=]":{"NSOpenStepUnicodeReservedBase":""}};