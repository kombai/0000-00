ClassRef.UIResponder = {"[:]":"NSObject","[.]":{"inputAccessoryView":{"abs":"The custom accessory view to display when the object becomes the first responder. (read-only)","dec":"@property(readonly, retain) UIView *inputAccessoryView"},"inputView":{"abs":"The custom input view to display when the object becomes the first responder. (read-only)","dec":"@property(readonly, retain) UIView *inputView"},"keyCommands":{"abs":"The key commands that trigger actions on this responder. (read-only)","dec":"@property(nonatomic, readonly) NSArray *keyCommands"},"textInputContextIdentifier":{"abs":"An identifier signifying that the responder should preserve its text input mode information. (read-only)","dec":"@property(readonly, retain) NSString *textInputContextIdentifier"},"textInputMode":{"abs":"The text input mode for this responder object. (read-only)","dec":"@property(readonly, retain) UITextInputMode *textInputMode"},"undoManager":{"abs":"Returns the nearest shared undo manager in the responder chain. (read-only)","dec":"@property(nonatomic, readonly) NSUndoManager *undoManager"}},"[+]":{"clearTextInputContextIdentifier:":{"abs":"Clears text input mode information from the app’s user defaults.","dec":"+ (void)clearTextInputContextIdentifier:(NSString *)identifier"}},"[-]":{"becomeFirstResponder":{"abs":"Notifies the receiver that it is about to become first responder in its window.","dec":"- (BOOL)becomeFirstResponder"},"canBecomeFirstResponder":{"abs":"Returns a Boolean value indicating whether the receiver can become first responder.","dec":"- (BOOL)canBecomeFirstResponder"},"canPerformAction:withSender:":{"abs":"Requests the receiving responder to enable or disable the specified command in the user interface.","dec":"- (BOOL)canPerformAction:(SEL)action withSender:(id)sender"},"canResignFirstResponder":{"abs":"Returns a Boolean value indicating whether the receiver is willing to relinquish first-responder status.","dec":"- (BOOL)canResignFirstResponder"},"isFirstResponder":{"abs":"Returns a Boolean value indicating whether the receiver is the first responder.","dec":"- (BOOL)isFirstResponder"},"motionBegan:withEvent:":{"abs":"Tells the receiver that a motion event has begun.","dec":"- (void)motionBegan:(UIEventSubtype)motion withEvent:(UIEvent *)event"},"motionCancelled:withEvent:":{"abs":"Tells the receiver that a motion event has been cancelled.","dec":"- (void)motionCancelled:(UIEventSubtype)motion withEvent:(UIEvent *)event"},"motionEnded:withEvent:":{"abs":"Tells the receiver that a motion event has ended.","dec":"- (void)motionEnded:(UIEventSubtype)motion withEvent:(UIEvent *)event"},"nextResponder":{"abs":"Returns the receiver's next responder, or nil if it has none.","dec":"- (UIResponder *)nextResponder"},"reloadInputViews":{"abs":"Updates the custom input and accessory views when the object is the first responder.","dec":"- (void)reloadInputViews"},"remoteControlReceivedWithEvent:":{"abs":"Sent to the receiver when a remote-control event is received.","dec":"- (void)remoteControlReceivedWithEvent:(UIEvent *)event"},"resignFirstResponder":{"abs":"Notifies the receiver that it has been asked to relinquish its status as first responder in its window.","dec":"- (BOOL)resignFirstResponder"},"targetForAction:withSender:":{"abs":"Returns the target object that responds to an action.","dec":"- (id)targetForAction:(SEL)action withSender:(id)sender"},"touchesBegan:withEvent:":{"abs":"Tells the receiver when one or more fingers touch down in a view or window.","dec":"- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event"},"touchesCancelled:withEvent:":{"abs":"Sent to the receiver when a system event (such as a low-memory warning) cancels a touch event.","dec":"- (void)touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event"},"touchesEnded:withEvent:":{"abs":"Tells the receiver when one or more fingers are raised from a view or window.","dec":"- (void)touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event"},"touchesMoved:withEvent:":{"abs":"Tells the receiver when one or more fingers associated with an event move within a view or window.","dec":"- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event"}}};