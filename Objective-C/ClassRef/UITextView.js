ClassRef.UITextView = {"[:]":"UIScrollView : UIView : UIResponder : NSObject","[.]":{"allowsEditingTextAttributes":{"abs":"A Boolean value indicating whether the text view allows the user to edit style information.","dec":"@property(nonatomic) BOOL allowsEditingTextAttributes"},"attributedText":{"abs":"The styled text displayed by the text view.","dec":"@property(nonatomic, copy) NSAttributedString *attributedText"},"clearsOnInsertion":{"abs":"A Boolean value indicating whether inserting text replaces the previous contents.","dec":"@property(nonatomic) BOOL clearsOnInsertion"},"dataDetectorTypes":{"abs":"The types of data converted to clickable URLs in the text view.","dec":"@property(nonatomic) UIDataDetectorTypes dataDetectorTypes"},"delegate":{"abs":"The receiver’s delegate.","dec":"@property(nonatomic, assign) id<UITextViewDelegate> delegate"},"editable":{"abs":"A Boolean value indicating whether the receiver is editable.","dec":"@property(nonatomic, getter=isEditable) BOOL editable"},"font":{"abs":"The font of the text.","dec":"@property(nonatomic, retain) UIFont *font"},"inputAccessoryView":{"abs":"The custom accessory view to display when the text view becomes the first responder","dec":"@property(readwrite, retain) UIView *inputAccessoryView"},"inputView":{"abs":"The custom input view to display when the text view becomes the first responder.","dec":"@property(readwrite, retain) UIView *inputView"},"layoutManager":{"abs":"The layout manager that lays out text for the receiver’s text container. (read-only)","dec":"@property(nonatomic, readonly) NSLayoutManager *layoutManager"},"linkTextAttributes":{"abs":"The attributes to apply to links.","dec":"@property(nonatomic, copy) NSDictionary *linkTextAttributes"},"selectable":{"abs":"A Boolean value indicating whether the receiver is selectable.","dec":"@property(nonatomic, getter=isSelectable) BOOL selectable"},"selectedRange":{"abs":"The current selection range of the receiver.","dec":"@property(nonatomic) NSRange selectedRange"},"text":{"abs":"The text displayed by the text view.","dec":"@property(nonatomic, copy) NSString *text"},"textAlignment":{"abs":"The technique to use for aligning the text.","dec":"@property(nonatomic) NSTextAlignment textAlignment"},"textColor":{"abs":"The color of the text.","dec":"@property(nonatomic, retain) UIColor *textColor"},"textContainer":{"abs":"The text container object defining the area in which text is displayed in this text view. (read-only)","dec":"@property(nonatomic, readonly) NSTextContainer *textContainer"},"textContainerInset":{"abs":"The inset of the text container's layout area within the text view's content area.","dec":"@property(nonatomic, assign) UIEdgeInsets textContainerInset"},"textStorage":{"abs":"The text storage object holding the text displayed in this text view. (read-only)","dec":"@property(nonatomic, readonly, retain) NSTextStorage *textStorage"},"typingAttributes":{"abs":"The attributes to apply to new text being entered by the user.","dec":"@property(nonatomic, copy) NSDictionary *typingAttributes"}},"[-]":{"initWithFrame:textContainer:":{"abs":"Creates a new text view with the specified text container.","dec":"- (instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer *)textContainer"},"scrollRangeToVisible:":{"abs":"Scrolls the receiver until the text in the specified range is visible.","dec":"- (void)scrollRangeToVisible:(NSRange)range"}}};