ClassRef["NSString"] = {"[:]":"NSObject","[+]":{"availableStringEncodings":{"abs":"Returns a zero-terminated list of the encodings string objects support in the application’s environment.","dec":"+ (const NSStringEncoding *)availableStringEncodings"},"defaultCStringEncoding":{"abs":"Returns the C-string encoding assumed for any method accepting a C string as an argument.","dec":"+ (NSStringEncoding)defaultCStringEncoding"},"localizedNameOfStringEncoding:":{"abs":"Returns a human-readable string giving the name of a given encoding.","dec":"+ (NSString *)localizedNameOfStringEncoding:(NSStringEncoding)encoding"},"localizedStringWithFormat:":{"abs":"Returns a string created by using a given format string as a template into which the remaining argument values are substituted according to the user's default locale.","dec":"+ (instancetype)localizedStringWithFormat:(NSString *)format, ..."},"pathWithComponents:":{"abs":"Returns a string built from the strings in a given array by concatenating them with a path separator between each pair.","dec":"+ (NSString *)pathWithComponents:(NSArray *)components"},"string":{"abs":"Returns an empty string.","dec":"+ (instancetype)string"},"stringWithCharacters:length:":{"abs":"Returns a string containing a given number of characters taken from a given C array of Unicode characters.","dec":"+ (instancetype)stringWithCharacters:(const unichar *)chars length:(NSUInteger)length"},"stringWithContentsOfFile:encoding:error:":{"abs":"Returns a string created by reading data from the file at a given path interpreted using a given encoding.","dec":"+ (instancetype)stringWithContentsOfFile:(NSString *)path encoding:(NSStringEncoding)enc error:(NSError **)error"},"stringWithContentsOfFile:usedEncoding:error:":{"abs":"Returns a string created by reading data from the file at a given path and returns by reference the encoding used to interpret the file.","dec":"+ (instancetype)stringWithContentsOfFile:(NSString *)path usedEncoding:(NSStringEncoding *)enc error:(NSError **)error"},"stringWithContentsOfURL:encoding:error:":{"abs":"Returns a string created by reading data from a given URL interpreted using a given encoding.","dec":"+ (instancetype)stringWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error"},"stringWithContentsOfURL:usedEncoding:error:":{"abs":"Returns a string created by reading data from a given URL and returns by reference the encoding used to interpret the data.","dec":"+ (instancetype)stringWithContentsOfURL:(NSURL *)url usedEncoding:(NSStringEncoding *)enc error:(NSError **)error"},"stringWithCString:encoding:":{"abs":"Returns a string containing the bytes in a given C array, interpreted according to a given encoding.","dec":"+ (instancetype)stringWithCString:(const char *)cString encoding:(NSStringEncoding)enc"},"stringWithFormat:":{"abs":"Returns a string created by using a given format string as a template into which the remaining argument values are substituted.","dec":"+ (instancetype)stringWithFormat:(NSString *)format,, ..."},"stringWithString:":{"abs":"Returns a string created by copying the characters from another given string.","dec":"+ (instancetype)stringWithString:(NSString *)aString"},"stringWithUTF8String:":{"abs":"Returns a string created by copying the data from a given C array of UTF8-encoded bytes.","dec":"+ (instancetype)stringWithUTF8String:(const char *)bytes"}},"[-]":{"boolValue":{"abs":"Returns the Boolean value of the receiver’s text.","dec":"- (BOOL)boolValue"},"canBeConvertedToEncoding:":{"abs":"Returns a Boolean value that indicates whether the receiver can be converted to a given encoding without loss of information.","dec":"- (BOOL)canBeConvertedToEncoding:(NSStringEncoding)encoding"},"capitalizedString":{"abs":"Returns a capitalized representation of the receiver.","dec":"- (NSString *)capitalizedString"},"capitalizedStringWithLocale:":{"abs":"Returns a capitalized representation of the receiver using the specified locale.","dec":"- (NSString *)capitalizedStringWithLocale:(NSLocale *)locale"},"caseInsensitiveCompare:":{"abs":"Returns the result of invoking compare:options: with NSCaseInsensitiveSearch as the only option.","dec":"- (NSComparisonResult)caseInsensitiveCompare:(NSString *)aString"},"characterAtIndex:":{"abs":"Returns the character at a given array position.","dec":"- (unichar)characterAtIndex:(NSUInteger)index"},"commonPrefixWithString:options:":{"abs":"Returns a string containing characters the receiver and a given string have in common, starting from the beginning of each up to the first characters that aren’t equivalent.","dec":"- (NSString *)commonPrefixWithString:(NSString *)aString options:(NSStringCompareOptions)mask"},"compare:":{"abs":"Returns the result of invoking compare:options:range: with no options and the receiver’s full extent as the range.","dec":"- (NSComparisonResult)compare:(NSString *)aString"},"compare:options:":{"abs":"Compares the string with the specified string using the given options.","dec":"- (NSComparisonResult)compare:(NSString *)aString options:(NSStringCompareOptions)mask"},"compare:options:range:":{"abs":"Returns the result of invoking compare:options:range:locale: with a nil locale.","dec":"- (NSComparisonResult)compare:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)range"},"compare:options:range:locale:":{"abs":"Compares the string using the specified options and returns the lexical ordering for the range.","dec":"- (NSComparisonResult)compare:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)range locale:(id)locale"},"completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:":{"abs":"Interprets the receiver as a path in the file system and attempts to perform filename completion, returning a numeric value that indicates whether a match was possible, and by reference the longest path that matches the receiver.","dec":"- (NSUInteger)completePathIntoString:(NSString **)outputName caseSensitive:(BOOL)flag matchesIntoArray:(NSArray **)outputArray filterTypes:(NSArray *)filterTypes"},"componentsSeparatedByCharactersInSet:":{"abs":"Returns an array containing substrings from the receiver that have been divided by characters in a given set.","dec":"- (NSArray *)componentsSeparatedByCharactersInSet:(NSCharacterSet *)separator"},"componentsSeparatedByString:":{"abs":"Returns an array containing substrings from the receiver that have been divided by a given separator.","dec":"- (NSArray *)componentsSeparatedByString:(NSString *)separator"},"cStringUsingEncoding:":{"abs":"Returns a representation of the receiver as a C string using a given encoding.","dec":"- (const char *)cStringUsingEncoding:(NSStringEncoding)encoding"},"dataUsingEncoding:":{"abs":"Returns an NSData object containing a representation of the receiver encoded using a given encoding.","dec":"- (NSData *)dataUsingEncoding:(NSStringEncoding)encoding"},"dataUsingEncoding:allowLossyConversion:":{"abs":"Returns an NSData object containing a representation of the receiver encoded using a given encoding.","dec":"- (NSData *)dataUsingEncoding:(NSStringEncoding)encoding allowLossyConversion:(BOOL)flag"},"decomposedStringWithCanonicalMapping":{"abs":"Returns a string made by normalizing the receiver’s contents using Form D.","dec":"- (NSString *)decomposedStringWithCanonicalMapping"},"decomposedStringWithCompatibilityMapping":{"abs":"Returns a string made by normalizing the receiver’s contents using Form KD.","dec":"- (NSString *)decomposedStringWithCompatibilityMapping"},"description":{"abs":"Returns the receiver.","dec":"- (NSString *)description"},"doubleValue":{"abs":"Returns the floating-point value of the receiver’s text as a double.","dec":"- (double)doubleValue"},"enumerateLinesUsingBlock:":{"abs":"Enumerates all the lines in a string.","dec":"- (void)enumerateLinesUsingBlock:(void (^)(NSString *line, BOOL *stop))block"},"enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:":{"abs":"Performs linguistic analysis on the specified string by enumerating the specific range of the string, providing the Block with the located tags.","dec":"- (void)enumerateLinguisticTagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts orthography:(NSOrthography *)orthography usingBlock:(void (^)(NSString *tag, NSRange tokenRange, NSRange sentenceRange, BOOL *stop))block"},"enumerateSubstringsInRange:options:usingBlock:":{"abs":"Enumerates the substrings of the specified type in the specified range of the string.","dec":"- (void)enumerateSubstringsInRange:(NSRange)range options:(NSStringEnumerationOptions)opts usingBlock:(void (^)(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop))block"},"fastestEncoding":{"abs":"Returns the fastest encoding to which the receiver may be converted without loss of information.","dec":"- (NSStringEncoding)fastestEncoding"},"fileSystemRepresentation":{"abs":"Returns a file system-specific representation of the receiver.","dec":"- (const char *)fileSystemRepresentation"},"floatValue":{"abs":"Returns the floating-point value of the receiver’s text as a float.","dec":"- (float)floatValue"},"getBytes:maxLength:usedLength:encoding:options:range:remainingRange:":{"abs":"Gets a given range of characters as bytes in a specified encoding.","dec":"- (BOOL)getBytes:(void *)buffer maxLength:(NSUInteger)maxBufferCount usedLength:(NSUInteger *)usedBufferCount encoding:(NSStringEncoding)encoding options:(NSStringEncodingConversionOptions)options range:(NSRange)range remainingRange:(NSRangePointer)leftover"},"getCharacters:range:":{"abs":"Copies characters from a given range in the receiver into a given buffer.","dec":"- (void)getCharacters:(unichar *)buffer range:(NSRange)aRange"},"getCString:maxLength:encoding:":{"abs":"Converts the receiver’s content to a given encoding and stores them in a buffer.","dec":"- (BOOL)getCString:(char *)buffer maxLength:(NSUInteger)maxBufferCount encoding:(NSStringEncoding)encoding"},"getFileSystemRepresentation:maxLength:":{"abs":"Interprets the receiver as a system-independent path and fills a buffer with a C-string in a format and encoding suitable for use with file-system calls.","dec":"- (BOOL)getFileSystemRepresentation:(char *)buffer maxLength:(NSUInteger)maxLength"},"getLineStart:end:contentsEnd:forRange:":{"abs":"Returns by reference the beginning of the first line and the end of the last line touched by the given range.","dec":"- (void)getLineStart:(NSUInteger *)startIndex end:(NSUInteger *)lineEndIndex contentsEnd:(NSUInteger *)contentsEndIndex forRange:(NSRange)aRange"},"getParagraphStart:end:contentsEnd:forRange:":{"abs":"Returns by reference the beginning of the first paragraph and the end of the last paragraph touched by the given range.","dec":"- (void)getParagraphStart:(NSUInteger *)startIndex end:(NSUInteger *)endIndex contentsEnd:(NSUInteger *)contentsEndIndex forRange:(NSRange)aRange"},"hash":{"abs":"Returns an unsigned integer that can be used as a hash table address.","dec":"- (NSUInteger)hash"},"hasPrefix:":{"abs":"Returns a Boolean value that indicates whether a given string matches the beginning characters of the receiver.","dec":"- (BOOL)hasPrefix:(NSString *)aString"},"hasSuffix:":{"abs":"Returns a Boolean value that indicates whether a given string matches the ending characters of the receiver.","dec":"- (BOOL)hasSuffix:(NSString *)aString"},"init":{"abs":"Returns an initialized NSString object that contains no characters.","dec":"- (instancetype)init"},"initWithBytes:length:encoding:":{"abs":"Returns an initialized NSString object containing a given number of bytes from a given buffer of bytes interpreted in a given encoding.","dec":"- (instancetype)initWithBytes:(const void *)bytes length:(NSUInteger)length encoding:(NSStringEncoding)encoding"},"initWithBytesNoCopy:length:encoding:freeWhenDone:":{"abs":"Returns an initialized NSString object that contains a given number of bytes from a given buffer of bytes interpreted in a given encoding, and optionally frees the buffer.","dec":"- (instancetype)initWithBytesNoCopy:(void *)bytes length:(NSUInteger)length encoding:(NSStringEncoding)encoding freeWhenDone:(BOOL)flag"},"initWithCharacters:length:":{"abs":"Returns an initialized NSString object that contains a given number of characters from a given C array of Unicode characters.","dec":"- (instancetype)initWithCharacters:(const unichar *)characters length:(NSUInteger)length"},"initWithCharactersNoCopy:length:freeWhenDone:":{"abs":"Returns an initialized NSString object that contains a given number of characters from a given C array of Unicode characters.","dec":"- (instancetype)initWithCharactersNoCopy:(unichar *)characters length:(NSUInteger)length freeWhenDone:(BOOL)flag"},"initWithContentsOfFile:encoding:error:":{"abs":"Returns an NSString object initialized by reading data from the file at a given path using a given encoding.","dec":"- (instancetype)initWithContentsOfFile:(NSString *)path encoding:(NSStringEncoding)enc error:(NSError **)error"},"initWithContentsOfFile:usedEncoding:error:":{"abs":"Returns an NSString object initialized by reading data from the file at a given path and returns by reference the encoding used to interpret the characters.","dec":"- (instancetype)initWithContentsOfFile:(NSString *)path usedEncoding:(NSStringEncoding *)enc error:(NSError **)error"},"initWithContentsOfURL:encoding:error:":{"abs":"Returns an NSString object initialized by reading data from a given URL interpreted using a given encoding.","dec":"- (instancetype)initWithContentsOfURL:(NSURL *)url encoding:(NSStringEncoding)enc error:(NSError **)error"},"initWithContentsOfURL:usedEncoding:error:":{"abs":"Returns an NSString object initialized by reading data from a given URL and returns by reference the encoding used to interpret the data.","dec":"- (instancetype)initWithContentsOfURL:(NSURL *)url usedEncoding:(NSStringEncoding *)enc error:(NSError **)error"},"initWithCString:encoding:":{"abs":"Returns an NSString object initialized using the characters in a given C array, interpreted according to a given encoding.","dec":"- (instancetype)initWithCString:(const char *)nullTerminatedCString encoding:(NSStringEncoding)encoding"},"initWithData:encoding:":{"abs":"Returns an NSString object initialized by converting given data into Unicode characters using a given encoding.","dec":"- (instancetype)initWithData:(NSData *)data encoding:(NSStringEncoding)encoding"},"initWithFormat:":{"abs":"Returns an NSString object initialized by using a given format string as a template into which the remaining argument values are substituted.","dec":"- (instancetype)initWithFormat:(NSString *)format, ..."},"initWithFormat:arguments:":{"abs":"Returns an NSString object initialized by using a given format string as a template into which the remaining argument values are substituted according to the user’s default locale.","dec":"- (instancetype)initWithFormat:(NSString *)format arguments:(va_list)argList"},"initWithFormat:locale:":{"abs":"Returns an NSString object initialized by using a given format string as a template into which the remaining argument values are substituted according to given locale information.","dec":"- (instancetype)initWithFormat:(NSString *)format locale:(id)locale, ..."},"initWithFormat:locale:arguments:":{"abs":"Returns an NSString object initialized by using a given format string as a template into which the remaining argument values are substituted according to given locale information.","dec":"- (instancetype)initWithFormat:(NSString *)format locale:(id)locale arguments:(va_list)argList"},"initWithString:":{"abs":"Returns an NSString object initialized by copying the characters from another given string.","dec":"- (instancetype)initWithString:(NSString *)aString"},"initWithUTF8String:":{"abs":"Returns an NSString object initialized by copying the characters from a given C array of UTF8-encoded bytes.","dec":"- (instancetype)initWithUTF8String:(const char *)bytes"},"integerValue":{"abs":"Returns the NSInteger value of the receiver’s text.","dec":"- (NSInteger)integerValue"},"intValue":{"abs":"Returns the integer value of the receiver’s text.","dec":"- (int)intValue"},"isAbsolutePath":{"abs":"Returning a Boolean value that indicates whether the receiver represents an absolute path.","dec":"- (BOOL)isAbsolutePath"},"isEqualToString:":{"abs":"Returns a Boolean value that indicates whether a given string is equal to the receiver using a literal Unicode-based comparison.","dec":"- (BOOL)isEqualToString:(NSString *)aString"},"lastPathComponent":{"abs":"Returns the last path component of the receiver.","dec":"- (NSString *)lastPathComponent"},"length":{"abs":"Returns the number of Unicode characters in the receiver.","dec":"- (NSUInteger)length"},"lengthOfBytesUsingEncoding:":{"abs":"Returns the number of bytes required to store the receiver in a given encoding.","dec":"- (NSUInteger)lengthOfBytesUsingEncoding:(NSStringEncoding)enc"},"lineRangeForRange:":{"abs":"Returns the range of characters representing the line or lines containing a given range.","dec":"- (NSRange)lineRangeForRange:(NSRange)aRange"},"linguisticTagsInRange:scheme:options:orthography:tokenRanges:":{"abs":"Returns an array of linguistic tags for the specified range and requested tags within the receiving string.","dec":"- (NSArray *)linguisticTagsInRange:(NSRange)range scheme:(NSString *)tagScheme options:(NSLinguisticTaggerOptions)opts orthography:(NSOrthography *)orthography tokenRanges:(NSArray **)tokenRanges"},"localizedCaseInsensitiveCompare:":{"abs":"Compares the string and a given string using a case-insensitive, localized, comparison.","dec":"- (NSComparisonResult)localizedCaseInsensitiveCompare:(NSString *)aString"},"localizedCompare:":{"abs":"Compares the string and a given string using a localized comparison.","dec":"- (NSComparisonResult)localizedCompare:(NSString *)aString"},"localizedStandardCompare:":{"abs":"Compares strings as sorted by the Finder.","dec":"- (NSComparisonResult)localizedStandardCompare:(NSString *)string"},"longLongValue":{"abs":"Returns the long long value of the receiver’s text.","dec":"- (long long)longLongValue"},"lowercaseString":{"abs":"Returns lowercased representation of the receiver.","dec":"- (NSString *)lowercaseString"},"lowercaseStringWithLocale:":{"abs":"Returns a version of the string with all letters converted to lowercase, taking into account the specified locale.","dec":"- (NSString *)lowercaseStringWithLocale:(NSLocale *)locale"},"maximumLengthOfBytesUsingEncoding:":{"abs":"Returns the maximum number of bytes needed to store the receiver in a given encoding.","dec":"- (NSUInteger)maximumLengthOfBytesUsingEncoding:(NSStringEncoding)enc"},"paragraphRangeForRange:":{"abs":"Returns the range of characters representing the paragraph or paragraphs containing a given range.","dec":"- (NSRange)paragraphRangeForRange:(NSRange)aRange"},"pathComponents":{"abs":"Returns an array of NSString objects containing, in order, each path component of the receiver.","dec":"- (NSArray *)pathComponents"},"pathExtension":{"abs":"Interprets the receiver as a path and returns the receiver’s extension, if any.","dec":"- (NSString *)pathExtension"},"precomposedStringWithCanonicalMapping":{"abs":"Returns a string made by normalizing the receiver’s contents using Form C.","dec":"- (NSString *)precomposedStringWithCanonicalMapping"},"precomposedStringWithCompatibilityMapping":{"abs":"Returns a string made by normalizing the receiver’s contents using Form KC.","dec":"- (NSString *)precomposedStringWithCompatibilityMapping"},"propertyList":{"abs":"Parses the receiver as a text representation of a property list, returning an NSString, NSData, NSArray, or NSDictionary object, according to the topmost element.","dec":"- (id)propertyList"},"propertyListFromStringsFileFormat":{"abs":"Returns a dictionary object initialized with the keys and values found in the receiver.","dec":"- (NSDictionary *)propertyListFromStringsFileFormat"},"rangeOfCharacterFromSet:":{"abs":"Finds and returns the range in the receiver of the first character from a given character set.","dec":"- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet"},"rangeOfCharacterFromSet:options:":{"abs":"Finds and returns the range in the receiver of the first character, using given options, from a given character set.","dec":"- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask"},"rangeOfCharacterFromSet:options:range:":{"abs":"Finds and returns the range in the receiver of the first character from a given character set found in a given range with given options.","dec":"- (NSRange)rangeOfCharacterFromSet:(NSCharacterSet *)aSet options:(NSStringCompareOptions)mask range:(NSRange)aRange"},"rangeOfComposedCharacterSequenceAtIndex:":{"abs":"Returns the range in the receiver of the composed character sequence located at a given index.","dec":"- (NSRange)rangeOfComposedCharacterSequenceAtIndex:(NSUInteger)anIndex"},"rangeOfComposedCharacterSequencesForRange:":{"abs":"Returns the range in the string of the composed character sequences for a given range.","dec":"- (NSRange)rangeOfComposedCharacterSequencesForRange:(NSRange)range"},"rangeOfString:":{"abs":"Finds and returns the range of the first occurrence of a given string within the receiver.","dec":"- (NSRange)rangeOfString:(NSString *)aString"},"rangeOfString:options:":{"abs":"Finds and returns the range of the first occurrence of a given string within the receiver, subject to given options.","dec":"- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask"},"rangeOfString:options:range:":{"abs":"Finds and returns the range of the first occurrence of a given string, within the given range of the receiver, subject to given options.","dec":"- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)aRange"},"rangeOfString:options:range:locale:":{"abs":"Finds and returns the range of the first occurrence of a given string within a given range of the receiver, subject to given options, using the specified locale, if any.","dec":"- (NSRange)rangeOfString:(NSString *)aString options:(NSStringCompareOptions)mask range:(NSRange)searchRange locale:(NSLocale *)locale"},"smallestEncoding":{"abs":"Returns the smallest encoding to which the receiver can be converted without loss of information.","dec":"- (NSStringEncoding)smallestEncoding"},"stringByAbbreviatingWithTildeInPath":{"abs":"Returns a new string that replaces the current home directory portion of the current path with a tilde (~) character.","dec":"- (NSString *)stringByAbbreviatingWithTildeInPath"},"stringByAddingPercentEncodingWithAllowedCharacters:":{"abs":"Returns a new string made from the receiver by replacing all characters not in the specified set with percent encoded characters.","dec":"- (NSString *)stringByAddingPercentEncodingWithAllowedCharacters:(NSCharacterSet *)allowedCharacters"},"stringByAddingPercentEscapesUsingEncoding:":{"abs":"Returns a representation of the receiver using a given encoding to determine the percent escapes necessary to convert the receiver into a legal URL string.","dec":"- (NSString *)stringByAddingPercentEscapesUsingEncoding:(NSStringEncoding)encoding"},"stringByAppendingFormat:":{"abs":"Returns a string made by appending to the receiver a string constructed from a given format string and the following arguments.","dec":"- (NSString *)stringByAppendingFormat:(NSString *)format, ..."},"stringByAppendingPathComponent:":{"abs":"Returns a new string made by appending to the receiver a given string.","dec":"- (NSString *)stringByAppendingPathComponent:(NSString *)aString"},"stringByAppendingPathExtension:":{"abs":"Returns a new string made by appending to the receiver an extension separator followed by a given extension.","dec":"- (NSString *)stringByAppendingPathExtension:(NSString *)ext"},"stringByAppendingString:":{"abs":"Returns a new string made by appending a given string to the receiver.","dec":"- (NSString *)stringByAppendingString:(NSString *)aString"},"stringByDeletingLastPathComponent":{"abs":"Returns a new string made by deleting the last path component from the receiver, along with any final path separator.","dec":"- (NSString *)stringByDeletingLastPathComponent"},"stringByDeletingPathExtension":{"abs":"Returns a new string made by deleting the extension (if any, and only the last) from the receiver.","dec":"- (NSString *)stringByDeletingPathExtension"},"stringByExpandingTildeInPath":{"abs":"Returns a new string made by expanding the initial component of the receiver to its full path value.","dec":"- (NSString *)stringByExpandingTildeInPath"},"stringByFoldingWithOptions:locale:":{"abs":"Returns a string with the given character folding options applied.","dec":"- (NSString *)stringByFoldingWithOptions:(NSStringCompareOptions)options locale:(NSLocale *)locale"},"stringByPaddingToLength:withString:startingAtIndex:":{"abs":"Returns a new string formed from the receiver by either removing characters from the end, or by appending as many occurrences as necessary of a given pad string.","dec":"- (NSString *)stringByPaddingToLength:(NSUInteger)newLength withString:(NSString *)padString startingAtIndex:(NSUInteger)padIndex"},"stringByRemovingPercentEncoding":{"abs":"Returns a new string made from the receiver by replacing all percent encoded sequences with the matching UTF-8 characters.","dec":"- (NSString *)stringByRemovingPercentEncoding"},"stringByReplacingCharactersInRange:withString:":{"abs":"Returns a new string in which the characters in a specified range of the receiver are replaced by a given string.","dec":"- (NSString *)stringByReplacingCharactersInRange:(NSRange)range withString:(NSString *)replacement"},"stringByReplacingOccurrencesOfString:withString:":{"abs":"Returns a new string in which all occurrences of a target string in the receiver are replaced by another given string.","dec":"- (NSString *)stringByReplacingOccurrencesOfString:(NSString *)target withString:(NSString *)replacement"},"stringByReplacingOccurrencesOfString:withString:options:range:":{"abs":"Returns a new string in which all occurrences of a target string in a specified range of the receiver are replaced by another given string.","dec":"- (NSString *)stringByReplacingOccurrencesOfString:(NSString *)target withString:(NSString *)replacement options:(NSStringCompareOptions)options range:(NSRange)searchRange"},"stringByReplacingPercentEscapesUsingEncoding:":{"abs":"Returns a new string made by replacing in the receiver all percent escapes with the matching characters as determined by a given encoding.","dec":"- (NSString *)stringByReplacingPercentEscapesUsingEncoding:(NSStringEncoding)encoding"},"stringByResolvingSymlinksInPath":{"abs":"Returns a new string made from the receiver by resolving all symbolic links and standardizing path.","dec":"- (NSString *)stringByResolvingSymlinksInPath"},"stringByStandardizingPath":{"abs":"Returns a new string made by removing extraneous path components from the receiver.","dec":"- (NSString *)stringByStandardizingPath"},"stringByTrimmingCharactersInSet:":{"abs":"Returns a new string made by removing from both ends of the receiver characters contained in a given character set.","dec":"- (NSString *)stringByTrimmingCharactersInSet:(NSCharacterSet *)set"},"stringsByAppendingPaths:":{"abs":"Returns an array of strings made by separately appending to the receiver each string in in a given array.","dec":"- (NSArray *)stringsByAppendingPaths:(NSArray *)paths"},"substringFromIndex:":{"abs":"Returns a new string containing the characters of the receiver from the one at a given index to the end.","dec":"- (NSString *)substringFromIndex:(NSUInteger)anIndex"},"substringToIndex:":{"abs":"Returns a new string containing the characters of the receiver up to, but not including, the one at a given index.","dec":"- (NSString *)substringToIndex:(NSUInteger)anIndex"},"substringWithRange:":{"abs":"Returns a string object containing the characters of the receiver that lie within a given range.","dec":"- (NSString *)substringWithRange:(NSRange)aRange"},"uppercaseString":{"abs":"Returns a uppercased representation of the receiver.","dec":"- (NSString *)uppercaseString"},"uppercaseStringWithLocale:":{"abs":"Returns a version of the string with all letters converted to uppercase, taking into account the specified locale.","dec":"- (NSString *)uppercaseStringWithLocale:(NSLocale *)locale"},"UTF8String":{"abs":"Returns a null-terminated UTF8 representation of the receiver.","dec":"- (const char *)UTF8String"},"writeToFile:atomically:encoding:error:":{"abs":"Writes the contents of the receiver to a file at a given path using a given encoding.","dec":"- (BOOL)writeToFile:(NSString *)path atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error"},"writeToURL:atomically:encoding:error:":{"abs":"Writes the contents of the receiver to the URL specified by url using the specified encoding.","dec":"- (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)useAuxiliaryFile encoding:(NSStringEncoding)enc error:(NSError **)error"}},"[=]":{"NSMaximumStringLength":"","NSCaseInsensitiveSearch":"","NSLiteralSearch":"","NSBackwardsSearch":"","NSAnchoredSearch":"","NSNumericSearch":"","NSDiacriticInsensitiveSearch":"","NSWidthInsensitiveSearch":"","NSForcedOrderingSearch":"","NSRegularExpressionSearch":"","NSStringEncodingConversionAllowLossy":"","NSStringEncodingConversionExternalRepresentation":"","NSCharacterConversionException":"","NSParseErrorException":"","NSASCIIStringEncoding":"","NSNEXTSTEPStringEncoding":"","NSJapaneseEUCStringEncoding":"","NSUTF8StringEncoding":"","NSISOLatin1StringEncoding":"","NSSymbolStringEncoding":"","NSNonLossyASCIIStringEncoding":"","NSShiftJISStringEncoding":"","NSISOLatin2StringEncoding":"","NSUnicodeStringEncoding":"","NSWindowsCP1251StringEncoding":"","NSWindowsCP1252StringEncoding":"","NSWindowsCP1253StringEncoding":"","NSWindowsCP1254StringEncoding":"","NSWindowsCP1250StringEncoding":"","NSISO2022JPStringEncoding":"","NSMacOSRomanStringEncoding":"","NSUTF16StringEncoding":"","NSUTF16BigEndianStringEncoding":"","NSUTF16LittleEndianStringEncoding":"","NSUTF32StringEncoding":"","NSUTF32BigEndianStringEncoding":"","NSUTF32LittleEndianStringEncoding":"","NSProprietaryStringEncoding":"","NSStringEnumerationByLines":"","NSStringEnumerationByParagraphs":"","NSStringEnumerationByComposedCharacterSequences":"","NSStringEnumerationByWords":"","NSStringEnumerationBySentences":"","NSStringEnumerationReverse":"","NSStringEnumerationSubstringNotRequired":"","NSStringEnumerationLocalized":""}};