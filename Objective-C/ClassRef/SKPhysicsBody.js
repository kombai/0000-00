ClassRef["SKPhysicsBody"] = {"[:]":"NSObject","[.]":{"affectedByGravity":{"abs":"A Boolean value that indicates whether this physics body is affected by the physics world’s gravitational force.","dec":"@property(assign, nonatomic) BOOL affectedByGravity"},"allowsRotation":{"abs":"A Boolean value that indicates whether the physics body is affected by angular forces and impulses applied to it.","dec":"@property(nonatomic) BOOL allowsRotation"},"angularDamping":{"abs":"A property that reduces the body’s rotational velocity.","dec":"@property(assign, nonatomic) CGFloat angularDamping"},"angularVelocity":{"abs":"The physics body’s angular speed.","dec":"@property(nonatomic) CGFloat angularVelocity"},"area":{"abs":"The area covered by the body. (read-only)","dec":"@property(readonly, nonatomic) CGFloat area"},"categoryBitMask":{"abs":"A mask that defines which categories this physics body belongs to.","dec":"@property(assign, nonatomic) uint32_t categoryBitMask"},"collisionBitMask":{"abs":"A mask that defines which categories of physics bodies can collide with this physics body.","dec":"@property(assign, nonatomic) uint32_t collisionBitMask"},"contactTestBitMask":{"abs":"A mask that defines which categories of bodies cause intersection notifications with this physics body.","dec":"@property(assign, nonatomic) uint32_t contactTestBitMask"},"density":{"abs":"The density of the object in kilograms per square meter.","dec":"@property(nonatomic) CGFloat density"},"dynamic":{"abs":"A Boolean value that indicates whether the physics body is moved by the physics simulation.","dec":"@property(getter=isDynamic, nonatomic) BOOL dynamic"},"friction":{"abs":"The roughness of the surface of the physics body.","dec":"@property(nonatomic) CGFloat friction"},"joints":{"abs":"The joints connected to this physics body. (read-only)","dec":"@property(readonly, nonatomic) NSArray *joints"},"linearDamping":{"abs":"A property that reduces the body’s linear velocity.","dec":"@property(assign, nonatomic) CGFloat linearDamping"},"mass":{"abs":"The mass of the body in kilograms.","dec":"@property(nonatomic) CGFloat mass"},"node":{"abs":"The node that this body is connected to. (read-only)","dec":"@property(readonly, weak, nonatomic) SKNode *node"},"resting":{"abs":"A Boolean property that indicates whether the object is at rest within the physics simulation.","dec":"@property(getter=isResting, nonatomic) BOOL resting"},"restitution":{"abs":"The bounciness of the physics body.","dec":"@property(nonatomic) CGFloat restitution"},"usesPreciseCollisionDetection":{"abs":"A Boolean value that determines whether the physics world uses a more precise collision detection algorithm.","dec":"@property(nonatomic) BOOL usesPreciseCollisionDetection"},"velocity":{"abs":"The physics body’s velocity vector, measured in meters per second.","dec":"@property(nonatomic) CGVector velocity"}},"[+]":{"bodyWithBodies:":{"abs":"Creates a physics body by performing a union of a group of volume-based physics bodies.","dec":"+ (SKPhysicsBody *)bodyWithBodies:(NSArray *)bodies"},"bodyWithCircleOfRadius:":{"abs":"Creates a circular physics body centered on the owning node’s origin.","dec":"+ (SKPhysicsBody *)bodyWithCircleOfRadius:(CGFloat)r"},"bodyWithCircleOfRadius:center:":{"abs":"Creates a circular physics body centered on an arbitrary point.","dec":"+ (SKPhysicsBody *)bodyWithCircleOfRadius:(CGFloat)r center:(CGPoint)center"},"bodyWithEdgeChainFromPath:":{"abs":"Creates an edge chain from a path.","dec":"+ (SKPhysicsBody *)bodyWithEdgeChainFromPath:(CGPathRef)path"},"bodyWithEdgeFromPoint:toPoint:":{"abs":"Creates an edge between two points.","dec":"+ (SKPhysicsBody *)bodyWithEdgeFromPoint:(CGPoint)p1 toPoint:(CGPoint)p2"},"bodyWithEdgeLoopFromPath:":{"abs":"Creates an edge loop from a path.","dec":"+ (SKPhysicsBody *)bodyWithEdgeLoopFromPath:(CGPathRef)path"},"bodyWithEdgeLoopFromRect:":{"abs":"Creates an edge loop from a rectangle.","dec":"+ (SKPhysicsBody *)bodyWithEdgeLoopFromRect:(CGRect)rect"},"bodyWithPolygonFromPath:":{"abs":"Creates a polygon-shaped physics body.","dec":"+ (SKPhysicsBody *)bodyWithPolygonFromPath:(CGPathRef)path"},"bodyWithRectangleOfSize:":{"abs":"Creates a rectangular physics body centered on the owning node’s origin.","dec":"+ (SKPhysicsBody *)bodyWithRectangleOfSize:(CGSize)s"},"bodyWithRectangleOfSize:center:":{"abs":"Creates a rectangular physics body centered on an arbitrary point.","dec":"+ (SKPhysicsBody *)bodyWithRectangleOfSize:(CGSize)s center:(CGPoint)center"}},"[-]":{"allContactedBodies":{"abs":"The physics bodies that this physics body is in contact with.","dec":"- (NSArray *)allContactedBodies"},"applyAngularImpulse:":{"abs":"Applies an impulse that imparts angular momentum to an object.","dec":"- (void)applyAngularImpulse:(CGFloat)impulse"},"applyForce:":{"abs":"Applies a force to the center of gravity of a physics body.","dec":"- (void)applyForce:(CGVector)force"},"applyForce:atPoint:":{"abs":"Applies a force to a specific point of a physics body.","dec":"- (void)applyForce:(CGVector)force atPoint:(CGPoint)point"},"applyImpulse:":{"abs":"Applies an impulse to the center of gravity of a physics body.","dec":"- (void)applyImpulse:(CGVector)impulse"},"applyImpulse:atPoint:":{"abs":"Applies an impulse to a specific point of a physics body.","dec":"- (void)applyImpulse:(CGVector)impulse atPoint:(CGPoint)point"},"applyTorque:":{"abs":"Applies a torque to an object.","dec":"- (void)applyTorque:(CGFloat)torque"}}};